codechain patchfile version 2
treehash 3af54bd5b9f3f3414232b08041f35a2135512e48ee64a1c70f6cbabffb487e7a
- f 55a6dfe108eac66432ed6f6da187fcf302fb90fbdb57c7928300e96cc0d5198f .secpkg
+ f 7f885be43b0bcc567d597f4beef9b7f4693fa8980ef630c26ec21be5e7adeb7c .secpkg
dmppatch 5
@@ -22,86 +22,86 @@
 n%22,%0A
-  %22Head%22: %2275dd6e10abac145bd9cff65a2b2d31aedc2adcfbf4ffc49df63fa60f36fe0ef5%22,%0A
+  %22Head%22: %226b1b8499cd5fee22a42d4ee0ec87070ed1cecafc4ef81850040bcf08f6124346%22,%0A
   %22D
- f fbb17d941937e97c9eda5584910454466161dff67c33bebbafe37b24c44b90ba archive/archive_test.go
+ f b92a7f25005478da5f2f1b4aad5498846c6371d34eb024159c520f02f854f558 archive/archive_test.go
dmppatch 5
@@ -173,56 +173,52 @@
 ef%22%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 )%0A%0Ac
- f a05261ddcdc5ce908314cdfb99a478373613fd9bc7ff73a156820d87ad3b4909 cmd/ssotpub/ssotpub.go
+ f 37ecc592ad8685a2a1c3a6c2070a00a836977de829297bfe7d291616b5a3bde1 cmd/ssotpub/ssotpub.go
dmppatch 13
@@ -340,106 +340,113 @@
 md)%0A
-%09fmt.Fprintf(os.Stderr, %22       %25s createpkg -name name -dns FQDN -url URL -s seckey.bin%5Cn%22, cmd)%0A
+%09fmt.Fprintf(os.Stderr, %22       %25s createpkg -name name -dns FQDN -url URL -s seckey.bin %5B-dyn%5D%5Cn%22, cmd)%0A
 %09fmt
@@ -494,16 +494,82 @@
 %22, cmd)%0A
+%09fmt.Fprintf(os.Stderr, %22       %25s refresh .secpkg %5B...%5D%5Cn%22, cmd)%0A
 %09os.Exit
@@ -954,16 +954,73 @@
 rgs...)%0A
+%09case %22refresh%22:%0A%09%09err = command.Refresh(argv0, args...)%0A
 %09default
+ f 65a5a7fcb0215d6579d94d57a28a09c148d08fcb97c22c3ee924445d63258a75 cmd/util/dynapi/dynapi.go
utf8file 105
// dynapi calls the Dyn Managed DNS API (https://help.dyn.com/dns-api-knowledge-base/).
package main

import (
	"encoding/json"
	"errors"
	"flag"
	"fmt"
	"os"

	"github.com/frankbraun/codechain/ssot"
	"github.com/frankbraun/codechain/util"
	"github.com/frankbraun/codechain/util/dyn"
	"github.com/frankbraun/codechain/util/log"
)

func callDynAPI(
	customerName, userName, password, zone, fqdn, data string,
	ttl int,
	update, del bool,
) error {
	s, err := dyn.New(customerName, userName, password)
	if err != nil {
		return err
	}
	defer s.Close()
	if update {
		if err := s.TXTUpdate(zone, fqdn, data, ttl); err != nil {
			return err
		}
	} else if del {
		if err := s.TXTDelete(zone, fqdn); err != nil {
			return err
		}
	} else {
		if err := s.TXTCreate(zone, fqdn, data, ttl); err != nil {
			return err
		}
	}
	ret, err := s.ZoneChangeset(zone)
	if err != nil {
		return err
	}
	jsn, err := json.MarshalIndent(ret, "", "  ")
	if err != nil {
		return err
	}
	fmt.Println(string(jsn))
	return s.ZoneUpdate(zone)
}

func usage() {
	fmt.Fprintf(os.Stderr, "Usage: %s\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "Call Dyn Managed DNS API.\n")
	flag.PrintDefaults()
	os.Exit(2)
}

func main() {
	customerName := flag.String("c", "", "Customer name")
	userName := flag.String("u", "", "User name")
	password := flag.String("p", "", "Password")
	zone := flag.String("zone", "", "Zone")
	fqdn := flag.String("fqdn", "", "FQDN")
	data := flag.String("data", "", "TXT data")
	ttl := flag.Int("ttl", ssot.TTL, "TTL")
	update := flag.Bool("update", false, "Update TXT record")
	del := flag.Bool("delete", false, "Delete TXT record")
	verbose := flag.Bool("v", false, "Be verbose")
	flag.Usage = usage
	flag.Parse()
	if *customerName == "" {
		util.Fatal(errors.New("customer name (-c) is mandatory"))
	}
	if *userName == "" {
		util.Fatal(errors.New("user name (-u) is mandatory"))
	}
	if *password == "" {
		util.Fatal(errors.New("password (-p) is mandatory"))
	}
	if *zone == "" {
		util.Fatal(errors.New("zone (-zone) is mandatory"))
	}
	if *fqdn == "" {
		util.Fatal(errors.New("fqdn (-fqdn) is mandatory"))
	}
	if *data == "" && !*del {
		util.Fatal(errors.New("data (-data) is mandatory"))
	}
	if *update && *del {
		util.Fatal(errors.New("-update and -delete exclude each other"))
	}
	if *verbose {
		log.Std = log.NewStd(os.Stdout)
	}
	if flag.NArg() != 0 {
		usage()
	}
	err := callDynAPI(*customerName, *userName, *password, *zone, *fqdn, *data,
		*ttl, *update, *del)
	if err != nil {
		util.Fatal(err)
	}
}

- f 97f17879b98cb206229fb6c4a3b0fa2b3f96aea01b24d12121dd94fe9b0557e3 command/apply.go
+ f 2eb843c720aa24f8dfe8fa670eb7b935dc369c1d2855982884098457ae7cb1d1 command/apply.go
dmppatch 5
@@ -181,56 +181,52 @@
 ef%22%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 %09%22gi
- f 958ca8f39b465912ea1fe355387ee4cc23d885ac48f207edd0e875b603ce6357 command/publish.go
+ f 36fa9f1e89db88b5fd573997e8b8b740e4b8f1ef358dfc49a38a2aaf4601d06d command/publish.go
dmppatch 8
@@ -164,56 +164,8 @@
 ef%22%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
 %09%22gi
@@ -374,16 +374,60 @@
 il/git%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 %09%22github
- f e53951130f423e7cb588fe8a884bc56308c89047b84b3c8b21e699da36b27d74 command/status.go
+ f 37cdf9c7b6971c55845e71226e77a7921ce430dfe0d97459539064416f772336 command/status.go
dmppatch 8
@@ -146,56 +146,8 @@
 ef%22%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
 %09%22gi
@@ -222,16 +222,60 @@
 n/util%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 %09%22github
- f f1bcbfa26301db2169756e64cac16bace4a6336b6d13549ff7be191db60d02f5 go.mod
+ f 2f26810e7d6406de1577087a744a2d05fda135f8bb2b120c728a5685e815f136 go.mod
dmppatch 5
@@ -319,127 +319,127 @@
 ect%0A
-%09golang.org/x/crypto v0.0.0-20190103213133-ff983b9c42bc%0A%09golang.org/x/sys v0.0.0-20190114130336-2be517255631 // indirect%0A
+%09golang.org/x/crypto v0.0.0-20190123085648-057139ce5d2b%0A%09golang.org/x/sys v0.0.0-20190124100055-b90733256f2e // indirect%0A
 )%0A
- f c604dcb39ac7f06943710fb58f904259f98b9ce0cff947c81539f406672dcf2d go.sum
+ f 66f670bb08e22e53a4db0c14d02c881f2a89bcfe06fec5223e46912bff09c552 go.sum
dmppatch 7
@@ -1489,32 +1489,245 @@
 PDi9nlGo2tz2b4=%0A
+golang.org/x/crypto v0.0.0-20190123085648-057139ce5d2b h1:Elez2XeF2p9uyVj0yEUDqQ56NFcDtcBNkYP7yv8YbUE=%0Agolang.org/x/crypto v0.0.0-20190123085648-057139ce5d2b/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=%0A
 golang.org/x/sys
@@ -2518,28 +2518,235 @@
 hshtkjS+E42TnysNCUPdjciGhY=%0A
+golang.org/x/sys v0.0.0-20190124100055-b90733256f2e h1:3GIlrlVLfkoipSReOMNAgApI0ajnalyLa/EZHHca/XI=%0Agolang.org/x/sys v0.0.0-20190124100055-b90733256f2e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=%0A
- f f08ae3c31a4e2f1f1f9793db4b2777219ec2a175edabe5b977c35336cd0046e0 hashchain/hashchain_test.go
+ f 7d5d67ac39ce15a46403d7aa97ced34fd2480fd7cc110beff94901ba307ea341 hashchain/hashchain_test.go
dmppatch 5
@@ -106,56 +106,52 @@
 g%22%0A%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 %09%22go
- f 0d101cae6a32eb0ad2e0f37685a8e071d7efa24a8b5f4341481bece34681dc59 hashchain/internal/state/state.go
+ f 39a09ab8be070ba7ac08108bcbde65bd6299f20e455ddad1d272dc0121318f35 hashchain/internal/state/state.go
dmppatch 8
@@ -144,56 +144,8 @@
 64%22%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
 %09%22gi
@@ -220,16 +220,60 @@
 n/util%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 %09%22github
- f 1a8af52000f9735020acf6e6611b26600382f1a45920e6e634fe962c2a050526 hashchain/link.go
+ f 539d457f2ca7af13e5d0d1e601a3d857b8580dc4e7b4bbdd500721dcd4528962 hashchain/link.go
dmppatch 8
@@ -96,56 +96,8 @@
 or%22%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
 %09%22gi
@@ -132,16 +132,60 @@
 n/tree%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 %09%22github
- f a469a034a3680d2b0c14c3350a4b9ed1877eca843e2b400ff3d75ee34f899f20 hashchain/read.go
+ f e1217044adf32f0b069651a5e40648207f4e6a4c020b2605ac2304add937a4ad hashchain/read.go
dmppatch 8
@@ -65,56 +65,8 @@
 s%22%0A%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
 %09%22gi
@@ -102,24 +102,68 @@
 /util/file%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 %09%22github.com
- f 8860cee94eba027d6578fbf27fa4733a63083c8f3144fd21cfa7565a7a1211b4 hashchain/signature.go
+ f 8bff53fbc3f445d7c8d1774b7b7b2e7660c849e7b232e445c4746245280735bc hashchain/signature.go
dmppatch 5
@@ -138,56 +138,52 @@
 64%22%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 %09%22gi
- f 4d20cf7e804a9aa6021ce0ab7274698d3755e8b13d52eb4592a2fda614c0f0ce hashchain/source.go
+ f f4d674ff3a8dc7f56cd0aa29355f794eb6a715ff7e09750eda2a2d702eb2b161 hashchain/source.go
dmppatch 8
@@ -138,56 +138,8 @@
 64%22%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
 %09%22gi
@@ -174,16 +174,60 @@
 n/util%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 %09%22github
- f 725c6ca56417ef8b52cd9b6709c97315de33d5ed609a685dcc1395b6a19a0871 hashchain/verify.go
+ f 4937a139b26be9e54bcc78c6c7bc3361a627a2e497e3cfb8393643837f83f46a hashchain/verify.go
dmppatch 5
@@ -245,56 +245,52 @@
 64%22%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 %09%22gi
- f 4b56c57fe9f2315f43f8b686ecd14db4d388d84f5ceb5458b9f25c1ae44fbabe internal/ascii85/ascii85_test.go
+ f 21b5dede453f80c272db64e68b9752ea93819d0cd91d1c87fe5e57fccd2b79a7 internal/ascii85/ascii85_test.go
dmppatch 5
@@ -44,56 +44,52 @@
 g%22%0A%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 )%0A%0Ac
- f b7b7363bdeb86fd7b008587d560c59e56b995d42f8d85539dcab1eb87ab45185 internal/def/def.go
+ f bcd70e60f83210ff3da9dc4ab77fc492b7e899e15ed4a3bc6cd4b9e9f4d2f5e1 internal/def/def.go
dmppatch 4
@@ -1371,16 +1371,130 @@
 -url.%22%0A%0A
+// CodechainTestName is the TXT entry used to test Dyn credentials.%0Aconst CodechainTestName = %22_codechain-test.%22%0A%0A
 // Exclu
- f 63c5782111160b024f11097ae875659b3a79a8da8941a6c0b17367e52b0e44e2 internal/hex/hex.go
- f 55a6dfe108eac66432ed6f6da187fcf302fb90fbdb57c7928300e96cc0d5198f packages/codechain.secpkg
+ f 7f885be43b0bcc567d597f4beef9b7f4693fa8980ef630c26ec21be5e7adeb7c packages/codechain.secpkg
dmppatch 5
@@ -22,86 +22,86 @@
 n%22,%0A
-  %22Head%22: %2275dd6e10abac145bd9cff65a2b2d31aedc2adcfbf4ffc49df63fa60f36fe0ef5%22,%0A
+  %22Head%22: %226b1b8499cd5fee22a42d4ee0ec87070ed1cecafc4ef81850040bcf08f6124346%22,%0A
   %22D
- f 0bde41d96bed24d5894ccf844b000f997a04d652d8804964c6b2c4afa59dc920 patchfile/apply.go
+ f 6acf5f926432bfd4460f4e04a489c4c8448ca698fcf00d67da52ca87e1dfb990 patchfile/apply.go
dmppatch 8
@@ -125,56 +125,8 @@
 s%22%0A%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
 %09%22gi
@@ -206,16 +206,60 @@
 l/file%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 %09%22github
- f 99d202ea9bd169b9486086813389f33c5006c3d35c58ae7d56a0423a10813150 secpkg/install.go
+ f 1e7aa24953569726ca63003335c14b580d6fb96bf008b24cdd76874d023b35ff secpkg/install.go
dmppatch 13
@@ -202,56 +202,8 @@
 ef%22%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
 %09%22gi
@@ -331,16 +331,60 @@
 numake%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 %09%22github
@@ -1249,43 +1249,41 @@
 %0A%09%7D%0A
-%09fmt.Printf(%22%25s: written%5Cn%22, File)%0A
+%09fmt.Printf(%22%25s: written%5Cn%22, fn)%0A
 %0A%09//
- f 78cae3dfc640fe2914eaf4ac8c1a8ebaa0516943acba3aee0fac50fd042d4fb0 secpkg/secpkg.go
+ f 7ee7939d11bbd640e6af1fadbfa9dc5f1dc190043b105abda3b149b87bd6c66e secpkg/secpkg.go
dmppatch 5
@@ -75,56 +75,52 @@
 s%22%0A%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 )%0A%0A/
- f 1263763672a407ee99f65ff736e4ae7fb47db2eaeb10fc40edfd50a35d37469b ssot/command/createpkg.go
+ f 8d6e399b424d55b6e225f30791b121c37f8d076f00815bf77c5be41f703a42ab ssot/command/createpkg.go
dmppatch 64
@@ -19,16 +19,33 @@
 mport (%0A
+%09%22encoding/json%22%0A
 %09%22flag%22%0A
@@ -98,16 +98,27 @@
 lepath%22%0A
+%09%22strings%22%0A
 %0A%09%22githu
@@ -328,16 +328,60 @@
 n/ssot%22%0A
+%09%22github.com/frankbraun/codechain/util/dyn%22%0A
 %09%22github
@@ -613,90 +613,880 @@
 %0A)%0A%0A
-func createPkg(c *hashchain.HashChain, name, dns, URL, secKeyFile string) error %7B%0A
+func writeTXTRecords(%0A%09s *dyn.Session,%0A%09zone string,%0A%09DNS string,%0A%09sh *ssot.SignedHead,%0A%09URL string,%0A) error %7B%0A%09// Create TXT record to publish the signed head.%0A%09log.Println(%22create TXT record to publish the signed head%22)%0A%09err := s.TXTCreate(zone, def.CodechainHeadName+DNS, sh.Marshal(), ssot.TTL)%0A%09if err != nil %7B%0A%09%09return err%0A%09%7D%0A%09// Create TXT record to publish the url.%0A%09log.Println(%22create TXT record to publish the url%22)%0A%09err = s.TXTCreate(zone, def.CodechainURLName+DNS, URL, ssot.TTL)%0A%09if err != nil %7B%0A%09%09return err%0A%09%7D%0A%09ret, err := s.ZoneChangeset(zone)%0A%09if err != nil %7B%0A%09%09return err%0A%09%7D%0A%09jsn, err := json.MarshalIndent(ret, %22%22, %22  %22)%0A%09if err != nil %7B%0A%09%09return err%0A%09%7D%0A%09log.Println(string(jsn))%0A%09return s.ZoneUpdate(zone)%0A%7D%0A%0Afunc createPkg(%0A%09c *hashchain.HashChain, name, dns, URL, secKeyFile string,%0A%09useDyn bool,%0A%09customerName, userName, password string,%0A) error %7B%0A
 %09hea
@@ -1632,77 +1632,77 @@
 %0A%09%7D%0A
-%09// 2. Create package (before 1., because this checks the arguments)%0A
+%09// 3. Create package (before 1., because this checks the arguments)%0A
 %09if 
@@ -2104,24 +2104,507 @@
 pkgDir)%0A%09%7D%0A%0A
+%09// 2. If TXT records are to be published automatically, check credentials.%0A%09var (%0A%09%09dynConfig  *dyn.Config%0A%09%09dynSession *dyn.Session%0A%09)%0A%09if useDyn %7B%0A%09%09dynConfig = &dyn.Config%7B%0A%09%09%09CustomerName: customerName,%0A%09%09%09UserName:     userName,%0A%09%09%09Password:     password,%0A%09%09%7D%0A%09%09dynSession, err = dyn.NewWithConfig(dynConfig)%0A%09%09if err != nil %7B%0A%09%09%09return err%0A%09%09%7D%0A%09%09defer dynSession.Close()%0A%09%7D else %7B%0A%09%09fmt.Println(%22Publishing TXT records manually, restart with -dyn to switch to automatic%22)%0A%09%7D%0A%0A
 %09// Create .
@@ -2925,67 +2925,67 @@
 e)%0A%0A
-%09// 3. Create the first signed head with counter set to 0.%0A
+%09// 4. Create the first signed head with counter set to 0.%0A
 %09sh 
@@ -3024,70 +3024,70 @@
 y)%0A%0A
-%09// 4. Create the directory ~/.config/ssotpub/pkgs/NAME/dists%0A
+%09// 5. Create the directory ~/.config/ssotpub/pkgs/NAME/dists%0A
 %09// 
@@ -3461,79 +3461,79 @@
 %09%7D%0A%0A
-%09// 5. Save the signed head to ~/.config/ssotpub/pkgs/NAME/signed_head%0A
+%09// 6. Save the signed head to ~/.config/ssotpub/pkgs/NAME/signed_head%0A
 %09sig
@@ -3724,43 +3724,43 @@
 d)%0A%0A
-%09// 6. Print the distribution name%0A
+%09// 7. Print the distribution name%0A
 %09fmt
@@ -3892,169 +3892,814 @@
 %22)%0A%0A
-%09// 7. Print DNS TXT records as defined by the .secpkg, the first signed head,%0A%09//    and the URL.%0A%09fmt.Println(%22Please publish the following DNS TXT records:%22)%0A
+%09// 8. Print DNS TXT records as defined by the .secpkg, the first signed head,%0A%09//    and the download URL. If TXT records are to be published automatically,%0A%09//    save credentials and publish the TXT record.%0A%09if useDyn %7B%0A%09%09// Save the credentials to ~/.config/ssotpub/pkgs/NAME/dyn.json%0A%09%09dynFile := filepath.Join(pkgDir, dyn.ConfigFilename)%0A%09%09if err := dynConfig.Write(dynFile); err != nil %7B%0A%09%09%09return err%0A%09%09%7D%0A%09%09// Write TXT records%0A%09%09log.Printf(%22DNS=%25s%22, pkg.DNS)%0A%09%09parts := strings.Split(pkg.DNS, %22.%22)%0A%09%09zone := parts%5Blen(parts)-2%5D + %22.%22 + parts%5Blen(parts)-1%5D%0A%09%09err := writeTXTRecords(dynSession, zone, pkg.DNS, sh, URL)%0A%09%09if err != nil %7B%0A%09%09%09return nil%0A%09%09%7D%0A%09%09fmt.Println(%22The following DNS TXT records have been published:%22)%0A%09%7D else %7B%0A%09%09fmt.Println(%22Please publish the following DNS TXT records:%22)%0A%09%7D%0A
 %09fmt
@@ -5510,16 +5510,344 @@
 rbose%22)%0A
+%09useDyn := fs.Bool(%22dyn%22, false, %22Use Dyn Managed DNS API to publish TXT records automatically%22)%0A%09customerName := fs.String(%22customer%22, %22%22, %22Customer name for Dyn Managed DNS API%22)%0A%09userName := fs.String(%22user%22, %22%22, %22User name for Dyn Managed DNS API%22)%0A%09password := fs.String(%22password%22, %22%22, %22Password for Dyn Managed DNS API%22)%0A
 %09if err 
@@ -6129,24 +6129,348 @@
 , argv0)%0A%09%7D%0A
+%09if *useDyn && *customerName == %22%22 %7B%0A%09%09return fmt.Errorf(%22%25s: option -dyn requires option -customer%22, argv0)%0A%09%7D%0A%09if *useDyn && *userName == %22%22 %7B%0A%09%09return fmt.Errorf(%22%25s: option -dyn requires option -user%22, argv0)%0A%09%7D%0A%09if *useDyn && *password == %22%22 %7B%0A%09%09return fmt.Errorf(%22%25s: option -dyn requires option -password%22, argv0)%0A%09%7D%0A
 %09if *verbose
@@ -6866,75 +6866,125 @@
 ) %7B%0A
-%09%09if err := createPkg(c, *name, *dns, *url, *secKey); err != nil %7B%0A
+%09%09err := createPkg(c, *name, *dns, *url, *secKey, *useDyn, *customerName,%0A%09%09%09*userName, *password)%0A%09%09if err != nil %7B%0A
 %09%09%09i
+ f 406d1b198b9489e400980d4367124a35c4a0603fefa9f0284fd5b6bd3874273c ssot/command/refresh.go
utf8file 145
package command

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/frankbraun/codechain/internal/def"
	"github.com/frankbraun/codechain/secpkg"
	"github.com/frankbraun/codechain/ssot"
	"github.com/frankbraun/codechain/util/dyn"
	"github.com/frankbraun/codechain/util/file"
	"github.com/frankbraun/codechain/util/homedir"
	"github.com/frankbraun/codechain/util/log"
	"github.com/frankbraun/codechain/util/seckey"
)

func refresh(secpkgFilename string) error {
	// 1. Parse the supplied .secpkg file.
	log.Println("1. parse .secpkg")
	pkg, err := secpkg.Load(secpkgFilename)
	if err != nil {
		return err
	}

	// 2. Make sure the project with NAME has been published before.
	//    That is, the directory ~/.config/ssotpub/pkgs/NAME exists.
	log.Println("2. make sure project exists")
	pkgDir := filepath.Join(homedir.SSOTPub(), "pkgs", pkg.Name)
	exists, err := file.Exists(pkgDir)
	if err != nil {
		return err
	}
	if !exists {
		return fmt.Errorf("package not published yet: '%s' does not exist", pkgDir)
	}

	// 3. Validate the signed head in ~/.config/ssotpub/pkgs/NAME/signed_head
	//    and make sure the corresponding secret key is available.
	log.Println("3. validate signed head")
	signedHeadFile := filepath.Join(pkgDir, "signed_head")
	prevSignedHead, err := ssot.Load(signedHeadFile)
	if err != nil {
		return err
	}

	secKeyFile := filepath.Join(homedir.SSOTPub(), def.SecretsSubDir, prevSignedHead.PubKey())
	secKey, _, _, err := seckey.Read(secKeyFile)
	if err != nil {
		return err
	}

	// 4. Make sure the signed head in ~/.config/ssotpub/pkgs/NAME/signed_head
	//    matches the HEAD in the .secpkg file.
	if prevSignedHead.Head() != pkg.Head {
		return fmt.Errorf("signed head in '%s' does not match HEAD in '%s'",
			signedHeadFile, secpkgFilename)
	}

	// 5. If ~/.config/ssotpub/pkgs/NAME/dyn.json exits, check the contained Dyn
	//    credentials and switch on automatic publishing of TXT records.
	dynFile := filepath.Join(pkgDir, dyn.ConfigFilename)
	exists, err = file.Exists(dynFile)
	if err != nil {
		return err
	}
	var dynSession *dyn.Session
	if exists {
		log.Printf("%s exists", dynFile)
		dynConfig, err := dyn.ReadConfig(dynFile)
		if err != nil {
			return err
		}
		dynSession, err = dyn.NewWithConfig(dynConfig)
		if err != nil {
			return err
		}
		defer dynSession.Close()
	}

	// 6. Create a new signed head with the same HEAD, the counter of the previous
	//    signed head plus 1, and update the saved signed head:
	//
	//    - `cp -f ~/.config/ssotpub/pkgs/NAME/signed_head
	//             ~/.config/ssotpub/pkgs/NAME/previous_signed_head`
	//    - Save new signed head to ~/.config/ssotpub/pkgs/NAME/signed_head (atomic).
	log.Println("6. create a new signed head")
	newSignedHead := ssot.SignHead(prevSignedHead.HeadBuf(),
		prevSignedHead.Counter()+1, *secKey)
	if err := newSignedHead.RotateFile(pkgDir); err != nil {
		return err
	}

	// 7. Print DNS TXT record as defined by the .secpkg file and the signed head.
	//    If TXT records are to be published automatically, publish the TXT record.
	log.Println("7. print DNS TXT record")
	if dynSession != nil {
		// Write TXT record
		log.Printf("DNS=%s", pkg.DNS)
		parts := strings.Split(pkg.DNS, ".")
		zone := parts[len(parts)-2] + "." + parts[len(parts)-1]
		err := writeTXTRecord(dynSession, zone, pkg.DNS, newSignedHead)
		if err != nil {
			return nil
		}
		fmt.Println("The following DNS TXT record has been published:")
	} else {
		fmt.Println("Please publish the following DNS TXT record:")
	}
	fmt.Println("")
	newSignedHead.TXTPrintHead(pkg.DNS)

	return nil
}

// Refresh implements the ssotpub 'refresh' command.
func Refresh(argv0 string, args ...string) error {
	fs := flag.NewFlagSet(argv0, flag.ContinueOnError)
	fs.Usage = func() {
		fmt.Fprintf(os.Stderr, "Usage: %s .secpkg [...]\n", argv0)
		fmt.Fprintf(os.Stderr, "Refresh head from .secpkg file(s).\n")
		fs.PrintDefaults()
	}
	verbose := fs.Bool("v", false, "Be verbose")
	if err := fs.Parse(args); err != nil {
		return err
	}
	if *verbose {
		log.Std = log.NewStd(os.Stdout)
	}
	if fs.NArg() == 0 {
		fs.Usage()
		return flag.ErrHelp
	}
	for _, secpkgFilename := range fs.Args() {
		fmt.Printf("refreshing %s...\n", secpkgFilename)
		if err := refresh(secpkgFilename); err != nil {
			return err
		}
	}
	return nil
}

- f 5de42673adb7ff23112c77e84d6d6a1077c264db37c00f37e7151e34749b8426 ssot/command/signhead.go
+ f 79ab026a55d697c3f71f2e287258a7996a65cf0bad650cc1d29d378c732fe5e0 ssot/command/signhead.go
dmppatch 66
@@ -19,16 +19,33 @@
 mport (%0A
+%09%22encoding/json%22%0A
 %09%22flag%22%0A
@@ -87,16 +87,27 @@
 lepath%22%0A
+%09%22strings%22%0A
 %0A%09%22githu
@@ -239,56 +239,8 @@
 ef%22%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
 %09%22gi
@@ -317,16 +317,60 @@
 n/ssot%22%0A
+%09%22github.com/frankbraun/codechain/util/dyn%22%0A
 %09%22github
@@ -406,16 +406,60 @@
 l/file%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 %09%22github
@@ -642,16 +642,538 @@
 key%22%0A)%0A%0A
+func writeTXTRecord(%0A%09s *dyn.Session,%0A%09zone string,%0A%09DNS string,%0A%09sh *ssot.SignedHead,%0A) error %7B%0A%09// Update TXT record to publish the signed head.%0A%09log.Println(%22update TXT record to publish the signed head%22)%0A%09err := s.TXTUpdate(zone, def.CodechainHeadName+DNS, sh.Marshal(), ssot.TTL)%0A%09if err != nil %7B%0A%09%09return err%0A%09%7D%0A%09ret, err := s.ZoneChangeset(zone)%0A%09if err != nil %7B%0A%09%09return err%0A%09%7D%0A%09jsn, err := json.MarshalIndent(ret, %22%22, %22  %22)%0A%09if err != nil %7B%0A%09%09return err%0A%09%7D%0A%09log.Println(string(jsn))%0A%09return s.ZoneUpdate(zone)%0A%7D%0A%0A
 func sig
@@ -1515,52 +1515,52 @@
 ts.%0A
-%09log.Println(%221. make sure project exists%22)%0A
+%09log.Println(%222. make sure project exists%22)%0A
 %09pkg
@@ -2447,87 +2447,631 @@
 d)%0A%0A
-%09// 5. Create a new signed head with current HEAD, the counter of the previous%0A
+%09// 5. If ~/.config/ssotpub/pkgs/NAME/dyn.json exits, check the contained Dyn%0A%09//    credentials and switch on automatic publishing of TXT records.%0A%09dynFile := filepath.Join(pkgDir, dyn.ConfigFilename)%0A%09exists, err = file.Exists(dynFile)%0A%09if err != nil %7B%0A%09%09return err%0A%09%7D%0A%09var dynSession *dyn.Session%0A%09if exists %7B%0A%09%09log.Printf(%22%25s exists%22, dynFile)%0A%09%09dynConfig, err := dyn.ReadConfig(dynFile)%0A%09%09if err != nil %7B%0A%09%09%09return err%0A%09%09%7D%0A%09%09dynSession, err = dyn.NewWithConfig(dynConfig)%0A%09%09if err != nil %7B%0A%09%09%09return err%0A%09%09%7D%0A%09%09defer dynSession.Close()%0A%09%7D%0A%0A%09// 6. Create a new signed head with current HEAD, the counter of the previous%0A
 %09// 
@@ -3334,16 +3334,60 @@
 tomic).%0A
+%09log.Println(%226. create a new signed head%22)%0A
 %09newSign
@@ -3532,49 +3532,70 @@
 %09%7D%0A%0A
-%09// 6. Save the current distribution to:%0A
+%09// 7. If the HEAD changed, save the current distribution to:%0A
 %09// 
@@ -3672,273 +3672,445 @@
 %60).%0A
-%09distDir := filepath.Join(pkgDir, %22dists%22)%0A%09distFile := filepath.Join(distDir, fmt.Sprintf(%22%25x.tar.gz%22, head))%0A%09if err := archive.CreateDist(c, distFile); err != nil %7B%0A%09%09return err%0A
+%09log.Println(%227. if the HEAD changed, save the current distribution%22)%0A%09h := hex.Encode(head%5B:%5D)%0A%09var distFile string%0A%09if h != pkg.Head %7B%0A%09%09distDir := filepath.Join(pkgDir, %22dists%22)%0A%09%09distFile = filepath.Join(distDir, fmt.Sprintf(%22%25x.tar.gz%22, head))%0A%09%09if err := archive.CreateDist(c, distFile); err != nil %7B%0A%09%09%09return err%0A%09%09%7D%0A
 %09%7D%0A%0A
-%09// 7. Lookup the download URL and print where to upload the distribution file:%0A
+%09// 8. If the HEAD changed, lookup the download URL and print where to upload%0A%09//    the distribution file:%0A
 %09// 
@@ -4162,347 +4162,917 @@
 .gz%0A
-%09URL, err := ssot.LookupURL(pkg.DNS)%0A%09if err != nil %7B%0A%09%09return err%0A
+%09log.Println(%228. if the HEAD changed, lookup the download URL%22)%0A%09if h != pkg.Head %7B%0A%09%09URL, err := ssot.LookupURL(pkg.DNS)%0A%09%09if err != nil %7B%0A%09%09%09return err%0A%09%09%7D%0A%09%09fmt.Println(%22%22)%0A%09%09fmt.Printf(%22Please upload the following distribution file to: %25s%5Cn%22, URL)%0A%09%09fmt.Println(distFile)%0A%09%09fmt.Println(%22%22)%0A
 %09%7D%0A
-%09fmt.Println(%22%22)%0A%09fmt.Printf(%22Please upload the following distribution file to: %25s%5Cn%22, URL)%0A%09fmt.Println(distFile)%0A%09fmt.Println(%22%22)%0A
 %0A
-%09// 8. Print DNS TXT record as defined by the .secpkg and the signed head.%0A%09fmt.Println(%22Please publish the following DNS TXT record:%22)%0A
+%09// 9. Print DNS TXT record as defined by the .secpkg and the signed head.%0A%09// If TXT records are to be published automatically, publish the TXT record.%0A%09log.Println(%229. print DNS TXT record%22)%0A%09if dynSession != nil %7B%0A%09%09// Write TXT record%0A%09%09log.Printf(%22DNS=%25s%22, pkg.DNS)%0A%09%09parts := strings.Split(pkg.DNS, %22.%22)%0A%09%09zone := parts%5Blen(parts)-2%5D + %22.%22 + parts%5Blen(parts)-1%5D%0A%09%09err := writeTXTRecord(dynSession, zone, pkg.DNS, newSignedHead)%0A%09%09if err != nil %7B%0A%09%09%09return nil%0A%09%09%7D%0A%09%09fmt.Println(%22The following DNS TXT record has been published:%22)%0A%09%7D else %7B%0A%09%09fmt.Println(%22Please publish the following DNS TXT record:%22)%0A%09%7D%0A
 %09fmt
@@ -5126,99 +5126,139 @@
 S)%0A%0A
-%09// 9. If the HEAD changed, update the .secpkg file accordingly.%0A%09h := hex.Encode(head%5B:%5D)%0A
+%09// 10. If the HEAD changed, update the .secpkg file accordingly.%0A%09log.Println(%2210. if the HEAD changed, update the .secpkg file%22)%0A
 %09if 
- f 6c75a7a679bec6be21a84b4a38def16931cc03817a30724545ca1499cf300011 ssot/doc.go
+ f c08225fda929bc78293289d908ab23920e75b3f6a67c05852081640a6afa2f52 ssot/doc.go
dmppatch 72
@@ -1259,70 +1259,145 @@
 t.%0A%0A
-  2. Create a new .secpkg file which specifies the following:%0A
+  2. If TXT records are to be published automatically, check credentials.%0A%0A  3. Create a new .secpkg file which specifies the following:%0A
 %0A   
@@ -1709,83 +1709,83 @@
 y.%0A%0A
-  3. Create the first signed head (see SignHead) for the current project's%0A
+  4. Create the first signed head (see SignHead) for the current project's%0A
     
@@ -1844,68 +1844,68 @@
 0.%0A%0A
-  4. Create the directory ~/.config/ssotpub/pkgs/NAME/dists%0A
+  5. Create the directory ~/.config/ssotpub/pkgs/NAME/dists%0A
     
@@ -2025,262 +2025,362 @@
 ).%0A%0A
-  5. Save the signed head to ~/.config/ssotpub/pkgs/NAME/signed_head%0A
+  6. Save the signed head to ~/.config/ssotpub/pkgs/NAME/signed_head%0A
 %0A
-  6. Print the distribution name: ~/.config/secpkg/pkgs/NAME/dists/HEAD.tar.gz%0A
+  7. Print the distribution name: ~/.config/secpkg/pkgs/NAME/dists/HEAD.tar.gz%0A
 %0A
-  7. Print DNS TXT records as defined by the .secpkg, the first signed head,%0A     and the download URL.%0A
+  8. Print DNS TXT records as defined by the .secpkg, the first signed head,%0A     and the download URL. If TXT records are to be published automatically,%0A     save credentials and publish the TXT record.%0A
 %0A  A
@@ -2531,42 +2531,75 @@
 ned%0A
-  zone. DNSSEC should be enabled.%0A
+  zone (if not published automatically). DNSSEC should be enabled.%0A
 %0ASig
@@ -2693,1135 +2693,1432 @@
 g:%0A%0A
-  1. Parse the .secpkg file in the current working directory.%0A
+   1. Parse the .secpkg file in the current working directory.%0A
 %0A
-  2. Make sure the project with NAME has been published before.%0A     That is, the directory ~/.config/ssotpub/pkgs/NAME exists.%0A
+   2. Make sure the project with NAME has been published before.%0A      That is, the directory ~/.config/ssotpub/pkgs/NAME exists.%0A
 %0A
-  3. Validate the signed head in ~/.config/ssotpub/pkgs/NAME/signed_head%0A     and make sure the corresponding secret key is available.%0A
+   3. Validate the signed head in ~/.config/ssotpub/pkgs/NAME/signed_head%0A      and make sure the corresponding secret key is available.%0A
 %0A
-  4. Get the HEAD from .codechain/hashchain in the current working directory.%0A
+   4. Get the HEAD from .codechain/hashchain in the current working directory.%0A
 %0A
-  5. Create a new signed head with current HEAD, the counter of the previous%0A     signed head plus 1, and update the saved signed head:%0A
+   5. If ~/.config/ssotpub/pkgs/NAME/dyn.json exits, check the contained Dyn%0A      credentials and switch on automatic publishing of TXT records.%0A
 %0A
-     - %60cp -f ~/.config/ssotpub/pkgs/NAME/signed_head%0A              ~/.config/ssotpub/pkgs/NAME/previous_signed_head%60%0A     - Save new signed head to ~/.config/ssotpub/pkgs/NAME/signed_head (atomic).%0A
+   6. Create a new signed head with current HEAD, the counter of the previous%0A      signed head plus 1, and update the saved signed head:%0A
 %0A
-  6. Save the current distribution to:%0A     ~/.config/secpkg/pkgs/NAME/dists/HEAD.tar.gz (%60codechain createdist%60).%0A
+      - %60cp -f ~/.config/ssotpub/pkgs/NAME/signed_head%0A               ~/.config/ssotpub/pkgs/NAME/previous_signed_head%60%0A      - Save new signed head to ~/.config/ssotpub/pkgs/NAME/signed_head (atomic).%0A
 %0A
-  7. Lookup the download URL and print where to upload the distribution file:%0A     ~/.config/ssotpkg/pkgs/NAME/dists/HEAD.tar.gz%0A
+   7. If the HEAD changed, save the current distribution to:%0A      ~/.config/secpkg/pkgs/NAME/dists/HEAD.tar.gz (%60codechain createdist%60).%0A
 %0A
-  8. Print DNS TXT record as defined by the .secpkg and the signed head.%0A
+   8. If the HEAD changed, lookup the download URL and print where to upload%0A      the distribution file:%0A      ~/.config/ssotpkg/pkgs/NAME/dists/HEAD.tar.gz%0A
 %0A
-  9. If the HEAD changed, update the .secpkg file accordingly.%0A
+   9. Print DNS TXT record as defined by the .secpkg file and the signed head.%0A      If TXT records are to be published automatically, publish the TXT record.%0A%0A  10. If the HEAD changed, update the .secpkg file accordingly.%0A
 %0A  A
@@ -4269,42 +4269,1403 @@
 ned%0A
-  zone. DNSSEC should be enabled.%0A
+  zone (if not published automatically). DNSSEC should be enabled.%0A%0ARefresh specification%0A%0ATo refresh the published head of a secure package with SSOT do the following:%0A%0A   1. Parse the supplied .secpkg file.%0A%0A   2. Make sure the project with NAME has been published before.%0A      That is, the directory ~/.config/ssotpub/pkgs/NAME exists.%0A%0A   3. Validate the signed head in ~/.config/ssotpub/pkgs/NAME/signed_head%0A      and make sure the corresponding secret key is available.%0A%0A   4. Make sure the signed head in ~/.config/ssotpub/pkgs/NAME/signed_head%0A      matches the HEAD in the .secpkg file.%0A%0A   5. If ~/.config/ssotpub/pkgs/NAME/dyn.json exits, check the contained Dyn%0A      credentials and switch on automatic publishing of TXT records.%0A%0A   6. Create a new signed head with the same HEAD, the counter of the previous%0A      signed head plus 1, and update the saved signed head:%0A%0A      - %60cp -f ~/.config/ssotpub/pkgs/NAME/signed_head%0A               ~/.config/ssotpub/pkgs/NAME/previous_signed_head%60%0A      - Save new signed head to ~/.config/ssotpub/pkgs/NAME/signed_head (atomic).%0A%0A   7. Print DNS TXT record as defined by the .secpkg file and the signed head.%0A      If TXT records are to be published automatically, publish the TXT record.%0A%0A  Afterwards the administrator publishes the new DNS TXT record in the defined%0A  zone (if not published automatically). DNSSEC should be enabled.%0A
 %0ATOD
@@ -5725,86 +5725,8 @@
 on.%0A
-  - Automatic publishing of TXT records. With https://github.com/xenolf/lego?%0A
 */%0Ap
- f 224822d87db358a319e20f79f81f67a4bae1d713c26f45d596a90a326de14752 ssot/ssot.go
+ f 646f91222a721bf10f5bc0024d6b0bfcf7e42fd075fda8909d677fff55b8b220 ssot/ssot.go
dmppatch 14
@@ -193,56 +193,52 @@
 ef%22%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 %09%22go
@@ -3180,36 +3180,95 @@
 %25s%5Cn%22, txt)%0A
-%09%09%09continue%0A
+%09%09%09sh = nil // reset head (invalid)%0A%09%09%09continue // try next TXT record%0A
 %09%09%7D%0A%09%09fmt.Pr
@@ -3385,16 +3385,87 @@
 %22, err)%0A
+%09%09%09sh = nil // reset head (invalid)%0A%09%09%09continue // try next TXT record%0A
 %09%09%7D%0A%09%09br
- f 02651cda0616c31631e329a4cdc4acff5825dee210a6e241653ed228cf14effb ssot/ssot_test.go
+ f d6abd4065e8124f26684e7ca81f7a21a4568432708034f83926102dfb70436d0 ssot/ssot_test.go
dmppatch 5
@@ -47,56 +47,52 @@
 g%22%0A%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 %09%22go
- f 7fe6b14ffa35df83720acdef6cccf656ccec2bc35619554548fdeeceec222cb5 sync/sync.go
+ f 7e7a87eaadd06ad7f40c2bffa26afbceba711aa7cb14d633f670074f49759164 sync/sync.go
dmppatch 8
@@ -167,56 +167,8 @@
 ef%22%0A
-%09%22github.com/frankbraun/codechain/internal/hex%22%0A
 %09%22gi
@@ -288,16 +288,60 @@
 n/util%22%0A
+%09%22github.com/frankbraun/codechain/util/hex%22%0A
 %09%22github
+ f b0a83336b3afafc0f0ea3ed7d567440a9d45144a245372ed49eb555a25d697d0 util/dyn/config.go
utf8file 50
package dyn

import (
	"encoding/json"
	"fmt"
	"io/ioutil"

	"github.com/frankbraun/codechain/util/file"
)

// ConfigFilename defines the default filename for Dyn Managed DNS API Config
// files.
const ConfigFilename = "dyn.json"

// A Config for the Dyn Managed DNS API.
type Config struct {
	CustomerName string // customer_name
	UserName     string // user_name
	Password     string // password
}

// ReadConfig from filename.
func ReadConfig(filename string) (*Config, error) {
	var c Config
	data, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}
	if err := json.Unmarshal(data, &c); err != nil {
		return nil, err
	}
	return &c, nil
}

// Write config to filename.
func (c *Config) Write(filename string) error {
	exists, err := file.Exists(filename)
	if err != nil {
		return err
	}
	if exists {
		return fmt.Errorf("configuration file '%s' exists already", filename)
	}
	jsn, err := json.MarshalIndent(c, "", "  ")
	if err != nil {
		return err
	}
	return ioutil.WriteFile(filename, jsn, 0644)
}

+ f 7da3a5c7430a8897353cc656a203d9bae37dc7c3dd028471ef5a9daebdcce967 util/dyn/config_test.go
utf8file 37
package dyn

import (
	"io/ioutil"
	"os"
	"path/filepath"
	"reflect"
	"testing"
)

func TestConfig(t *testing.T) {
	tmpdir, err := ioutil.TempDir("", "config_test")
	if err != nil {
		t.Fatalf("TempDir() failed: %v", err)
	}
	defer os.RemoveAll(tmpdir)

	c := &Config{"foo", "bar", "baz"}

	// Write()
	filename := filepath.Join(tmpdir, ConfigFilename)
	if err := c.Write(filename); err != nil {
		t.Fatalf("c.Write() failed: %v", err)
	}

	// ReadConfig()
	rc, err := ReadConfig(filename)
	if err != nil {
		t.Fatalf("ReadConfig(%s) failed: %v", filename, err)
	}

	// compare
	if !reflect.DeepEqual(c, rc) {
		t.Error("Read config doesn't equal written config")
	}
}

+ f f4c329cb6c21e0d9bf7dec91f41f5e46f67011394eead11dad0c4e0654ac2659 util/dyn/dyn.go
utf8file 295
// Package dyn consumes the Dyn Managed DNS API (https://help.dyn.com/dns-api-knowledge-base/).
package dyn

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"

	"github.com/frankbraun/codechain/util/log"
)

// URI for the Dyn Managed DNS API.
const URI = "https://api.dynect.net"

const session = "/REST/Session/"

// Session for the Dyn Managed DNS API.
type Session struct {
	authHeader http.Header
}

func parseReturnedData(data []byte) (map[string]interface{}, error) {
	var ret map[string]interface{}
	if err := json.Unmarshal(data, &ret); err != nil {
		return nil, err
	}
	if ret["status"] != "success" {
		return nil, fmt.Errorf("dyn: API call failed: %s", data)
	}
	return ret, nil
}

// New opens a new Dyn Managed DNS session.
func New(customerName, userName, password string) (*Session, error) {
	var s Session
	log.Printf("Start new session with customer_name=%s, user_name=%s, and password=%s",
		customerName, userName, password)

	jsn := map[string]interface{}{
		"customer_name": customerName,
		"user_name":     userName,
		"password":      password,
	}
	enc, err := json.Marshal(jsn)
	if err != nil {
		return nil, err
	}

	resp, err := http.Post(URI+session, "application/json", bytes.NewBuffer(enc))
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	log.Println(string(data))

	// parse returned data
	ret, err := parseReturnedData(data)
	if err != nil {
		return nil, err
	}

	// save token
	token := ret["data"].(map[string]interface{})["token"].(string)
	log.Printf("Session started (token=%s)", token)
	s.authHeader = make(http.Header)
	s.authHeader.Set("Content-Type", "application/json")
	s.authHeader.Add("Auth-Token", token)

	return &s, nil
}

// NewWithConfig opens a new Dyn Managed DNS session with parameters from config.
func NewWithConfig(c *Config) (*Session, error) {
	return New(c.CustomerName, c.UserName, c.Password)
}

// Close a new Dyn Managed DNS session.
func (s *Session) Close() {
	log.Println("Closing session")
	var c http.Client
	req, err := http.NewRequest(http.MethodDelete, URI+session, nil)
	if err != nil {
		log.Printf("Error: %v", err)
		return
	}
	req.Header = s.authHeader
	resp, err := c.Do(req)
	if err != nil {
		log.Printf("Error: %v", err)
		return
	}
	defer resp.Body.Close()
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Printf("Error: %v", err)
		return
	}
	log.Println(string(data))

	// parse returned data
	_, err = parseReturnedData(data)
	if err != nil {
		log.Printf("Error: %v", err)
		return
	}
}

// TXTCreate creates a TXT record.
func (s *Session) TXTCreate(zone, fqdn, txtdata string, ttl int) error {
	log.Printf("Create new TXT record with zone=%s, fqdn=%s, txtdata=%s, and ttl=%d",
		zone, fqdn, txtdata, ttl)

	jsn := map[string]interface{}{
		"rdata": map[string]string{
			"txtdata": txtdata,
		},
		"ttl": strconv.Itoa(ttl),
	}
	enc, err := json.Marshal(jsn)
	if err != nil {
		return err
	}

	var c http.Client
	req, err := http.NewRequest(http.MethodPost,
		URI+"/REST/TXTRecord/"+zone+"/"+fqdn+"/", bytes.NewBuffer(enc))
	if err != nil {
		return err
	}
	req.Header = s.authHeader
	resp, err := c.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return err
	}
	log.Println(string(data))

	// parse returned data
	_, err = parseReturnedData(data)
	if err != nil {
		return err
	}
	return nil
}

// TXTUpdate updates a TXT record (replaces all existing TXT records).
func (s *Session) TXTUpdate(zone, fqdn, txtdata string, ttl int) error {
	log.Printf("Update TXT record with zone=%s, fqdn=%s, txtdata=%s, and ttl=%d",
		zone, fqdn, txtdata, ttl)

	jsn := map[string]interface{}{
		"rdata": map[string]string{
			"txtdata": txtdata,
		},
		"ttl": strconv.Itoa(ttl),
	}
	enc, err := json.Marshal(jsn)
	if err != nil {
		return err
	}

	var c http.Client
	req, err := http.NewRequest(http.MethodPut,
		URI+"/REST/TXTRecord/"+zone+"/"+fqdn+"/", bytes.NewBuffer(enc))
	if err != nil {
		return err
	}
	req.Header = s.authHeader
	resp, err := c.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return err
	}
	log.Println(string(data))

	// parse returned data
	_, err = parseReturnedData(data)
	if err != nil {
		return err
	}
	return nil
}

// TXTDelete deletes all TXT records.
func (s *Session) TXTDelete(zone, fqdn string) error {
	log.Printf("Delete TXT records with zone=%s and fqdn=%s", zone, fqdn)

	var c http.Client
	req, err := http.NewRequest(http.MethodDelete,
		URI+"/REST/TXTRecord/"+zone+"/"+fqdn+"/", nil)
	if err != nil {
		return err
	}
	req.Header = s.authHeader
	resp, err := c.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return err
	}
	log.Println(string(data))

	// parse returned data
	_, err = parseReturnedData(data)
	if err != nil {
		return err
	}
	return nil
}

// ZoneChangeset returns the pending changset for zone.
func (s *Session) ZoneChangeset(zone string) (map[string]interface{}, error) {
	log.Printf("Get Zone Changeset for zone=%s", zone)

	var c http.Client
	req, err := http.NewRequest(http.MethodGet, URI+"/REST/ZoneChanges/"+zone, nil)
	if err != nil {
		return nil, err
	}
	req.Header = s.authHeader
	resp, err := c.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	log.Println(string(data))

	// parse returned data
	ret, err := parseReturnedData(data)
	if err != nil {
		return nil, err
	}
	return ret, nil
}

// ZoneUpdate publishes the pending update for zone.
func (s *Session) ZoneUpdate(zone string) error {
	log.Printf("Publish pending changes for zone=%s", zone)

	jsn := map[string]bool{
		"publish": true,
	}
	enc, err := json.Marshal(jsn)
	if err != nil {
		return err
	}

	var c http.Client
	req, err := http.NewRequest(http.MethodPut, URI+"/REST/Zone/"+zone+"/",
		bytes.NewBuffer(enc))
	if err != nil {
		return err
	}
	req.Header = s.authHeader
	resp, err := c.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return err
	}
	log.Println(string(data))

	// parse returned data
	_, err = parseReturnedData(data)
	if err != nil {
		return err
	}
	return nil
}

+ f 63c5782111160b024f11097ae875659b3a79a8da8941a6c0b17367e52b0e44e2 util/hex/hex.go
utf8file 32
// Package hex implements hex encoding related utility functions.
package hex

import (
	"encoding/hex"
	"fmt"
)

// Encode returns the hexadecimal encoding of src.
func Encode(src []byte) string {
	return hex.EncodeToString(src)
}

// Decode returns the bytes represented by the hexadecimal string s. Decode
// expects that src contain only lowercase hexadecimal characters and that the
// resulting byte slice has length l.
func Decode(s string, l int) ([]byte, error) {
	for _, c := range []byte(s) {
		if 'A' <= c && c <= 'F' {
			return nil, fmt.Errorf("hex: only lowercase hexadecimal characters are allowed")
		}
	}
	r, err := hex.DecodeString(s)
	if err != nil {
		return nil, err
	}
	if len(r) != l {
		return nil, fmt.Errorf("hex: wrong length %d (expecting %d): %s", 2*len(r), 2*l, s)
	}
	return r, nil
}

- f 85b588f12c2e75ea71f745fc38ed2ed76f5b8eece67c8b8b8c09f0d742807051 vendor/golang.org/x/crypto/blake2b/blake2b.go
+ f de9b7859ddcbd6fa1b93bf186a6f19c8757c01cede2a1f7df2dcbf6990f763ac vendor/golang.org/x/crypto/blake2b/blake2b.go
dmppatch 20
@@ -2085,87 +2085,90 @@
 nil%0A
-// key turns the hash into a MAC. The key must between zero and 64 bytes long.%0A
+// key turns the hash into a MAC. The key must be between zero and 64 bytes long.%0A
 func
@@ -2323,87 +2323,90 @@
 nil%0A
-// key turns the hash into a MAC. The key must between zero and 64 bytes long.%0A
+// key turns the hash into a MAC. The key must be between zero and 64 bytes long.%0A
 func
@@ -2564,87 +2564,90 @@
 nil%0A
-// key turns the hash into a MAC. The key must between zero and 64 bytes long.%0A
+// key turns the hash into a MAC. The key must be between zero and 64 bytes long.%0A
 func
@@ -2809,97 +2809,100 @@
 th.%0A
-// A non-nil key turns the hash into a MAC. The key must between zero and 64 bytes long.%0A
+// A non-nil key turns the hash into a MAC. The key must be between zero and 64 bytes long.%0A
 // T
+ f 99514d2010d341f1db9a8e755bba5dfbd8f248152f5c0d9d9aba66d59f02ade1 vendor/golang.org/x/sys/unix/asm_netbsd_arm64.s
utf8file 30
// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build !gccgo

#include "textflag.h"

//
// System call support for ARM64, NetBSD
//

// Just jump to package syscall's implementation for all these functions.
// The runtime may know about them.

TEXT	·Syscall(SB),NOSPLIT,$0-56
	B	syscall·Syscall(SB)

TEXT	·Syscall6(SB),NOSPLIT,$0-80
	B	syscall·Syscall6(SB)

TEXT	·Syscall9(SB),NOSPLIT,$0-104
	B	syscall·Syscall9(SB)

TEXT	·RawSyscall(SB),NOSPLIT,$0-56
	B	syscall·RawSyscall(SB)

TEXT	·RawSyscall6(SB),NOSPLIT,$0-80
	B	syscall·RawSyscall6(SB)

- f 0c63930eda84882f5baf1f41a3271ae1ea3f6310bdb73beca63f9e8645de9a43 vendor/golang.org/x/sys/unix/mkall.sh
+ f 0e1876569b5411a109ad2f6c16174099193ba485d31cce16ad624de4b561b2f0 vendor/golang.org/x/sys/unix/mkall.sh
dmppatch 5
@@ -1578,51 +1578,56 @@
 64%22%0A
-%09mksyscall=%22./mksyscall_aix_ppc64.pl -aix%22%0A
+%09mksyscall=%22go run mksyscall_aix_ppc64.go -aix%22%0A
 %09mkt
- f 2ddb5f786b220562aa261983597ea5e6aac6ad0dfd9e40b2b2118278c15dbfeb vendor/golang.org/x/sys/unix/mkerrors.sh
+ f 172d9eff94941280e4d581737962f107fdf89da4434b8e19ac593de68020ea48 vendor/golang.org/x/sys/unix/mkerrors.sh
dmppatch 13
@@ -4110,24 +4110,50 @@
 sys/time.h%3E%0A
+#include %3Csys/signalfd.h%3E%0A
 #include %3Csy
@@ -4179,32 +4179,60 @@
 e %3Csys/xattr.h%3E%0A
+#include %3Clinux/errqueue.h%3E%0A
 #include %3Clinux/
@@ -10934,50 +10934,53 @@
  %7C%7C%0A
-%09%09$2 ~ /%5E(O%7CF%7CE?FD%7CNAME%7CS%7CPTRACE%7CPT)_/ %7C%7C%0A
+%09%09$2 ~ /%5E(O%7CF%7C%5BES%5D?FD%7CNAME%7CS%7CPTRACE%7CPT)_/ %7C%7C%0A
 %09%09$2
+ f 4bd604a191dd13f0ce2fbea40f959e9390cd6678fda3a0684b9137fa921242b9 vendor/golang.org/x/sys/unix/mksyscall_aix_ppc64.go
utf8file 603
// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ignore

/*
This program reads a file containing function prototypes
(like syscall_aix.go) and generates system call bodies.
The prototypes are marked by lines beginning with "//sys"
and read like func declarations if //sys is replaced by func, but:
	* The parameter lists must give a name for each argument.
	  This includes return parameters.
	* The parameter lists must give a type for each argument:
	  the (x, y, z int) shorthand is not allowed.
	* If the return parameter is an error number, it must be named err.
	* If go func name needs to be different than its libc name,
	* or the function is not in libc, name could be specified
	* at the end, after "=" sign, like
	  //sys getsockopt(s int, level int, name int, val uintptr, vallen *_Socklen) (err error) = libsocket.getsockopt


This program will generate three files and handle both gc and gccgo implementation:
  - zsyscall_aix_ppc64.go: the common part of each implementation (error handler, pointer creation)
  - zsyscall_aix_ppc64_gc.go: gc part with //go_cgo_import_dynamic and a call to syscall6
  - zsyscall_aix_ppc64_gccgo.go: gccgo part with C function and conversion to C type.

 The generated code looks like this

zsyscall_aix_ppc64.go
func asyscall(...) (n int, err error) {
	 // Pointer Creation
	 r1, e1 := callasyscall(...)
	 // Type Conversion
	 // Error Handler
	 return
}

zsyscall_aix_ppc64_gc.go
//go:cgo_import_dynamic libc_asyscall asyscall "libc.a/shr_64.o"
//go:linkname libc_asyscall libc_asyscall
var asyscall syscallFunc

func callasyscall(...) (r1 uintptr, e1 Errno) {
	 r1, _, e1 = syscall6(uintptr(unsafe.Pointer(&libc_asyscall)), "nb_args", ... )
	 return
}

zsyscall_aix_ppc64_ggcgo.go

// int asyscall(...)

import "C"

func callasyscall(...) (r1 uintptr, e1 Errno) {
	 r1 = uintptr(C.asyscall(...))
	 e1 = syscall.GetErrno()
	 return
}
*/

package main

import (
	"bufio"
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"regexp"
	"strings"
)

var (
	b32  = flag.Bool("b32", false, "32bit big-endian")
	l32  = flag.Bool("l32", false, "32bit little-endian")
	aix  = flag.Bool("aix", false, "aix")
	tags = flag.String("tags", "", "build tags")
)

// cmdLine returns this programs's commandline arguments
func cmdLine() string {
	return "go run mksyscall_aix_ppc64.go " + strings.Join(os.Args[1:], " ")
}

// buildTags returns build tags
func buildTags() string {
	return *tags
}

// Param is function parameter
type Param struct {
	Name string
	Type string
}

// usage prints the program usage
func usage() {
	fmt.Fprintf(os.Stderr, "usage: go run mksyscall_aix_ppc64.go [-b32 | -l32] [-tags x,y] [file ...]\n")
	os.Exit(1)
}

// parseParamList parses parameter list and returns a slice of parameters
func parseParamList(list string) []string {
	list = strings.TrimSpace(list)
	if list == "" {
		return []string{}
	}
	return regexp.MustCompile(`\s*,\s*`).Split(list, -1)
}

// parseParam splits a parameter into name and type
func parseParam(p string) Param {
	ps := regexp.MustCompile(`^(\S*) (\S*)$`).FindStringSubmatch(p)
	if ps == nil {
		fmt.Fprintf(os.Stderr, "malformed parameter: %s\n", p)
		os.Exit(1)
	}
	return Param{ps[1], ps[2]}
}

func main() {
	flag.Usage = usage
	flag.Parse()
	if len(flag.Args()) <= 0 {
		fmt.Fprintf(os.Stderr, "no files to parse provided\n")
		usage()
	}

	endianness := ""
	if *b32 {
		endianness = "big-endian"
	} else if *l32 {
		endianness = "little-endian"
	}

	pack := ""
	// GCCGO
	textgccgo := ""
	cExtern := "/*\n#include <stdint.h>\n"
	// GC
	textgc := ""
	dynimports := ""
	linknames := ""
	var vars []string
	// COMMON
	textcommon := ""
	for _, path := range flag.Args() {
		file, err := os.Open(path)
		if err != nil {
			fmt.Fprintf(os.Stderr, err.Error())
			os.Exit(1)
		}
		s := bufio.NewScanner(file)
		for s.Scan() {
			t := s.Text()
			t = strings.TrimSpace(t)
			t = regexp.MustCompile(`\s+`).ReplaceAllString(t, ` `)
			if p := regexp.MustCompile(`^package (\S+)$`).FindStringSubmatch(t); p != nil && pack == "" {
				pack = p[1]
			}
			nonblock := regexp.MustCompile(`^\/\/sysnb `).FindStringSubmatch(t)
			if regexp.MustCompile(`^\/\/sys `).FindStringSubmatch(t) == nil && nonblock == nil {
				continue
			}

			// Line must be of the form
			//	func Open(path string, mode int, perm int) (fd int, err error)
			// Split into name, in params, out params.
			f := regexp.MustCompile(`^\/\/sys(nb)? (\w+)\(([^()]*)\)\s*(?:\(([^()]+)\))?\s*(?:=\s*(?:(\w*)\.)?(\w*))?$`).FindStringSubmatch(t)
			if f == nil {
				fmt.Fprintf(os.Stderr, "%s:%s\nmalformed //sys declaration\n", path, t)
				os.Exit(1)
			}
			funct, inps, outps, modname, sysname := f[2], f[3], f[4], f[5], f[6]

			// Split argument lists on comma.
			in := parseParamList(inps)
			out := parseParamList(outps)

			inps = strings.Join(in, ", ")
			outps = strings.Join(out, ", ")

			if sysname == "" {
				sysname = funct
			}

			onlyCommon := false
			if funct == "readlen" || funct == "writelen" || funct == "FcntlInt" || funct == "FcntlFlock" {
				// This function call another syscall which is already implemented.
				// Therefore, the gc and gccgo part must not be generated.
				onlyCommon = true
			}

			// Try in vain to keep people from editing this file.
			// The theory is that they jump into the middle of the file
			// without reading the header.

			textcommon += "// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n\n"
			if !onlyCommon {
				textgccgo += "// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n\n"
				textgc += "// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n\n"
			}

			// Check if value return, err return available
			errvar := ""
			rettype := ""
			for _, param := range out {
				p := parseParam(param)
				if p.Type == "error" {
					errvar = p.Name
				} else {
					rettype = p.Type
				}
			}

			sysname = regexp.MustCompile(`([a-z])([A-Z])`).ReplaceAllString(sysname, `${1}_$2`)
			sysname = strings.ToLower(sysname) // All libc functions are lowercase.

			// GCCGO Prototype return type
			cRettype := ""
			if rettype == "unsafe.Pointer" {
				cRettype = "uintptr_t"
			} else if rettype == "uintptr" {
				cRettype = "uintptr_t"
			} else if regexp.MustCompile(`^_`).FindStringSubmatch(rettype) != nil {
				cRettype = "uintptr_t"
			} else if rettype == "int" {
				cRettype = "int"
			} else if rettype == "int32" {
				cRettype = "int"
			} else if rettype == "int64" {
				cRettype = "long long"
			} else if rettype == "uint32" {
				cRettype = "unsigned int"
			} else if rettype == "uint64" {
				cRettype = "unsigned long long"
			} else {
				cRettype = "int"
			}
			if sysname == "exit" {
				cRettype = "void"
			}

			// GCCGO Prototype arguments type
			var cIn []string
			for i, param := range in {
				p := parseParam(param)
				if regexp.MustCompile(`^\*`).FindStringSubmatch(p.Type) != nil {
					cIn = append(cIn, "uintptr_t")
				} else if p.Type == "string" {
					cIn = append(cIn, "uintptr_t")
				} else if regexp.MustCompile(`^\[\](.*)`).FindStringSubmatch(p.Type) != nil {
					cIn = append(cIn, "uintptr_t", "size_t")
				} else if p.Type == "unsafe.Pointer" {
					cIn = append(cIn, "uintptr_t")
				} else if p.Type == "uintptr" {
					cIn = append(cIn, "uintptr_t")
				} else if regexp.MustCompile(`^_`).FindStringSubmatch(p.Type) != nil {
					cIn = append(cIn, "uintptr_t")
				} else if p.Type == "int" {
					if (i == 0 || i == 2) && funct == "fcntl" {
						// These fcntl arguments needs to be uintptr to be able to call FcntlInt and FcntlFlock
						cIn = append(cIn, "uintptr_t")
					} else {
						cIn = append(cIn, "int")
					}

				} else if p.Type == "int32" {
					cIn = append(cIn, "int")
				} else if p.Type == "int64" {
					cIn = append(cIn, "long long")
				} else if p.Type == "uint32" {
					cIn = append(cIn, "unsigned int")
				} else if p.Type == "uint64" {
					cIn = append(cIn, "unsigned long long")
				} else {
					cIn = append(cIn, "int")
				}
			}

			if !onlyCommon {
				// GCCGO Prototype Generation
				// Imports of system calls from libc
				cExtern += fmt.Sprintf("%s %s", cRettype, sysname)
				cIn := strings.Join(cIn, ", ")
				cExtern += fmt.Sprintf("(%s);\n", cIn)
			}
			// GC Library name
			if modname == "" {
				modname = "libc.a/shr_64.o"
			} else {
				fmt.Fprintf(os.Stderr, "%s: only syscall using libc are available\n", funct)
				os.Exit(1)
			}
			sysvarname := fmt.Sprintf("libc_%s", sysname)

			if !onlyCommon {
				// GC Runtime import of function to allow cross-platform builds.
				dynimports += fmt.Sprintf("//go:cgo_import_dynamic %s %s \"%s\"\n", sysvarname, sysname, modname)
				// GC Link symbol to proc address variable.
				linknames += fmt.Sprintf("//go:linkname %s %s\n", sysvarname, sysvarname)
				// GC Library proc address variable.
				vars = append(vars, sysvarname)
			}

			strconvfunc := "BytePtrFromString"
			strconvtype := "*byte"

			// Go function header.
			if outps != "" {
				outps = fmt.Sprintf(" (%s)", outps)
			}
			if textcommon != "" {
				textcommon += "\n"
			}

			textcommon += fmt.Sprintf("func %s(%s)%s {\n", funct, strings.Join(in, ", "), outps)

			// Prepare arguments tocall.
			var argscommon []string // Arguments in the common part
			var argscall []string   // Arguments for call prototype
			var argsgc []string     // Arguments for gc call (with syscall6)
			var argsgccgo []string  // Arguments for gccgo call (with C.name_of_syscall)
			n := 0
			argN := 0
			for _, param := range in {
				p := parseParam(param)
				if regexp.MustCompile(`^\*`).FindStringSubmatch(p.Type) != nil {
					argscommon = append(argscommon, fmt.Sprintf("uintptr(unsafe.Pointer(%s))", p.Name))
					argscall = append(argscall, fmt.Sprintf("%s uintptr", p.Name))
					argsgc = append(argsgc, p.Name)
					argsgccgo = append(argsgccgo, fmt.Sprintf("C.uintptr_t(%s)", p.Name))
				} else if p.Type == "string" && errvar != "" {
					textcommon += fmt.Sprintf("\tvar _p%d %s\n", n, strconvtype)
					textcommon += fmt.Sprintf("\t_p%d, %s = %s(%s)\n", n, errvar, strconvfunc, p.Name)
					textcommon += fmt.Sprintf("\tif %s != nil {\n\t\treturn\n\t}\n", errvar)

					argscommon = append(argscommon, fmt.Sprintf("uintptr(unsafe.Pointer(_p%d))", n))
					argscall = append(argscall, fmt.Sprintf("_p%d uintptr ", n))
					argsgc = append(argsgc, fmt.Sprintf("_p%d", n))
					argsgccgo = append(argsgccgo, fmt.Sprintf("C.uintptr_t(_p%d)", n))
					n++
				} else if p.Type == "string" {
					fmt.Fprintf(os.Stderr, path+":"+funct+" uses string arguments, but has no error return\n")
					textcommon += fmt.Sprintf("\tvar _p%d %s\n", n, strconvtype)
					textcommon += fmt.Sprintf("\t_p%d, %s = %s(%s)\n", n, errvar, strconvfunc, p.Name)
					textcommon += fmt.Sprintf("\tif %s != nil {\n\t\treturn\n\t}\n", errvar)

					argscommon = append(argscommon, fmt.Sprintf("uintptr(unsafe.Pointer(_p%d))", n))
					argscall = append(argscall, fmt.Sprintf("_p%d uintptr", n))
					argsgc = append(argsgc, fmt.Sprintf("_p%d", n))
					argsgccgo = append(argsgccgo, fmt.Sprintf("C.uintptr_t(_p%d)", n))
					n++
				} else if m := regexp.MustCompile(`^\[\](.*)`).FindStringSubmatch(p.Type); m != nil {
					// Convert slice into pointer, length.
					// Have to be careful not to take address of &a[0] if len == 0:
					// pass nil in that case.
					textcommon += fmt.Sprintf("\tvar _p%d *%s\n", n, m[1])
					textcommon += fmt.Sprintf("\tif len(%s) > 0 {\n\t\t_p%d = &%s[0]\n\t}\n", p.Name, n, p.Name)
					argscommon = append(argscommon, fmt.Sprintf("uintptr(unsafe.Pointer(_p%d))", n), fmt.Sprintf("len(%s)", p.Name))
					argscall = append(argscall, fmt.Sprintf("_p%d uintptr", n), fmt.Sprintf("_lenp%d int", n))
					argsgc = append(argsgc, fmt.Sprintf("_p%d", n), fmt.Sprintf("uintptr(_lenp%d)", n))
					argsgccgo = append(argsgccgo, fmt.Sprintf("C.uintptr_t(_p%d)", n), fmt.Sprintf("C.size_t(_lenp%d)", n))
					n++
				} else if p.Type == "int64" && endianness != "" {
					fmt.Fprintf(os.Stderr, path+":"+funct+" uses int64 with 32 bits mode. Case not yet implemented\n")
				} else if p.Type == "bool" {
					fmt.Fprintf(os.Stderr, path+":"+funct+" uses bool. Case not yet implemented\n")
				} else if regexp.MustCompile(`^_`).FindStringSubmatch(p.Type) != nil || p.Type == "unsafe.Pointer" {
					argscommon = append(argscommon, fmt.Sprintf("uintptr(%s)", p.Name))
					argscall = append(argscall, fmt.Sprintf("%s uintptr", p.Name))
					argsgc = append(argsgc, p.Name)
					argsgccgo = append(argsgccgo, fmt.Sprintf("C.uintptr_t(%s)", p.Name))
				} else if p.Type == "int" {
					if (argN == 0 || argN == 2) && ((funct == "fcntl") || (funct == "FcntlInt") || (funct == "FcntlFlock")) {
						// These fcntl arguments need to be uintptr to be able to call FcntlInt and FcntlFlock
						argscommon = append(argscommon, fmt.Sprintf("uintptr(%s)", p.Name))
						argscall = append(argscall, fmt.Sprintf("%s uintptr", p.Name))
						argsgc = append(argsgc, p.Name)
						argsgccgo = append(argsgccgo, fmt.Sprintf("C.uintptr_t(%s)", p.Name))

					} else {
						argscommon = append(argscommon, p.Name)
						argscall = append(argscall, fmt.Sprintf("%s int", p.Name))
						argsgc = append(argsgc, fmt.Sprintf("uintptr(%s)", p.Name))
						argsgccgo = append(argsgccgo, fmt.Sprintf("C.int(%s)", p.Name))
					}
				} else if p.Type == "int32" {
					argscommon = append(argscommon, p.Name)
					argscall = append(argscall, fmt.Sprintf("%s int32", p.Name))
					argsgc = append(argsgc, fmt.Sprintf("uintptr(%s)", p.Name))
					argsgccgo = append(argsgccgo, fmt.Sprintf("C.int(%s)", p.Name))
				} else if p.Type == "int64" {
					argscommon = append(argscommon, p.Name)
					argscall = append(argscall, fmt.Sprintf("%s int64", p.Name))
					argsgc = append(argsgc, fmt.Sprintf("uintptr(%s)", p.Name))
					argsgccgo = append(argsgccgo, fmt.Sprintf("C.longlong(%s)", p.Name))
				} else if p.Type == "uint32" {
					argscommon = append(argscommon, p.Name)
					argscall = append(argscall, fmt.Sprintf("%s uint32", p.Name))
					argsgc = append(argsgc, fmt.Sprintf("uintptr(%s)", p.Name))
					argsgccgo = append(argsgccgo, fmt.Sprintf("C.uint(%s)", p.Name))
				} else if p.Type == "uint64" {
					argscommon = append(argscommon, p.Name)
					argscall = append(argscall, fmt.Sprintf("%s uint64", p.Name))
					argsgc = append(argsgc, fmt.Sprintf("uintptr(%s)", p.Name))
					argsgccgo = append(argsgccgo, fmt.Sprintf("C.ulonglong(%s)", p.Name))
				} else if p.Type == "uintptr" {
					argscommon = append(argscommon, p.Name)
					argscall = append(argscall, fmt.Sprintf("%s uintptr", p.Name))
					argsgc = append(argsgc, p.Name)
					argsgccgo = append(argsgccgo, fmt.Sprintf("C.uintptr_t(%s)", p.Name))
				} else {
					argscommon = append(argscommon, fmt.Sprintf("int(%s)", p.Name))
					argscall = append(argscall, fmt.Sprintf("%s int", p.Name))
					argsgc = append(argsgc, fmt.Sprintf("uintptr(%s)", p.Name))
					argsgccgo = append(argsgccgo, fmt.Sprintf("C.int(%s)", p.Name))
				}
				argN++
			}
			nargs := len(argsgc)

			// COMMON function generation
			argscommonlist := strings.Join(argscommon, ", ")
			callcommon := fmt.Sprintf("call%s(%s)", sysname, argscommonlist)
			ret := []string{"_", "_"}
			body := ""
			doErrno := false
			for i := 0; i < len(out); i++ {
				p := parseParam(out[i])
				reg := ""
				if p.Name == "err" {
					reg = "e1"
					ret[1] = reg
					doErrno = true
				} else {
					reg = "r0"
					ret[0] = reg
				}
				if p.Type == "bool" {
					reg = fmt.Sprintf("%s != 0", reg)
				}
				if reg != "e1" {
					body += fmt.Sprintf("\t%s = %s(%s)\n", p.Name, p.Type, reg)
				}
			}
			if ret[0] == "_" && ret[1] == "_" {
				textcommon += fmt.Sprintf("\t%s\n", callcommon)
			} else {
				textcommon += fmt.Sprintf("\t%s, %s := %s\n", ret[0], ret[1], callcommon)
			}
			textcommon += body

			if doErrno {
				textcommon += "\tif e1 != 0 {\n"
				textcommon += "\t\terr = errnoErr(e1)\n"
				textcommon += "\t}\n"
			}
			textcommon += "\treturn\n"
			textcommon += "}\n"

			if onlyCommon {
				continue
			}

			// CALL Prototype
			callProto := fmt.Sprintf("func call%s(%s) (r1 uintptr, e1 Errno) {\n", sysname, strings.Join(argscall, ", "))

			// GC function generation
			asm := "syscall6"
			if nonblock != nil {
				asm = "rawSyscall6"
			}

			if len(argsgc) <= 6 {
				for len(argsgc) < 6 {
					argsgc = append(argsgc, "0")
				}
			} else {
				fmt.Fprintf(os.Stderr, "%s: too many arguments to system call", funct)
				os.Exit(1)
			}
			argsgclist := strings.Join(argsgc, ", ")
			callgc := fmt.Sprintf("%s(uintptr(unsafe.Pointer(&%s)), %d, %s)", asm, sysvarname, nargs, argsgclist)

			textgc += callProto
			textgc += fmt.Sprintf("\tr1, _, e1 = %s\n", callgc)
			textgc += "\treturn\n}\n"

			// GCCGO function generation
			argsgccgolist := strings.Join(argsgccgo, ", ")
			callgccgo := fmt.Sprintf("C.%s(%s)", sysname, argsgccgolist)
			textgccgo += callProto
			textgccgo += fmt.Sprintf("\tr1 = uintptr(%s)\n", callgccgo)
			textgccgo += "\te1 = syscall.GetErrno()\n"
			textgccgo += "\treturn\n}\n"
		}
		if err := s.Err(); err != nil {
			fmt.Fprintf(os.Stderr, err.Error())
			os.Exit(1)
		}
		file.Close()
	}
	imp := ""
	if pack != "unix" {
		imp = "import \"golang.org/x/sys/unix\"\n"

	}

	// Print zsyscall_aix_ppc64.go
	err := ioutil.WriteFile("zsyscall_aix_ppc64.go",
		[]byte(fmt.Sprintf(srcTemplate1, cmdLine(), buildTags(), pack, imp, textcommon)),
		0644)
	if err != nil {
		fmt.Fprintf(os.Stderr, err.Error())
		os.Exit(1)
	}

	// Print zsyscall_aix_ppc64_gc.go
	vardecls := "\t" + strings.Join(vars, ",\n\t")
	vardecls += " syscallFunc"
	err = ioutil.WriteFile("zsyscall_aix_ppc64_gc.go",
		[]byte(fmt.Sprintf(srcTemplate2, cmdLine(), buildTags(), pack, imp, dynimports, linknames, vardecls, textgc)),
		0644)
	if err != nil {
		fmt.Fprintf(os.Stderr, err.Error())
		os.Exit(1)
	}

	// Print zsyscall_aix_ppc64_gccgo.go
	err = ioutil.WriteFile("zsyscall_aix_ppc64_gccgo.go",
		[]byte(fmt.Sprintf(srcTemplate3, cmdLine(), buildTags(), pack, cExtern, imp, textgccgo)),
		0644)
	if err != nil {
		fmt.Fprintf(os.Stderr, err.Error())
		os.Exit(1)
	}
}

const srcTemplate1 = `// %s
// Code generated by the command above; see README.md. DO NOT EDIT.

// +build %s

package %s

import (
	"unsafe"
)


%s

%s
`
const srcTemplate2 = `// %s
// Code generated by the command above; see README.md. DO NOT EDIT.

// +build %s
// +build !gccgo

package %s

import (
	"unsafe"
)
%s
%s
%s
type syscallFunc uintptr

var (
%s
)

// Implemented in runtime/syscall_aix.go.
func rawSyscall6(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)
func syscall6(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)

%s
`
const srcTemplate3 = `// %s
// Code generated by the command above; see README.md. DO NOT EDIT.

// +build %s
// +build gccgo

package %s

%s
*/
import "C"
import (
	"syscall"
)


%s

%s
`

- f d92c23ca50786e5cfa2467267588c6479c23a24f86534c9c56075a499814f11f vendor/golang.org/x/sys/unix/mksyscall_aix_ppc64.pl
- f 2ea65d5fb7fb5775529cb66aaa8c75d7299e25cce310c0a814b962ca19f5eed7 vendor/golang.org/x/sys/unix/syscall_dragonfly.go
+ f 4f64a3bf0bd01e2eb50c8b13249a3e0695ddefcff99ad5ae5ac20533ec17aadc vendor/golang.org/x/sys/unix/syscall_dragonfly.go
dmppatch 4
@@ -9396,32 +9396,105 @@
 ng) (err error)%0A
+//sys%09Renameat(fromfd int, from string, tofd int, to string) (err error)%0A
 //sys%09Revoke(pat
- f a0c9dea4fe905332e261ac95fa0881347cc236bdbc7392fb9533c7565b488028 vendor/golang.org/x/sys/unix/syscall_linux.go
+ f c988cda42d03e419eb8623cc77b5ebd46e802c52c9198a25b3f380fa6ad7ef85 vendor/golang.org/x/sys/unix/syscall_linux.go
dmppatch 12
@@ -43637,95 +43637,8 @@
 or)%0A
-//sys%09Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)%0A
 //sy
@@ -44585,24 +44585,90 @@
 (err error)%0A
+//sys%09Signalfd(fd int, mask *Sigset_t, flags int) = SYS_SIGNALFD4%0A
 //sys%09Statx(
@@ -49142,20 +49142,8 @@
 ack%0A
-// Signalfd%0A
 // S
- f fd39cde02c43ea5cf2a3ad6d4c45f31dd712ce33858960527092e685d11f84ea vendor/golang.org/x/sys/unix/syscall_linux_386.go
+ f 5d61a257c97cc118b1063a3bbfc4ae808ec96c4f9c99784cbbc56dcb5f19f5e9 vendor/golang.org/x/sys/unix/syscall_linux_386.go
dmppatch 4
@@ -2183,24 +2183,111 @@
 YS_PWRITE64%0A
+//sys%09Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)%0A
 //sys%09sendfi
- f 311bf5342f6b55a0fc5d5c613fb6ddcc0e9e750ef155690a19eb9c48e67949af vendor/golang.org/x/sys/unix/syscall_linux_amd64.go
+ f f169251b9e6fd3d73280d61292368e1a49deeec976d20478b85f36f449811a1e vendor/golang.org/x/sys/unix/syscall_linux_amd64.go
dmppatch 4
@@ -1635,24 +1635,111 @@
 YS_PWRITE64%0A
+//sys%09Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)%0A
 //sys%09Seek(f
- f dca767ac203d5c637d8af3847a24604cf5aa00b60fbd1d48deec04fb86e4b61f vendor/golang.org/x/sys/unix/syscall_linux_arm.go
+ f f1a7fa96997ce367f49b4730e8d98468f80897a4bd499e596431ff8906139e4e vendor/golang.org/x/sys/unix/syscall_linux_arm.go
dmppatch 4
@@ -3358,32 +3358,119 @@
 e() (err error)%0A
+//sys%09Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)%0A
 //sys%09sendfile(o
- f 63e21b0c1f8ac350ec592636a4c3a16476662e659131190cc5d2ca00a4cc150e vendor/golang.org/x/sys/unix/syscall_linux_arm64.go
+ f 11ece51262af272522d3db3107fa8b24148f81a64bfcf6a759df9aea8c983e4f vendor/golang.org/x/sys/unix/syscall_linux_arm64.go
dmppatch 4
@@ -1135,24 +1135,111 @@
 YS_PWRITE64%0A
+//sys%09Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)%0A
 //sys%09Seek(f
- f 54b11ed3978958321bc20f17c7231a5c277b91d9289db948694aa3a6780d242e vendor/golang.org/x/sys/unix/syscall_linux_mips64x.go
+ f 3976d5b65d0c346102e229d088b83e318decbe7acf506197a3db21b0be58b372 vendor/golang.org/x/sys/unix/syscall_linux_mips64x.go
dmppatch 4
@@ -1064,24 +1064,111 @@
 YS_PWRITE64%0A
+//sys%09Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)%0A
 //sys%09Seek(f
- f 81f514d7b90c5dd3c2e558b87810098d3c0339a074fcfb452f6f4b02c6e72fd6 vendor/golang.org/x/sys/unix/syscall_linux_mipsx.go
+ f 6f95300ef1a29714a86768dae2baa278bdde71a974d836593a3429b1b2216569 vendor/golang.org/x/sys/unix/syscall_linux_mipsx.go
dmppatch 4
@@ -1079,24 +1079,111 @@
 YS_PWRITE64%0A
+//sys%09Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)%0A
 //sys%09Select
- f 15351b18a1a74cdb00cce0fb13443c4ce07c8cc9bca5c6abc886dfc89e10e45d vendor/golang.org/x/sys/unix/syscall_linux_ppc64x.go
+ f c1c3d2b9e43e438678a1cbd51814e8af975137526ee24a16b43884397eda9662 vendor/golang.org/x/sys/unix/syscall_linux_ppc64x.go
dmppatch 4
@@ -1396,24 +1396,111 @@
 YS_PWRITE64%0A
+//sys%09Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)%0A
 //sys%09Seek(f
- f 9eae08bf82d29087335f65c4f512c9186f92b80e42554fb6781a4af4c9f50f02 vendor/golang.org/x/sys/unix/syscall_linux_riscv64.go
+ f ebb210ea3bc3d9127a869def7723c520ab795d03c0c086f1a599bd6533443eeb vendor/golang.org/x/sys/unix/syscall_linux_riscv64.go
dmppatch 3
@@ -6303,20 +6303,170 @@
 en(fds), ts, nil)%0A%7D%0A
+%0Afunc Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09return Renameat2(olddirfd, oldpath, newdirfd, newpath, 0)%0A%7D%0A
- f be7b84327f517fbcbd90d7ef05886fbe357ca68a705d1bfe8ac01541c294a768 vendor/golang.org/x/sys/unix/syscall_linux_s390x.go
+ f 81627d3f40af367413b8cdc62a8dcce40a3c58494c057aa223107d333fcac8ed vendor/golang.org/x/sys/unix/syscall_linux_s390x.go
dmppatch 4
@@ -1258,24 +1258,111 @@
 YS_PWRITE64%0A
+//sys%09Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)%0A
 //sys%09Seek(f
- f a9ce3f0cf18fb7a293d6fdcdebf7ac84f3b6192a50cb79f9f827f881aadce7b0 vendor/golang.org/x/sys/unix/syscall_linux_sparc64.go
+ f 024725a3c1e3fbe54316cbbd38f3a17a1ff12b21201a41d473bc96b618316b39 vendor/golang.org/x/sys/unix/syscall_linux_sparc64.go
dmppatch 4
@@ -1226,24 +1226,111 @@
 YS_PWRITE64%0A
+//sys%09Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)%0A
 //sys%09Seek(f
+ f 20bc1932f51f042a6f98d30a6b76e26d0fe6072d9488832e26be4d5e0ef01fc6 vendor/golang.org/x/sys/unix/syscall_netbsd_arm64.go
utf8file 34
// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build arm64,netbsd

package unix

func setTimespec(sec, nsec int64) Timespec {
	return Timespec{Sec: sec, Nsec: nsec}
}

func setTimeval(sec, usec int64) Timeval {
	return Timeval{Sec: sec, Usec: int32(usec)}
}

func SetKevent(k *Kevent_t, fd, mode, flags int) {
	k.Ident = uint64(fd)
	k.Filter = uint32(mode)
	k.Flags = uint32(flags)
}

func (iov *Iovec) SetLen(length int) {
	iov.Len = uint64(length)
}

func (msghdr *Msghdr) SetControllen(length int) {
	msghdr.Controllen = uint32(length)
}

func (cmsg *Cmsghdr) SetLen(length int) {
	cmsg.Len = uint32(length)
}

- f de192b1f076e7ccd044383029beeb2270196e6f854695c7395653e6069518c10 vendor/golang.org/x/sys/unix/zerrors_linux_386.go
+ f d0af030a10dd0515b9b64803f4f3eb8ba7c414ad55876600987ae9e4f1a76c14 vendor/golang.org/x/sys/unix/zerrors_linux_386.go
dmppatch 8
@@ -79520,16 +79520,110 @@
 97cff8c%0A
+%09SFD_CLOEXEC                          = 0x80000%0A%09SFD_NONBLOCK                         = 0x800%0A
 %09SHUT_RD
@@ -87046,24 +87046,508 @@
       = 0x5%0A
+%09SO_EE_CODE_TXTIME_INVALID_PARAM      = 0x1%0A%09SO_EE_CODE_TXTIME_MISSED             = 0x2%0A%09SO_EE_CODE_ZEROCOPY_COPIED           = 0x1%0A%09SO_EE_ORIGIN_ICMP                    = 0x2%0A%09SO_EE_ORIGIN_ICMP6                   = 0x3%0A%09SO_EE_ORIGIN_LOCAL                   = 0x1%0A%09SO_EE_ORIGIN_NONE                    = 0x0%0A%09SO_EE_ORIGIN_TIMESTAMPING            = 0x4%0A%09SO_EE_ORIGIN_TXSTATUS                = 0x4%0A%09SO_EE_ORIGIN_TXTIME                  = 0x6%0A%09SO_EE_ORIGIN_ZEROCOPY                = 0x5%0A
 %09SO_ERROR   
- f 5b9b4514ba9ed88c64a86441c7fe270b6d368ce2e64c4ac1598bb8a1c5087e77 vendor/golang.org/x/sys/unix/zerrors_linux_amd64.go
+ f fcb70d2bfb17d7e63445c6a8b5e4f3e0fd7598ed69e8546908cadaacbdd0465f vendor/golang.org/x/sys/unix/zerrors_linux_amd64.go
dmppatch 8
@@ -79572,16 +79572,110 @@
 97cff8c%0A
+%09SFD_CLOEXEC                          = 0x80000%0A%09SFD_NONBLOCK                         = 0x800%0A
 %09SHUT_RD
@@ -87098,24 +87098,508 @@
       = 0x5%0A
+%09SO_EE_CODE_TXTIME_INVALID_PARAM      = 0x1%0A%09SO_EE_CODE_TXTIME_MISSED             = 0x2%0A%09SO_EE_CODE_ZEROCOPY_COPIED           = 0x1%0A%09SO_EE_ORIGIN_ICMP                    = 0x2%0A%09SO_EE_ORIGIN_ICMP6                   = 0x3%0A%09SO_EE_ORIGIN_LOCAL                   = 0x1%0A%09SO_EE_ORIGIN_NONE                    = 0x0%0A%09SO_EE_ORIGIN_TIMESTAMPING            = 0x4%0A%09SO_EE_ORIGIN_TXSTATUS                = 0x4%0A%09SO_EE_ORIGIN_TXTIME                  = 0x6%0A%09SO_EE_ORIGIN_ZEROCOPY                = 0x5%0A
 %09SO_ERROR   
- f 783a7ac4deaa01751f7e3c17c35dbaf52cb6e63b3897babc04c7c90545a629ae vendor/golang.org/x/sys/unix/zerrors_linux_arm.go
+ f bd920c8b20aa9d03f8389465cc4028edc83ba0b52909ccb1d8a61c9f6d436969 vendor/golang.org/x/sys/unix/zerrors_linux_arm.go
dmppatch 8
@@ -79826,16 +79826,110 @@
 97cff8c%0A
+%09SFD_CLOEXEC                          = 0x80000%0A%09SFD_NONBLOCK                         = 0x800%0A
 %09SHUT_RD
@@ -87352,24 +87352,508 @@
       = 0x5%0A
+%09SO_EE_CODE_TXTIME_INVALID_PARAM      = 0x1%0A%09SO_EE_CODE_TXTIME_MISSED             = 0x2%0A%09SO_EE_CODE_ZEROCOPY_COPIED           = 0x1%0A%09SO_EE_ORIGIN_ICMP                    = 0x2%0A%09SO_EE_ORIGIN_ICMP6                   = 0x3%0A%09SO_EE_ORIGIN_LOCAL                   = 0x1%0A%09SO_EE_ORIGIN_NONE                    = 0x0%0A%09SO_EE_ORIGIN_TIMESTAMPING            = 0x4%0A%09SO_EE_ORIGIN_TXSTATUS                = 0x4%0A%09SO_EE_ORIGIN_TXTIME                  = 0x6%0A%09SO_EE_ORIGIN_ZEROCOPY                = 0x5%0A
 %09SO_ERROR   
- f 2f9f7801c348ea3cefed4c56d58c4c887cec5adc27af2b0de8c162acae509363 vendor/golang.org/x/sys/unix/zerrors_linux_arm64.go
+ f 2061d87da4751c9e8dc0d7cf91f89befcc3c3d21353277fa5d6cff74151789fb vendor/golang.org/x/sys/unix/zerrors_linux_arm64.go
dmppatch 8
@@ -79153,16 +79153,110 @@
 97cff8c%0A
+%09SFD_CLOEXEC                          = 0x80000%0A%09SFD_NONBLOCK                         = 0x800%0A
 %09SHUT_RD
@@ -86679,24 +86679,508 @@
       = 0x5%0A
+%09SO_EE_CODE_TXTIME_INVALID_PARAM      = 0x1%0A%09SO_EE_CODE_TXTIME_MISSED             = 0x2%0A%09SO_EE_CODE_ZEROCOPY_COPIED           = 0x1%0A%09SO_EE_ORIGIN_ICMP                    = 0x2%0A%09SO_EE_ORIGIN_ICMP6                   = 0x3%0A%09SO_EE_ORIGIN_LOCAL                   = 0x1%0A%09SO_EE_ORIGIN_NONE                    = 0x0%0A%09SO_EE_ORIGIN_TIMESTAMPING            = 0x4%0A%09SO_EE_ORIGIN_TXSTATUS                = 0x4%0A%09SO_EE_ORIGIN_TXTIME                  = 0x6%0A%09SO_EE_ORIGIN_ZEROCOPY                = 0x5%0A
 %09SO_ERROR   
- f e090e560402813ad761825bb3ff22a093725fdddc284f8957ed7f644f9eca9ed vendor/golang.org/x/sys/unix/zerrors_linux_mips.go
+ f a7a1508845734b39119c123ad0c8193b0ddc3a505df4efd0008bea62be5a4c3d vendor/golang.org/x/sys/unix/zerrors_linux_mips.go
dmppatch 8
@@ -79623,16 +79623,109 @@
 97cff8c%0A
+%09SFD_CLOEXEC                          = 0x80000%0A%09SFD_NONBLOCK                         = 0x80%0A
 %09SHUT_RD
@@ -87172,16 +87172,500 @@
  = 0x10%0A
+%09SO_EE_CODE_TXTIME_INVALID_PARAM      = 0x1%0A%09SO_EE_CODE_TXTIME_MISSED             = 0x2%0A%09SO_EE_CODE_ZEROCOPY_COPIED           = 0x1%0A%09SO_EE_ORIGIN_ICMP                    = 0x2%0A%09SO_EE_ORIGIN_ICMP6                   = 0x3%0A%09SO_EE_ORIGIN_LOCAL                   = 0x1%0A%09SO_EE_ORIGIN_NONE                    = 0x0%0A%09SO_EE_ORIGIN_TIMESTAMPING            = 0x4%0A%09SO_EE_ORIGIN_TXSTATUS                = 0x4%0A%09SO_EE_ORIGIN_TXTIME                  = 0x6%0A%09SO_EE_ORIGIN_ZEROCOPY                = 0x5%0A
 %09SO_ERRO
- f a5ae6207b2fd0b6d3e8dcca14dc90282d6ebc2fe8985589c6a56faf936de63ef vendor/golang.org/x/sys/unix/zerrors_linux_mips64.go
+ f 2affc469dbc5bd98e700cd55a0de5201236417d9eb174197c4d86b455b3d463d vendor/golang.org/x/sys/unix/zerrors_linux_mips64.go
dmppatch 8
@@ -79624,16 +79624,109 @@
 97cff8c%0A
+%09SFD_CLOEXEC                          = 0x80000%0A%09SFD_NONBLOCK                         = 0x80%0A
 %09SHUT_RD
@@ -87173,16 +87173,500 @@
  = 0x10%0A
+%09SO_EE_CODE_TXTIME_INVALID_PARAM      = 0x1%0A%09SO_EE_CODE_TXTIME_MISSED             = 0x2%0A%09SO_EE_CODE_ZEROCOPY_COPIED           = 0x1%0A%09SO_EE_ORIGIN_ICMP                    = 0x2%0A%09SO_EE_ORIGIN_ICMP6                   = 0x3%0A%09SO_EE_ORIGIN_LOCAL                   = 0x1%0A%09SO_EE_ORIGIN_NONE                    = 0x0%0A%09SO_EE_ORIGIN_TIMESTAMPING            = 0x4%0A%09SO_EE_ORIGIN_TXSTATUS                = 0x4%0A%09SO_EE_ORIGIN_TXTIME                  = 0x6%0A%09SO_EE_ORIGIN_ZEROCOPY                = 0x5%0A
 %09SO_ERRO
- f a1deb223ad6b8f054c0e34606e5238b8b7c40b8e6beb708bc03e4c69a7b14e02 vendor/golang.org/x/sys/unix/zerrors_linux_mips64le.go
+ f d76312a4232eb49605813da1d4f58c23e21d5999387d93a2f27dab9b3bee3404 vendor/golang.org/x/sys/unix/zerrors_linux_mips64le.go
dmppatch 8
@@ -79626,16 +79626,109 @@
 97cff8c%0A
+%09SFD_CLOEXEC                          = 0x80000%0A%09SFD_NONBLOCK                         = 0x80%0A
 %09SHUT_RD
@@ -87175,16 +87175,500 @@
  = 0x10%0A
+%09SO_EE_CODE_TXTIME_INVALID_PARAM      = 0x1%0A%09SO_EE_CODE_TXTIME_MISSED             = 0x2%0A%09SO_EE_CODE_ZEROCOPY_COPIED           = 0x1%0A%09SO_EE_ORIGIN_ICMP                    = 0x2%0A%09SO_EE_ORIGIN_ICMP6                   = 0x3%0A%09SO_EE_ORIGIN_LOCAL                   = 0x1%0A%09SO_EE_ORIGIN_NONE                    = 0x0%0A%09SO_EE_ORIGIN_TIMESTAMPING            = 0x4%0A%09SO_EE_ORIGIN_TXSTATUS                = 0x4%0A%09SO_EE_ORIGIN_TXTIME                  = 0x6%0A%09SO_EE_ORIGIN_ZEROCOPY                = 0x5%0A
 %09SO_ERRO
- f 00bca7fe360e1b577607dc9606272d0d2fcd066dd9dc5b40ee607c9c4f64edbb vendor/golang.org/x/sys/unix/zerrors_linux_mipsle.go
+ f f13510b11c503d36f9cab3831d3335d52b6fd814090a547ca804eb243854f004 vendor/golang.org/x/sys/unix/zerrors_linux_mipsle.go
dmppatch 8
@@ -79625,16 +79625,109 @@
 97cff8c%0A
+%09SFD_CLOEXEC                          = 0x80000%0A%09SFD_NONBLOCK                         = 0x80%0A
 %09SHUT_RD
@@ -87174,16 +87174,500 @@
  = 0x10%0A
+%09SO_EE_CODE_TXTIME_INVALID_PARAM      = 0x1%0A%09SO_EE_CODE_TXTIME_MISSED             = 0x2%0A%09SO_EE_CODE_ZEROCOPY_COPIED           = 0x1%0A%09SO_EE_ORIGIN_ICMP                    = 0x2%0A%09SO_EE_ORIGIN_ICMP6                   = 0x3%0A%09SO_EE_ORIGIN_LOCAL                   = 0x1%0A%09SO_EE_ORIGIN_NONE                    = 0x0%0A%09SO_EE_ORIGIN_TIMESTAMPING            = 0x4%0A%09SO_EE_ORIGIN_TXSTATUS                = 0x4%0A%09SO_EE_ORIGIN_TXTIME                  = 0x6%0A%09SO_EE_ORIGIN_ZEROCOPY                = 0x5%0A
 %09SO_ERRO
- f 2ea09ce0e00135c873d57c5edebc844cccd7901f8ba61b76c69ad74217a689be vendor/golang.org/x/sys/unix/zerrors_linux_ppc64.go
+ f 0ef5ea51bf33c421312b53217a7de8eb3efd86d27444e025cc4c33c91a924fd9 vendor/golang.org/x/sys/unix/zerrors_linux_ppc64.go
dmppatch 8
@@ -82216,16 +82216,110 @@
 97cff8c%0A
+%09SFD_CLOEXEC                          = 0x80000%0A%09SFD_NONBLOCK                         = 0x800%0A
 %09SHUT_RD
@@ -89750,24 +89750,508 @@
       = 0x5%0A
+%09SO_EE_CODE_TXTIME_INVALID_PARAM      = 0x1%0A%09SO_EE_CODE_TXTIME_MISSED             = 0x2%0A%09SO_EE_CODE_ZEROCOPY_COPIED           = 0x1%0A%09SO_EE_ORIGIN_ICMP                    = 0x2%0A%09SO_EE_ORIGIN_ICMP6                   = 0x3%0A%09SO_EE_ORIGIN_LOCAL                   = 0x1%0A%09SO_EE_ORIGIN_NONE                    = 0x0%0A%09SO_EE_ORIGIN_TIMESTAMPING            = 0x4%0A%09SO_EE_ORIGIN_TXSTATUS                = 0x4%0A%09SO_EE_ORIGIN_TXTIME                  = 0x6%0A%09SO_EE_ORIGIN_ZEROCOPY                = 0x5%0A
 %09SO_ERROR   
- f 8a00908fffebb5d9f327fc5a980b162fbc98b617a20943dbf9d0dde4ed5bf028 vendor/golang.org/x/sys/unix/zerrors_linux_ppc64le.go
+ f a559d2e525cc76a7914bcb0d82f63ffd4bd8fe8d60aff4974f3d5023ec190baf vendor/golang.org/x/sys/unix/zerrors_linux_ppc64le.go
dmppatch 8
@@ -82218,16 +82218,110 @@
 97cff8c%0A
+%09SFD_CLOEXEC                          = 0x80000%0A%09SFD_NONBLOCK                         = 0x800%0A
 %09SHUT_RD
@@ -89752,24 +89752,508 @@
       = 0x5%0A
+%09SO_EE_CODE_TXTIME_INVALID_PARAM      = 0x1%0A%09SO_EE_CODE_TXTIME_MISSED             = 0x2%0A%09SO_EE_CODE_ZEROCOPY_COPIED           = 0x1%0A%09SO_EE_ORIGIN_ICMP                    = 0x2%0A%09SO_EE_ORIGIN_ICMP6                   = 0x3%0A%09SO_EE_ORIGIN_LOCAL                   = 0x1%0A%09SO_EE_ORIGIN_NONE                    = 0x0%0A%09SO_EE_ORIGIN_TIMESTAMPING            = 0x4%0A%09SO_EE_ORIGIN_TXSTATUS                = 0x4%0A%09SO_EE_ORIGIN_TXTIME                  = 0x6%0A%09SO_EE_ORIGIN_ZEROCOPY                = 0x5%0A
 %09SO_ERROR   
- f 7693e186f17ab50c494d7666dcc89ffc8fb17023393fcfd9de6752f058a16231 vendor/golang.org/x/sys/unix/zerrors_linux_riscv64.go
+ f 5e2efb4c6c3d03f8b9d329319a0f9de1e76aa63f3bfc60597adf5df82bbc8f6b vendor/golang.org/x/sys/unix/zerrors_linux_riscv64.go
dmppatch 8
@@ -78975,16 +78975,110 @@
 97cff8c%0A
+%09SFD_CLOEXEC                          = 0x80000%0A%09SFD_NONBLOCK                         = 0x800%0A
 %09SHUT_RD
@@ -86501,24 +86501,508 @@
       = 0x5%0A
+%09SO_EE_CODE_TXTIME_INVALID_PARAM      = 0x1%0A%09SO_EE_CODE_TXTIME_MISSED             = 0x2%0A%09SO_EE_CODE_ZEROCOPY_COPIED           = 0x1%0A%09SO_EE_ORIGIN_ICMP                    = 0x2%0A%09SO_EE_ORIGIN_ICMP6                   = 0x3%0A%09SO_EE_ORIGIN_LOCAL                   = 0x1%0A%09SO_EE_ORIGIN_NONE                    = 0x0%0A%09SO_EE_ORIGIN_TIMESTAMPING            = 0x4%0A%09SO_EE_ORIGIN_TXSTATUS                = 0x4%0A%09SO_EE_ORIGIN_TXTIME                  = 0x6%0A%09SO_EE_ORIGIN_ZEROCOPY                = 0x5%0A
 %09SO_ERROR   
- f 3fbceb9e79fab86fade7c53dc2581ea1a92620f926e0d4fa9937d9682fa12ba2 vendor/golang.org/x/sys/unix/zerrors_linux_s390x.go
+ f 7f43439f09c6bf956371658610cd32a312d27fa46f3957071cd4605a44913716 vendor/golang.org/x/sys/unix/zerrors_linux_s390x.go
dmppatch 8
@@ -82325,16 +82325,110 @@
 97cff8c%0A
+%09SFD_CLOEXEC                          = 0x80000%0A%09SFD_NONBLOCK                         = 0x800%0A
 %09SHUT_RD
@@ -89851,24 +89851,508 @@
       = 0x5%0A
+%09SO_EE_CODE_TXTIME_INVALID_PARAM      = 0x1%0A%09SO_EE_CODE_TXTIME_MISSED             = 0x2%0A%09SO_EE_CODE_ZEROCOPY_COPIED           = 0x1%0A%09SO_EE_ORIGIN_ICMP                    = 0x2%0A%09SO_EE_ORIGIN_ICMP6                   = 0x3%0A%09SO_EE_ORIGIN_LOCAL                   = 0x1%0A%09SO_EE_ORIGIN_NONE                    = 0x0%0A%09SO_EE_ORIGIN_TIMESTAMPING            = 0x4%0A%09SO_EE_ORIGIN_TXSTATUS                = 0x4%0A%09SO_EE_ORIGIN_TXTIME                  = 0x6%0A%09SO_EE_ORIGIN_ZEROCOPY                = 0x5%0A
 %09SO_ERROR   
- f 15d52235704e3d1f217f8ec9c83b8c694d27ac2648b676fc9c67e5556264716d vendor/golang.org/x/sys/unix/zerrors_linux_sparc64.go
+ f 51ee062e7b1e11150f7a7da08a091dfe36aac3e01a2d48af9671e2555f011e48 vendor/golang.org/x/sys/unix/zerrors_linux_sparc64.go
dmppatch 8
@@ -82032,16 +82032,112 @@
 97cff8c%0A
+%09SFD_CLOEXEC                          = 0x400000%0A%09SFD_NONBLOCK                         = 0x4000%0A
 %09SHUT_RD
@@ -89584,16 +89584,500 @@
  = 0x10%0A
+%09SO_EE_CODE_TXTIME_INVALID_PARAM      = 0x1%0A%09SO_EE_CODE_TXTIME_MISSED             = 0x2%0A%09SO_EE_CODE_ZEROCOPY_COPIED           = 0x1%0A%09SO_EE_ORIGIN_ICMP                    = 0x2%0A%09SO_EE_ORIGIN_ICMP6                   = 0x3%0A%09SO_EE_ORIGIN_LOCAL                   = 0x1%0A%09SO_EE_ORIGIN_NONE                    = 0x0%0A%09SO_EE_ORIGIN_TIMESTAMPING            = 0x4%0A%09SO_EE_ORIGIN_TXSTATUS                = 0x4%0A%09SO_EE_ORIGIN_TXTIME                  = 0x6%0A%09SO_EE_ORIGIN_ZEROCOPY                = 0x5%0A
 %09SO_ERRO
+ f 6a07680b8ac53bdf434a1911d526443abbfcfc4e2df70efc9483398bb27d85a5 vendor/golang.org/x/sys/unix/zerrors_netbsd_arm64.go
utf8file 1763
// mkerrors.sh -m64
// Code generated by the command above; see README.md. DO NOT EDIT.

// +build arm64,netbsd

// Created by cgo -godefs - DO NOT EDIT
// cgo -godefs -- -m64 _const.go

package unix

import "syscall"

const (
	AF_APPLETALK                      = 0x10
	AF_ARP                            = 0x1c
	AF_BLUETOOTH                      = 0x1f
	AF_CCITT                          = 0xa
	AF_CHAOS                          = 0x5
	AF_CNT                            = 0x15
	AF_COIP                           = 0x14
	AF_DATAKIT                        = 0x9
	AF_DECnet                         = 0xc
	AF_DLI                            = 0xd
	AF_E164                           = 0x1a
	AF_ECMA                           = 0x8
	AF_HYLINK                         = 0xf
	AF_IEEE80211                      = 0x20
	AF_IMPLINK                        = 0x3
	AF_INET                           = 0x2
	AF_INET6                          = 0x18
	AF_IPX                            = 0x17
	AF_ISDN                           = 0x1a
	AF_ISO                            = 0x7
	AF_LAT                            = 0xe
	AF_LINK                           = 0x12
	AF_LOCAL                          = 0x1
	AF_MAX                            = 0x23
	AF_MPLS                           = 0x21
	AF_NATM                           = 0x1b
	AF_NS                             = 0x6
	AF_OROUTE                         = 0x11
	AF_OSI                            = 0x7
	AF_PUP                            = 0x4
	AF_ROUTE                          = 0x22
	AF_SNA                            = 0xb
	AF_UNIX                           = 0x1
	AF_UNSPEC                         = 0x0
	ARPHRD_ARCNET                     = 0x7
	ARPHRD_ETHER                      = 0x1
	ARPHRD_FRELAY                     = 0xf
	ARPHRD_IEEE1394                   = 0x18
	ARPHRD_IEEE802                    = 0x6
	ARPHRD_STRIP                      = 0x17
	B0                                = 0x0
	B110                              = 0x6e
	B115200                           = 0x1c200
	B1200                             = 0x4b0
	B134                              = 0x86
	B14400                            = 0x3840
	B150                              = 0x96
	B1800                             = 0x708
	B19200                            = 0x4b00
	B200                              = 0xc8
	B230400                           = 0x38400
	B2400                             = 0x960
	B28800                            = 0x7080
	B300                              = 0x12c
	B38400                            = 0x9600
	B460800                           = 0x70800
	B4800                             = 0x12c0
	B50                               = 0x32
	B57600                            = 0xe100
	B600                              = 0x258
	B7200                             = 0x1c20
	B75                               = 0x4b
	B76800                            = 0x12c00
	B921600                           = 0xe1000
	B9600                             = 0x2580
	BIOCFEEDBACK                      = 0x8004427d
	BIOCFLUSH                         = 0x20004268
	BIOCGBLEN                         = 0x40044266
	BIOCGDLT                          = 0x4004426a
	BIOCGDLTLIST                      = 0xc0104277
	BIOCGETIF                         = 0x4090426b
	BIOCGFEEDBACK                     = 0x4004427c
	BIOCGHDRCMPLT                     = 0x40044274
	BIOCGRTIMEOUT                     = 0x4010427b
	BIOCGSEESENT                      = 0x40044278
	BIOCGSTATS                        = 0x4080426f
	BIOCGSTATSOLD                     = 0x4008426f
	BIOCIMMEDIATE                     = 0x80044270
	BIOCPROMISC                       = 0x20004269
	BIOCSBLEN                         = 0xc0044266
	BIOCSDLT                          = 0x80044276
	BIOCSETF                          = 0x80104267
	BIOCSETIF                         = 0x8090426c
	BIOCSFEEDBACK                     = 0x8004427d
	BIOCSHDRCMPLT                     = 0x80044275
	BIOCSRTIMEOUT                     = 0x8010427a
	BIOCSSEESENT                      = 0x80044279
	BIOCSTCPF                         = 0x80104272
	BIOCSUDPF                         = 0x80104273
	BIOCVERSION                       = 0x40044271
	BPF_A                             = 0x10
	BPF_ABS                           = 0x20
	BPF_ADD                           = 0x0
	BPF_ALIGNMENT                     = 0x8
	BPF_ALIGNMENT32                   = 0x4
	BPF_ALU                           = 0x4
	BPF_AND                           = 0x50
	BPF_B                             = 0x10
	BPF_DFLTBUFSIZE                   = 0x100000
	BPF_DIV                           = 0x30
	BPF_H                             = 0x8
	BPF_IMM                           = 0x0
	BPF_IND                           = 0x40
	BPF_JA                            = 0x0
	BPF_JEQ                           = 0x10
	BPF_JGE                           = 0x30
	BPF_JGT                           = 0x20
	BPF_JMP                           = 0x5
	BPF_JSET                          = 0x40
	BPF_K                             = 0x0
	BPF_LD                            = 0x0
	BPF_LDX                           = 0x1
	BPF_LEN                           = 0x80
	BPF_LSH                           = 0x60
	BPF_MAJOR_VERSION                 = 0x1
	BPF_MAXBUFSIZE                    = 0x1000000
	BPF_MAXINSNS                      = 0x200
	BPF_MEM                           = 0x60
	BPF_MEMWORDS                      = 0x10
	BPF_MINBUFSIZE                    = 0x20
	BPF_MINOR_VERSION                 = 0x1
	BPF_MISC                          = 0x7
	BPF_MSH                           = 0xa0
	BPF_MUL                           = 0x20
	BPF_NEG                           = 0x80
	BPF_OR                            = 0x40
	BPF_RELEASE                       = 0x30bb6
	BPF_RET                           = 0x6
	BPF_RSH                           = 0x70
	BPF_ST                            = 0x2
	BPF_STX                           = 0x3
	BPF_SUB                           = 0x10
	BPF_TAX                           = 0x0
	BPF_TXA                           = 0x80
	BPF_W                             = 0x0
	BPF_X                             = 0x8
	BRKINT                            = 0x2
	CFLUSH                            = 0xf
	CLOCAL                            = 0x8000
	CLONE_CSIGNAL                     = 0xff
	CLONE_FILES                       = 0x400
	CLONE_FS                          = 0x200
	CLONE_PID                         = 0x1000
	CLONE_PTRACE                      = 0x2000
	CLONE_SIGHAND                     = 0x800
	CLONE_VFORK                       = 0x4000
	CLONE_VM                          = 0x100
	CREAD                             = 0x800
	CRTSCTS                           = 0x10000
	CS5                               = 0x0
	CS6                               = 0x100
	CS7                               = 0x200
	CS8                               = 0x300
	CSIZE                             = 0x300
	CSTART                            = 0x11
	CSTATUS                           = 0x14
	CSTOP                             = 0x13
	CSTOPB                            = 0x400
	CSUSP                             = 0x1a
	CTL_HW                            = 0x6
	CTL_KERN                          = 0x1
	CTL_MAXNAME                       = 0xc
	CTL_NET                           = 0x4
	CTL_QUERY                         = -0x2
	DIOCBSFLUSH                       = 0x20006478
	DLT_A429                          = 0xb8
	DLT_A653_ICM                      = 0xb9
	DLT_AIRONET_HEADER                = 0x78
	DLT_AOS                           = 0xde
	DLT_APPLE_IP_OVER_IEEE1394        = 0x8a
	DLT_ARCNET                        = 0x7
	DLT_ARCNET_LINUX                  = 0x81
	DLT_ATM_CLIP                      = 0x13
	DLT_ATM_RFC1483                   = 0xb
	DLT_AURORA                        = 0x7e
	DLT_AX25                          = 0x3
	DLT_AX25_KISS                     = 0xca
	DLT_BACNET_MS_TP                  = 0xa5
	DLT_BLUETOOTH_HCI_H4              = 0xbb
	DLT_BLUETOOTH_HCI_H4_WITH_PHDR    = 0xc9
	DLT_CAN20B                        = 0xbe
	DLT_CAN_SOCKETCAN                 = 0xe3
	DLT_CHAOS                         = 0x5
	DLT_CISCO_IOS                     = 0x76
	DLT_C_HDLC                        = 0x68
	DLT_C_HDLC_WITH_DIR               = 0xcd
	DLT_DECT                          = 0xdd
	DLT_DOCSIS                        = 0x8f
	DLT_ECONET                        = 0x73
	DLT_EN10MB                        = 0x1
	DLT_EN3MB                         = 0x2
	DLT_ENC                           = 0x6d
	DLT_ERF                           = 0xc5
	DLT_ERF_ETH                       = 0xaf
	DLT_ERF_POS                       = 0xb0
	DLT_FC_2                          = 0xe0
	DLT_FC_2_WITH_FRAME_DELIMS        = 0xe1
	DLT_FDDI                          = 0xa
	DLT_FLEXRAY                       = 0xd2
	DLT_FRELAY                        = 0x6b
	DLT_FRELAY_WITH_DIR               = 0xce
	DLT_GCOM_SERIAL                   = 0xad
	DLT_GCOM_T1E1                     = 0xac
	DLT_GPF_F                         = 0xab
	DLT_GPF_T                         = 0xaa
	DLT_GPRS_LLC                      = 0xa9
	DLT_GSMTAP_ABIS                   = 0xda
	DLT_GSMTAP_UM                     = 0xd9
	DLT_HDLC                          = 0x10
	DLT_HHDLC                         = 0x79
	DLT_HIPPI                         = 0xf
	DLT_IBM_SN                        = 0x92
	DLT_IBM_SP                        = 0x91
	DLT_IEEE802                       = 0x6
	DLT_IEEE802_11                    = 0x69
	DLT_IEEE802_11_RADIO              = 0x7f
	DLT_IEEE802_11_RADIO_AVS          = 0xa3
	DLT_IEEE802_15_4                  = 0xc3
	DLT_IEEE802_15_4_LINUX            = 0xbf
	DLT_IEEE802_15_4_NONASK_PHY       = 0xd7
	DLT_IEEE802_16_MAC_CPS            = 0xbc
	DLT_IEEE802_16_MAC_CPS_RADIO      = 0xc1
	DLT_IPMB                          = 0xc7
	DLT_IPMB_LINUX                    = 0xd1
	DLT_IPNET                         = 0xe2
	DLT_IPV4                          = 0xe4
	DLT_IPV6                          = 0xe5
	DLT_IP_OVER_FC                    = 0x7a
	DLT_JUNIPER_ATM1                  = 0x89
	DLT_JUNIPER_ATM2                  = 0x87
	DLT_JUNIPER_CHDLC                 = 0xb5
	DLT_JUNIPER_ES                    = 0x84
	DLT_JUNIPER_ETHER                 = 0xb2
	DLT_JUNIPER_FRELAY                = 0xb4
	DLT_JUNIPER_GGSN                  = 0x85
	DLT_JUNIPER_ISM                   = 0xc2
	DLT_JUNIPER_MFR                   = 0x86
	DLT_JUNIPER_MLFR                  = 0x83
	DLT_JUNIPER_MLPPP                 = 0x82
	DLT_JUNIPER_MONITOR               = 0xa4
	DLT_JUNIPER_PIC_PEER              = 0xae
	DLT_JUNIPER_PPP                   = 0xb3
	DLT_JUNIPER_PPPOE                 = 0xa7
	DLT_JUNIPER_PPPOE_ATM             = 0xa8
	DLT_JUNIPER_SERVICES              = 0x88
	DLT_JUNIPER_ST                    = 0xc8
	DLT_JUNIPER_VP                    = 0xb7
	DLT_LAPB_WITH_DIR                 = 0xcf
	DLT_LAPD                          = 0xcb
	DLT_LIN                           = 0xd4
	DLT_LINUX_EVDEV                   = 0xd8
	DLT_LINUX_IRDA                    = 0x90
	DLT_LINUX_LAPD                    = 0xb1
	DLT_LINUX_SLL                     = 0x71
	DLT_LOOP                          = 0x6c
	DLT_LTALK                         = 0x72
	DLT_MFR                           = 0xb6
	DLT_MOST                          = 0xd3
	DLT_MPLS                          = 0xdb
	DLT_MTP2                          = 0x8c
	DLT_MTP2_WITH_PHDR                = 0x8b
	DLT_MTP3                          = 0x8d
	DLT_NULL                          = 0x0
	DLT_PCI_EXP                       = 0x7d
	DLT_PFLOG                         = 0x75
	DLT_PFSYNC                        = 0x12
	DLT_PPI                           = 0xc0
	DLT_PPP                           = 0x9
	DLT_PPP_BSDOS                     = 0xe
	DLT_PPP_ETHER                     = 0x33
	DLT_PPP_PPPD                      = 0xa6
	DLT_PPP_SERIAL                    = 0x32
	DLT_PPP_WITH_DIR                  = 0xcc
	DLT_PRISM_HEADER                  = 0x77
	DLT_PRONET                        = 0x4
	DLT_RAIF1                         = 0xc6
	DLT_RAW                           = 0xc
	DLT_RAWAF_MASK                    = 0x2240000
	DLT_RIO                           = 0x7c
	DLT_SCCP                          = 0x8e
	DLT_SITA                          = 0xc4
	DLT_SLIP                          = 0x8
	DLT_SLIP_BSDOS                    = 0xd
	DLT_SUNATM                        = 0x7b
	DLT_SYMANTEC_FIREWALL             = 0x63
	DLT_TZSP                          = 0x80
	DLT_USB                           = 0xba
	DLT_USB_LINUX                     = 0xbd
	DLT_USB_LINUX_MMAPPED             = 0xdc
	DLT_WIHART                        = 0xdf
	DLT_X2E_SERIAL                    = 0xd5
	DLT_X2E_XORAYA                    = 0xd6
	DT_BLK                            = 0x6
	DT_CHR                            = 0x2
	DT_DIR                            = 0x4
	DT_FIFO                           = 0x1
	DT_LNK                            = 0xa
	DT_REG                            = 0x8
	DT_SOCK                           = 0xc
	DT_UNKNOWN                        = 0x0
	DT_WHT                            = 0xe
	ECHO                              = 0x8
	ECHOCTL                           = 0x40
	ECHOE                             = 0x2
	ECHOK                             = 0x4
	ECHOKE                            = 0x1
	ECHONL                            = 0x10
	ECHOPRT                           = 0x20
	EMUL_LINUX                        = 0x1
	EMUL_LINUX32                      = 0x5
	EMUL_MAXID                        = 0x6
	ETHERCAP_JUMBO_MTU                = 0x4
	ETHERCAP_VLAN_HWTAGGING           = 0x2
	ETHERCAP_VLAN_MTU                 = 0x1
	ETHERMIN                          = 0x2e
	ETHERMTU                          = 0x5dc
	ETHERMTU_JUMBO                    = 0x2328
	ETHERTYPE_8023                    = 0x4
	ETHERTYPE_AARP                    = 0x80f3
	ETHERTYPE_ACCTON                  = 0x8390
	ETHERTYPE_AEONIC                  = 0x8036
	ETHERTYPE_ALPHA                   = 0x814a
	ETHERTYPE_AMBER                   = 0x6008
	ETHERTYPE_AMOEBA                  = 0x8145
	ETHERTYPE_APOLLO                  = 0x80f7
	ETHERTYPE_APOLLODOMAIN            = 0x8019
	ETHERTYPE_APPLETALK               = 0x809b
	ETHERTYPE_APPLITEK                = 0x80c7
	ETHERTYPE_ARGONAUT                = 0x803a
	ETHERTYPE_ARP                     = 0x806
	ETHERTYPE_AT                      = 0x809b
	ETHERTYPE_ATALK                   = 0x809b
	ETHERTYPE_ATOMIC                  = 0x86df
	ETHERTYPE_ATT                     = 0x8069
	ETHERTYPE_ATTSTANFORD             = 0x8008
	ETHERTYPE_AUTOPHON                = 0x806a
	ETHERTYPE_AXIS                    = 0x8856
	ETHERTYPE_BCLOOP                  = 0x9003
	ETHERTYPE_BOFL                    = 0x8102
	ETHERTYPE_CABLETRON               = 0x7034
	ETHERTYPE_CHAOS                   = 0x804
	ETHERTYPE_COMDESIGN               = 0x806c
	ETHERTYPE_COMPUGRAPHIC            = 0x806d
	ETHERTYPE_COUNTERPOINT            = 0x8062
	ETHERTYPE_CRONUS                  = 0x8004
	ETHERTYPE_CRONUSVLN               = 0x8003
	ETHERTYPE_DCA                     = 0x1234
	ETHERTYPE_DDE                     = 0x807b
	ETHERTYPE_DEBNI                   = 0xaaaa
	ETHERTYPE_DECAM                   = 0x8048
	ETHERTYPE_DECCUST                 = 0x6006
	ETHERTYPE_DECDIAG                 = 0x6005
	ETHERTYPE_DECDNS                  = 0x803c
	ETHERTYPE_DECDTS                  = 0x803e
	ETHERTYPE_DECEXPER                = 0x6000
	ETHERTYPE_DECLAST                 = 0x8041
	ETHERTYPE_DECLTM                  = 0x803f
	ETHERTYPE_DECMUMPS                = 0x6009
	ETHERTYPE_DECNETBIOS              = 0x8040
	ETHERTYPE_DELTACON                = 0x86de
	ETHERTYPE_DIDDLE                  = 0x4321
	ETHERTYPE_DLOG1                   = 0x660
	ETHERTYPE_DLOG2                   = 0x661
	ETHERTYPE_DN                      = 0x6003
	ETHERTYPE_DOGFIGHT                = 0x1989
	ETHERTYPE_DSMD                    = 0x8039
	ETHERTYPE_ECMA                    = 0x803
	ETHERTYPE_ENCRYPT                 = 0x803d
	ETHERTYPE_ES                      = 0x805d
	ETHERTYPE_EXCELAN                 = 0x8010
	ETHERTYPE_EXPERDATA               = 0x8049
	ETHERTYPE_FLIP                    = 0x8146
	ETHERTYPE_FLOWCONTROL             = 0x8808
	ETHERTYPE_FRARP                   = 0x808
	ETHERTYPE_GENDYN                  = 0x8068
	ETHERTYPE_HAYES                   = 0x8130
	ETHERTYPE_HIPPI_FP                = 0x8180
	ETHERTYPE_HITACHI                 = 0x8820
	ETHERTYPE_HP                      = 0x8005
	ETHERTYPE_IEEEPUP                 = 0xa00
	ETHERTYPE_IEEEPUPAT               = 0xa01
	ETHERTYPE_IMLBL                   = 0x4c42
	ETHERTYPE_IMLBLDIAG               = 0x424c
	ETHERTYPE_IP                      = 0x800
	ETHERTYPE_IPAS                    = 0x876c
	ETHERTYPE_IPV6                    = 0x86dd
	ETHERTYPE_IPX                     = 0x8137
	ETHERTYPE_IPXNEW                  = 0x8037
	ETHERTYPE_KALPANA                 = 0x8582
	ETHERTYPE_LANBRIDGE               = 0x8038
	ETHERTYPE_LANPROBE                = 0x8888
	ETHERTYPE_LAT                     = 0x6004
	ETHERTYPE_LBACK                   = 0x9000
	ETHERTYPE_LITTLE                  = 0x8060
	ETHERTYPE_LOGICRAFT               = 0x8148
	ETHERTYPE_LOOPBACK                = 0x9000
	ETHERTYPE_MATRA                   = 0x807a
	ETHERTYPE_MAX                     = 0xffff
	ETHERTYPE_MERIT                   = 0x807c
	ETHERTYPE_MICP                    = 0x873a
	ETHERTYPE_MOPDL                   = 0x6001
	ETHERTYPE_MOPRC                   = 0x6002
	ETHERTYPE_MOTOROLA                = 0x818d
	ETHERTYPE_MPLS                    = 0x8847
	ETHERTYPE_MPLS_MCAST              = 0x8848
	ETHERTYPE_MUMPS                   = 0x813f
	ETHERTYPE_NBPCC                   = 0x3c04
	ETHERTYPE_NBPCLAIM                = 0x3c09
	ETHERTYPE_NBPCLREQ                = 0x3c05
	ETHERTYPE_NBPCLRSP                = 0x3c06
	ETHERTYPE_NBPCREQ                 = 0x3c02
	ETHERTYPE_NBPCRSP                 = 0x3c03
	ETHERTYPE_NBPDG                   = 0x3c07
	ETHERTYPE_NBPDGB                  = 0x3c08
	ETHERTYPE_NBPDLTE                 = 0x3c0a
	ETHERTYPE_NBPRAR                  = 0x3c0c
	ETHERTYPE_NBPRAS                  = 0x3c0b
	ETHERTYPE_NBPRST                  = 0x3c0d
	ETHERTYPE_NBPSCD                  = 0x3c01
	ETHERTYPE_NBPVCD                  = 0x3c00
	ETHERTYPE_NBS                     = 0x802
	ETHERTYPE_NCD                     = 0x8149
	ETHERTYPE_NESTAR                  = 0x8006
	ETHERTYPE_NETBEUI                 = 0x8191
	ETHERTYPE_NOVELL                  = 0x8138
	ETHERTYPE_NS                      = 0x600
	ETHERTYPE_NSAT                    = 0x601
	ETHERTYPE_NSCOMPAT                = 0x807
	ETHERTYPE_NTRAILER                = 0x10
	ETHERTYPE_OS9                     = 0x7007
	ETHERTYPE_OS9NET                  = 0x7009
	ETHERTYPE_PACER                   = 0x80c6
	ETHERTYPE_PAE                     = 0x888e
	ETHERTYPE_PCS                     = 0x4242
	ETHERTYPE_PLANNING                = 0x8044
	ETHERTYPE_PPP                     = 0x880b
	ETHERTYPE_PPPOE                   = 0x8864
	ETHERTYPE_PPPOEDISC               = 0x8863
	ETHERTYPE_PRIMENTS                = 0x7031
	ETHERTYPE_PUP                     = 0x200
	ETHERTYPE_PUPAT                   = 0x200
	ETHERTYPE_RACAL                   = 0x7030
	ETHERTYPE_RATIONAL                = 0x8150
	ETHERTYPE_RAWFR                   = 0x6559
	ETHERTYPE_RCL                     = 0x1995
	ETHERTYPE_RDP                     = 0x8739
	ETHERTYPE_RETIX                   = 0x80f2
	ETHERTYPE_REVARP                  = 0x8035
	ETHERTYPE_SCA                     = 0x6007
	ETHERTYPE_SECTRA                  = 0x86db
	ETHERTYPE_SECUREDATA              = 0x876d
	ETHERTYPE_SGITW                   = 0x817e
	ETHERTYPE_SG_BOUNCE               = 0x8016
	ETHERTYPE_SG_DIAG                 = 0x8013
	ETHERTYPE_SG_NETGAMES             = 0x8014
	ETHERTYPE_SG_RESV                 = 0x8015
	ETHERTYPE_SIMNET                  = 0x5208
	ETHERTYPE_SLOWPROTOCOLS           = 0x8809
	ETHERTYPE_SNA                     = 0x80d5
	ETHERTYPE_SNMP                    = 0x814c
	ETHERTYPE_SONIX                   = 0xfaf5
	ETHERTYPE_SPIDER                  = 0x809f
	ETHERTYPE_SPRITE                  = 0x500
	ETHERTYPE_STP                     = 0x8181
	ETHERTYPE_TALARIS                 = 0x812b
	ETHERTYPE_TALARISMC               = 0x852b
	ETHERTYPE_TCPCOMP                 = 0x876b
	ETHERTYPE_TCPSM                   = 0x9002
	ETHERTYPE_TEC                     = 0x814f
	ETHERTYPE_TIGAN                   = 0x802f
	ETHERTYPE_TRAIL                   = 0x1000
	ETHERTYPE_TRANSETHER              = 0x6558
	ETHERTYPE_TYMSHARE                = 0x802e
	ETHERTYPE_UBBST                   = 0x7005
	ETHERTYPE_UBDEBUG                 = 0x900
	ETHERTYPE_UBDIAGLOOP              = 0x7002
	ETHERTYPE_UBDL                    = 0x7000
	ETHERTYPE_UBNIU                   = 0x7001
	ETHERTYPE_UBNMC                   = 0x7003
	ETHERTYPE_VALID                   = 0x1600
	ETHERTYPE_VARIAN                  = 0x80dd
	ETHERTYPE_VAXELN                  = 0x803b
	ETHERTYPE_VEECO                   = 0x8067
	ETHERTYPE_VEXP                    = 0x805b
	ETHERTYPE_VGLAB                   = 0x8131
	ETHERTYPE_VINES                   = 0xbad
	ETHERTYPE_VINESECHO               = 0xbaf
	ETHERTYPE_VINESLOOP               = 0xbae
	ETHERTYPE_VITAL                   = 0xff00
	ETHERTYPE_VLAN                    = 0x8100
	ETHERTYPE_VLTLMAN                 = 0x8080
	ETHERTYPE_VPROD                   = 0x805c
	ETHERTYPE_VURESERVED              = 0x8147
	ETHERTYPE_WATERLOO                = 0x8130
	ETHERTYPE_WELLFLEET               = 0x8103
	ETHERTYPE_X25                     = 0x805
	ETHERTYPE_X75                     = 0x801
	ETHERTYPE_XNSSM                   = 0x9001
	ETHERTYPE_XTP                     = 0x817d
	ETHER_ADDR_LEN                    = 0x6
	ETHER_CRC_LEN                     = 0x4
	ETHER_CRC_POLY_BE                 = 0x4c11db6
	ETHER_CRC_POLY_LE                 = 0xedb88320
	ETHER_HDR_LEN                     = 0xe
	ETHER_MAX_LEN                     = 0x5ee
	ETHER_MAX_LEN_JUMBO               = 0x233a
	ETHER_MIN_LEN                     = 0x40
	ETHER_PPPOE_ENCAP_LEN             = 0x8
	ETHER_TYPE_LEN                    = 0x2
	ETHER_VLAN_ENCAP_LEN              = 0x4
	EVFILT_AIO                        = 0x2
	EVFILT_PROC                       = 0x4
	EVFILT_READ                       = 0x0
	EVFILT_SIGNAL                     = 0x5
	EVFILT_SYSCOUNT                   = 0x7
	EVFILT_TIMER                      = 0x6
	EVFILT_VNODE                      = 0x3
	EVFILT_WRITE                      = 0x1
	EV_ADD                            = 0x1
	EV_CLEAR                          = 0x20
	EV_DELETE                         = 0x2
	EV_DISABLE                        = 0x8
	EV_ENABLE                         = 0x4
	EV_EOF                            = 0x8000
	EV_ERROR                          = 0x4000
	EV_FLAG1                          = 0x2000
	EV_ONESHOT                        = 0x10
	EV_SYSFLAGS                       = 0xf000
	EXTA                              = 0x4b00
	EXTATTR_CMD_START                 = 0x1
	EXTATTR_CMD_STOP                  = 0x2
	EXTATTR_NAMESPACE_SYSTEM          = 0x2
	EXTATTR_NAMESPACE_USER            = 0x1
	EXTB                              = 0x9600
	EXTPROC                           = 0x800
	FD_CLOEXEC                        = 0x1
	FD_SETSIZE                        = 0x100
	FLUSHO                            = 0x800000
	F_CLOSEM                          = 0xa
	F_DUPFD                           = 0x0
	F_DUPFD_CLOEXEC                   = 0xc
	F_FSCTL                           = -0x80000000
	F_FSDIRMASK                       = 0x70000000
	F_FSIN                            = 0x10000000
	F_FSINOUT                         = 0x30000000
	F_FSOUT                           = 0x20000000
	F_FSPRIV                          = 0x8000
	F_FSVOID                          = 0x40000000
	F_GETFD                           = 0x1
	F_GETFL                           = 0x3
	F_GETLK                           = 0x7
	F_GETNOSIGPIPE                    = 0xd
	F_GETOWN                          = 0x5
	F_MAXFD                           = 0xb
	F_OK                              = 0x0
	F_PARAM_MASK                      = 0xfff
	F_PARAM_MAX                       = 0xfff
	F_RDLCK                           = 0x1
	F_SETFD                           = 0x2
	F_SETFL                           = 0x4
	F_SETLK                           = 0x8
	F_SETLKW                          = 0x9
	F_SETNOSIGPIPE                    = 0xe
	F_SETOWN                          = 0x6
	F_UNLCK                           = 0x2
	F_WRLCK                           = 0x3
	HUPCL                             = 0x4000
	HW_MACHINE                        = 0x1
	ICANON                            = 0x100
	ICMP6_FILTER                      = 0x12
	ICRNL                             = 0x100
	IEXTEN                            = 0x400
	IFAN_ARRIVAL                      = 0x0
	IFAN_DEPARTURE                    = 0x1
	IFA_ROUTE                         = 0x1
	IFF_ALLMULTI                      = 0x200
	IFF_BROADCAST                     = 0x2
	IFF_CANTCHANGE                    = 0x8f52
	IFF_DEBUG                         = 0x4
	IFF_LINK0                         = 0x1000
	IFF_LINK1                         = 0x2000
	IFF_LINK2                         = 0x4000
	IFF_LOOPBACK                      = 0x8
	IFF_MULTICAST                     = 0x8000
	IFF_NOARP                         = 0x80
	IFF_NOTRAILERS                    = 0x20
	IFF_OACTIVE                       = 0x400
	IFF_POINTOPOINT                   = 0x10
	IFF_PROMISC                       = 0x100
	IFF_RUNNING                       = 0x40
	IFF_SIMPLEX                       = 0x800
	IFF_UP                            = 0x1
	IFNAMSIZ                          = 0x10
	IFT_1822                          = 0x2
	IFT_A12MPPSWITCH                  = 0x82
	IFT_AAL2                          = 0xbb
	IFT_AAL5                          = 0x31
	IFT_ADSL                          = 0x5e
	IFT_AFLANE8023                    = 0x3b
	IFT_AFLANE8025                    = 0x3c
	IFT_ARAP                          = 0x58
	IFT_ARCNET                        = 0x23
	IFT_ARCNETPLUS                    = 0x24
	IFT_ASYNC                         = 0x54
	IFT_ATM                           = 0x25
	IFT_ATMDXI                        = 0x69
	IFT_ATMFUNI                       = 0x6a
	IFT_ATMIMA                        = 0x6b
	IFT_ATMLOGICAL                    = 0x50
	IFT_ATMRADIO                      = 0xbd
	IFT_ATMSUBINTERFACE               = 0x86
	IFT_ATMVCIENDPT                   = 0xc2
	IFT_ATMVIRTUAL                    = 0x95
	IFT_BGPPOLICYACCOUNTING           = 0xa2
	IFT_BRIDGE                        = 0xd1
	IFT_BSC                           = 0x53
	IFT_CARP                          = 0xf8
	IFT_CCTEMUL                       = 0x3d
	IFT_CEPT                          = 0x13
	IFT_CES                           = 0x85
	IFT_CHANNEL                       = 0x46
	IFT_CNR                           = 0x55
	IFT_COFFEE                        = 0x84
	IFT_COMPOSITELINK                 = 0x9b
	IFT_DCN                           = 0x8d
	IFT_DIGITALPOWERLINE              = 0x8a
	IFT_DIGITALWRAPPEROVERHEADCHANNEL = 0xba
	IFT_DLSW                          = 0x4a
	IFT_DOCSCABLEDOWNSTREAM           = 0x80
	IFT_DOCSCABLEMACLAYER             = 0x7f
	IFT_DOCSCABLEUPSTREAM             = 0x81
	IFT_DOCSCABLEUPSTREAMCHANNEL      = 0xcd
	IFT_DS0                           = 0x51
	IFT_DS0BUNDLE                     = 0x52
	IFT_DS1FDL                        = 0xaa
	IFT_DS3                           = 0x1e
	IFT_DTM                           = 0x8c
	IFT_DVBASILN                      = 0xac
	IFT_DVBASIOUT                     = 0xad
	IFT_DVBRCCDOWNSTREAM              = 0x93
	IFT_DVBRCCMACLAYER                = 0x92
	IFT_DVBRCCUPSTREAM                = 0x94
	IFT_ECONET                        = 0xce
	IFT_EON                           = 0x19
	IFT_EPLRS                         = 0x57
	IFT_ESCON                         = 0x49
	IFT_ETHER                         = 0x6
	IFT_FAITH                         = 0xf2
	IFT_FAST                          = 0x7d
	IFT_FASTETHER                     = 0x3e
	IFT_FASTETHERFX                   = 0x45
	IFT_FDDI                          = 0xf
	IFT_FIBRECHANNEL                  = 0x38
	IFT_FRAMERELAYINTERCONNECT        = 0x3a
	IFT_FRAMERELAYMPI                 = 0x5c
	IFT_FRDLCIENDPT                   = 0xc1
	IFT_FRELAY                        = 0x20
	IFT_FRELAYDCE                     = 0x2c
	IFT_FRF16MFRBUNDLE                = 0xa3
	IFT_FRFORWARD                     = 0x9e
	IFT_G703AT2MB                     = 0x43
	IFT_G703AT64K                     = 0x42
	IFT_GIF                           = 0xf0
	IFT_GIGABITETHERNET               = 0x75
	IFT_GR303IDT                      = 0xb2
	IFT_GR303RDT                      = 0xb1
	IFT_H323GATEKEEPER                = 0xa4
	IFT_H323PROXY                     = 0xa5
	IFT_HDH1822                       = 0x3
	IFT_HDLC                          = 0x76
	IFT_HDSL2                         = 0xa8
	IFT_HIPERLAN2                     = 0xb7
	IFT_HIPPI                         = 0x2f
	IFT_HIPPIINTERFACE                = 0x39
	IFT_HOSTPAD                       = 0x5a
	IFT_HSSI                          = 0x2e
	IFT_HY                            = 0xe
	IFT_IBM370PARCHAN                 = 0x48
	IFT_IDSL                          = 0x9a
	IFT_IEEE1394                      = 0x90
	IFT_IEEE80211                     = 0x47
	IFT_IEEE80212                     = 0x37
	IFT_IEEE8023ADLAG                 = 0xa1
	IFT_IFGSN                         = 0x91
	IFT_IMT                           = 0xbe
	IFT_INFINIBAND                    = 0xc7
	IFT_INTERLEAVE                    = 0x7c
	IFT_IP                            = 0x7e
	IFT_IPFORWARD                     = 0x8e
	IFT_IPOVERATM                     = 0x72
	IFT_IPOVERCDLC                    = 0x6d
	IFT_IPOVERCLAW                    = 0x6e
	IFT_IPSWITCH                      = 0x4e
	IFT_ISDN                          = 0x3f
	IFT_ISDNBASIC                     = 0x14
	IFT_ISDNPRIMARY                   = 0x15
	IFT_ISDNS                         = 0x4b
	IFT_ISDNU                         = 0x4c
	IFT_ISO88022LLC                   = 0x29
	IFT_ISO88023                      = 0x7
	IFT_ISO88024                      = 0x8
	IFT_ISO88025                      = 0x9
	IFT_ISO88025CRFPINT               = 0x62
	IFT_ISO88025DTR                   = 0x56
	IFT_ISO88025FIBER                 = 0x73
	IFT_ISO88026                      = 0xa
	IFT_ISUP                          = 0xb3
	IFT_L2VLAN                        = 0x87
	IFT_L3IPVLAN                      = 0x88
	IFT_L3IPXVLAN                     = 0x89
	IFT_LAPB                          = 0x10
	IFT_LAPD                          = 0x4d
	IFT_LAPF                          = 0x77
	IFT_LINEGROUP                     = 0xd2
	IFT_LOCALTALK                     = 0x2a
	IFT_LOOP                          = 0x18
	IFT_MEDIAMAILOVERIP               = 0x8b
	IFT_MFSIGLINK                     = 0xa7
	IFT_MIOX25                        = 0x26
	IFT_MODEM                         = 0x30
	IFT_MPC                           = 0x71
	IFT_MPLS                          = 0xa6
	IFT_MPLSTUNNEL                    = 0x96
	IFT_MSDSL                         = 0x8f
	IFT_MVL                           = 0xbf
	IFT_MYRINET                       = 0x63
	IFT_NFAS                          = 0xaf
	IFT_NSIP                          = 0x1b
	IFT_OPTICALCHANNEL                = 0xc3
	IFT_OPTICALTRANSPORT              = 0xc4
	IFT_OTHER                         = 0x1
	IFT_P10                           = 0xc
	IFT_P80                           = 0xd
	IFT_PARA                          = 0x22
	IFT_PFLOG                         = 0xf5
	IFT_PFSYNC                        = 0xf6
	IFT_PLC                           = 0xae
	IFT_PON155                        = 0xcf
	IFT_PON622                        = 0xd0
	IFT_POS                           = 0xab
	IFT_PPP                           = 0x17
	IFT_PPPMULTILINKBUNDLE            = 0x6c
	IFT_PROPATM                       = 0xc5
	IFT_PROPBWAP2MP                   = 0xb8
	IFT_PROPCNLS                      = 0x59
	IFT_PROPDOCSWIRELESSDOWNSTREAM    = 0xb5
	IFT_PROPDOCSWIRELESSMACLAYER      = 0xb4
	IFT_PROPDOCSWIRELESSUPSTREAM      = 0xb6
	IFT_PROPMUX                       = 0x36
	IFT_PROPVIRTUAL                   = 0x35
	IFT_PROPWIRELESSP2P               = 0x9d
	IFT_PTPSERIAL                     = 0x16
	IFT_PVC                           = 0xf1
	IFT_Q2931                         = 0xc9
	IFT_QLLC                          = 0x44
	IFT_RADIOMAC                      = 0xbc
	IFT_RADSL                         = 0x5f
	IFT_REACHDSL                      = 0xc0
	IFT_RFC1483                       = 0x9f
	IFT_RS232                         = 0x21
	IFT_RSRB                          = 0x4f
	IFT_SDLC                          = 0x11
	IFT_SDSL                          = 0x60
	IFT_SHDSL                         = 0xa9
	IFT_SIP                           = 0x1f
	IFT_SIPSIG                        = 0xcc
	IFT_SIPTG                         = 0xcb
	IFT_SLIP                          = 0x1c
	IFT_SMDSDXI                       = 0x2b
	IFT_SMDSICIP                      = 0x34
	IFT_SONET                         = 0x27
	IFT_SONETOVERHEADCHANNEL          = 0xb9
	IFT_SONETPATH                     = 0x32
	IFT_SONETVT                       = 0x33
	IFT_SRP                           = 0x97
	IFT_SS7SIGLINK                    = 0x9c
	IFT_STACKTOSTACK                  = 0x6f
	IFT_STARLAN                       = 0xb
	IFT_STF                           = 0xd7
	IFT_T1                            = 0x12
	IFT_TDLC                          = 0x74
	IFT_TELINK                        = 0xc8
	IFT_TERMPAD                       = 0x5b
	IFT_TR008                         = 0xb0
	IFT_TRANSPHDLC                    = 0x7b
	IFT_TUNNEL                        = 0x83
	IFT_ULTRA                         = 0x1d
	IFT_USB                           = 0xa0
	IFT_V11                           = 0x40
	IFT_V35                           = 0x2d
	IFT_V36                           = 0x41
	IFT_V37                           = 0x78
	IFT_VDSL                          = 0x61
	IFT_VIRTUALIPADDRESS              = 0x70
	IFT_VIRTUALTG                     = 0xca
	IFT_VOICEDID                      = 0xd5
	IFT_VOICEEM                       = 0x64
	IFT_VOICEEMFGD                    = 0xd3
	IFT_VOICEENCAP                    = 0x67
	IFT_VOICEFGDEANA                  = 0xd4
	IFT_VOICEFXO                      = 0x65
	IFT_VOICEFXS                      = 0x66
	IFT_VOICEOVERATM                  = 0x98
	IFT_VOICEOVERCABLE                = 0xc6
	IFT_VOICEOVERFRAMERELAY           = 0x99
	IFT_VOICEOVERIP                   = 0x68
	IFT_X213                          = 0x5d
	IFT_X25                           = 0x5
	IFT_X25DDN                        = 0x4
	IFT_X25HUNTGROUP                  = 0x7a
	IFT_X25MLP                        = 0x79
	IFT_X25PLE                        = 0x28
	IFT_XETHER                        = 0x1a
	IGNBRK                            = 0x1
	IGNCR                             = 0x80
	IGNPAR                            = 0x4
	IMAXBEL                           = 0x2000
	INLCR                             = 0x40
	INPCK                             = 0x10
	IN_CLASSA_HOST                    = 0xffffff
	IN_CLASSA_MAX                     = 0x80
	IN_CLASSA_NET                     = 0xff000000
	IN_CLASSA_NSHIFT                  = 0x18
	IN_CLASSB_HOST                    = 0xffff
	IN_CLASSB_MAX                     = 0x10000
	IN_CLASSB_NET                     = 0xffff0000
	IN_CLASSB_NSHIFT                  = 0x10
	IN_CLASSC_HOST                    = 0xff
	IN_CLASSC_NET                     = 0xffffff00
	IN_CLASSC_NSHIFT                  = 0x8
	IN_CLASSD_HOST                    = 0xfffffff
	IN_CLASSD_NET                     = 0xf0000000
	IN_CLASSD_NSHIFT                  = 0x1c
	IN_LOOPBACKNET                    = 0x7f
	IPPROTO_AH                        = 0x33
	IPPROTO_CARP                      = 0x70
	IPPROTO_DONE                      = 0x101
	IPPROTO_DSTOPTS                   = 0x3c
	IPPROTO_EGP                       = 0x8
	IPPROTO_ENCAP                     = 0x62
	IPPROTO_EON                       = 0x50
	IPPROTO_ESP                       = 0x32
	IPPROTO_ETHERIP                   = 0x61
	IPPROTO_FRAGMENT                  = 0x2c
	IPPROTO_GGP                       = 0x3
	IPPROTO_GRE                       = 0x2f
	IPPROTO_HOPOPTS                   = 0x0
	IPPROTO_ICMP                      = 0x1
	IPPROTO_ICMPV6                    = 0x3a
	IPPROTO_IDP                       = 0x16
	IPPROTO_IGMP                      = 0x2
	IPPROTO_IP                        = 0x0
	IPPROTO_IPCOMP                    = 0x6c
	IPPROTO_IPIP                      = 0x4
	IPPROTO_IPV4                      = 0x4
	IPPROTO_IPV6                      = 0x29
	IPPROTO_IPV6_ICMP                 = 0x3a
	IPPROTO_MAX                       = 0x100
	IPPROTO_MAXID                     = 0x34
	IPPROTO_MOBILE                    = 0x37
	IPPROTO_NONE                      = 0x3b
	IPPROTO_PFSYNC                    = 0xf0
	IPPROTO_PIM                       = 0x67
	IPPROTO_PUP                       = 0xc
	IPPROTO_RAW                       = 0xff
	IPPROTO_ROUTING                   = 0x2b
	IPPROTO_RSVP                      = 0x2e
	IPPROTO_TCP                       = 0x6
	IPPROTO_TP                        = 0x1d
	IPPROTO_UDP                       = 0x11
	IPPROTO_VRRP                      = 0x70
	IPV6_CHECKSUM                     = 0x1a
	IPV6_DEFAULT_MULTICAST_HOPS       = 0x1
	IPV6_DEFAULT_MULTICAST_LOOP       = 0x1
	IPV6_DEFHLIM                      = 0x40
	IPV6_DONTFRAG                     = 0x3e
	IPV6_DSTOPTS                      = 0x32
	IPV6_FAITH                        = 0x1d
	IPV6_FLOWINFO_MASK                = 0xffffff0f
	IPV6_FLOWLABEL_MASK               = 0xffff0f00
	IPV6_FRAGTTL                      = 0x78
	IPV6_HLIMDEC                      = 0x1
	IPV6_HOPLIMIT                     = 0x2f
	IPV6_HOPOPTS                      = 0x31
	IPV6_IPSEC_POLICY                 = 0x1c
	IPV6_JOIN_GROUP                   = 0xc
	IPV6_LEAVE_GROUP                  = 0xd
	IPV6_MAXHLIM                      = 0xff
	IPV6_MAXPACKET                    = 0xffff
	IPV6_MMTU                         = 0x500
	IPV6_MULTICAST_HOPS               = 0xa
	IPV6_MULTICAST_IF                 = 0x9
	IPV6_MULTICAST_LOOP               = 0xb
	IPV6_NEXTHOP                      = 0x30
	IPV6_PATHMTU                      = 0x2c
	IPV6_PKTINFO                      = 0x2e
	IPV6_PORTRANGE                    = 0xe
	IPV6_PORTRANGE_DEFAULT            = 0x0
	IPV6_PORTRANGE_HIGH               = 0x1
	IPV6_PORTRANGE_LOW                = 0x2
	IPV6_RECVDSTOPTS                  = 0x28
	IPV6_RECVHOPLIMIT                 = 0x25
	IPV6_RECVHOPOPTS                  = 0x27
	IPV6_RECVPATHMTU                  = 0x2b
	IPV6_RECVPKTINFO                  = 0x24
	IPV6_RECVRTHDR                    = 0x26
	IPV6_RECVTCLASS                   = 0x39
	IPV6_RTHDR                        = 0x33
	IPV6_RTHDRDSTOPTS                 = 0x23
	IPV6_RTHDR_LOOSE                  = 0x0
	IPV6_RTHDR_STRICT                 = 0x1
	IPV6_RTHDR_TYPE_0                 = 0x0
	IPV6_SOCKOPT_RESERVED1            = 0x3
	IPV6_TCLASS                       = 0x3d
	IPV6_UNICAST_HOPS                 = 0x4
	IPV6_USE_MIN_MTU                  = 0x2a
	IPV6_V6ONLY                       = 0x1b
	IPV6_VERSION                      = 0x60
	IPV6_VERSION_MASK                 = 0xf0
	IP_ADD_MEMBERSHIP                 = 0xc
	IP_DEFAULT_MULTICAST_LOOP         = 0x1
	IP_DEFAULT_MULTICAST_TTL          = 0x1
	IP_DF                             = 0x4000
	IP_DROP_MEMBERSHIP                = 0xd
	IP_EF                             = 0x8000
	IP_ERRORMTU                       = 0x15
	IP_HDRINCL                        = 0x2
	IP_IPSEC_POLICY                   = 0x16
	IP_MAXPACKET                      = 0xffff
	IP_MAX_MEMBERSHIPS                = 0x14
	IP_MF                             = 0x2000
	IP_MINFRAGSIZE                    = 0x45
	IP_MINTTL                         = 0x18
	IP_MSS                            = 0x240
	IP_MULTICAST_IF                   = 0x9
	IP_MULTICAST_LOOP                 = 0xb
	IP_MULTICAST_TTL                  = 0xa
	IP_OFFMASK                        = 0x1fff
	IP_OPTIONS                        = 0x1
	IP_PORTRANGE                      = 0x13
	IP_PORTRANGE_DEFAULT              = 0x0
	IP_PORTRANGE_HIGH                 = 0x1
	IP_PORTRANGE_LOW                  = 0x2
	IP_RECVDSTADDR                    = 0x7
	IP_RECVIF                         = 0x14
	IP_RECVOPTS                       = 0x5
	IP_RECVRETOPTS                    = 0x6
	IP_RECVTTL                        = 0x17
	IP_RETOPTS                        = 0x8
	IP_RF                             = 0x8000
	IP_TOS                            = 0x3
	IP_TTL                            = 0x4
	ISIG                              = 0x80
	ISTRIP                            = 0x20
	IXANY                             = 0x800
	IXOFF                             = 0x400
	IXON                              = 0x200
	KERN_HOSTNAME                     = 0xa
	KERN_OSRELEASE                    = 0x2
	KERN_OSTYPE                       = 0x1
	KERN_VERSION                      = 0x4
	LOCK_EX                           = 0x2
	LOCK_NB                           = 0x4
	LOCK_SH                           = 0x1
	LOCK_UN                           = 0x8
	MADV_DONTNEED                     = 0x4
	MADV_FREE                         = 0x6
	MADV_NORMAL                       = 0x0
	MADV_RANDOM                       = 0x1
	MADV_SEQUENTIAL                   = 0x2
	MADV_SPACEAVAIL                   = 0x5
	MADV_WILLNEED                     = 0x3
	MAP_ALIGNMENT_16MB                = 0x18000000
	MAP_ALIGNMENT_1TB                 = 0x28000000
	MAP_ALIGNMENT_256TB               = 0x30000000
	MAP_ALIGNMENT_4GB                 = 0x20000000
	MAP_ALIGNMENT_64KB                = 0x10000000
	MAP_ALIGNMENT_64PB                = 0x38000000
	MAP_ALIGNMENT_MASK                = -0x1000000
	MAP_ALIGNMENT_SHIFT               = 0x18
	MAP_ANON                          = 0x1000
	MAP_FILE                          = 0x0
	MAP_FIXED                         = 0x10
	MAP_HASSEMAPHORE                  = 0x200
	MAP_INHERIT                       = 0x80
	MAP_INHERIT_COPY                  = 0x1
	MAP_INHERIT_DEFAULT               = 0x1
	MAP_INHERIT_DONATE_COPY           = 0x3
	MAP_INHERIT_NONE                  = 0x2
	MAP_INHERIT_SHARE                 = 0x0
	MAP_NORESERVE                     = 0x40
	MAP_PRIVATE                       = 0x2
	MAP_RENAME                        = 0x20
	MAP_SHARED                        = 0x1
	MAP_STACK                         = 0x2000
	MAP_TRYFIXED                      = 0x400
	MAP_WIRED                         = 0x800
	MCL_CURRENT                       = 0x1
	MCL_FUTURE                        = 0x2
	MNT_ASYNC                         = 0x40
	MNT_BASIC_FLAGS                   = 0xe782807f
	MNT_DEFEXPORTED                   = 0x200
	MNT_DISCARD                       = 0x800000
	MNT_EXKERB                        = 0x800
	MNT_EXNORESPORT                   = 0x8000000
	MNT_EXPORTANON                    = 0x400
	MNT_EXPORTED                      = 0x100
	MNT_EXPUBLIC                      = 0x10000000
	MNT_EXRDONLY                      = 0x80
	MNT_EXTATTR                       = 0x1000000
	MNT_FORCE                         = 0x80000
	MNT_GETARGS                       = 0x400000
	MNT_IGNORE                        = 0x100000
	MNT_LAZY                          = 0x3
	MNT_LOCAL                         = 0x1000
	MNT_LOG                           = 0x2000000
	MNT_NOATIME                       = 0x4000000
	MNT_NOCOREDUMP                    = 0x8000
	MNT_NODEV                         = 0x10
	MNT_NODEVMTIME                    = 0x40000000
	MNT_NOEXEC                        = 0x4
	MNT_NOSUID                        = 0x8
	MNT_NOWAIT                        = 0x2
	MNT_OP_FLAGS                      = 0x4d0000
	MNT_QUOTA                         = 0x2000
	MNT_RDONLY                        = 0x1
	MNT_RELATIME                      = 0x20000
	MNT_RELOAD                        = 0x40000
	MNT_ROOTFS                        = 0x4000
	MNT_SOFTDEP                       = 0x80000000
	MNT_SYMPERM                       = 0x20000000
	MNT_SYNCHRONOUS                   = 0x2
	MNT_UNION                         = 0x20
	MNT_UPDATE                        = 0x10000
	MNT_VISFLAGMASK                   = 0xff90ffff
	MNT_WAIT                          = 0x1
	MSG_BCAST                         = 0x100
	MSG_CMSG_CLOEXEC                  = 0x800
	MSG_CONTROLMBUF                   = 0x2000000
	MSG_CTRUNC                        = 0x20
	MSG_DONTROUTE                     = 0x4
	MSG_DONTWAIT                      = 0x80
	MSG_EOR                           = 0x8
	MSG_IOVUSRSPACE                   = 0x4000000
	MSG_LENUSRSPACE                   = 0x8000000
	MSG_MCAST                         = 0x200
	MSG_NAMEMBUF                      = 0x1000000
	MSG_NBIO                          = 0x1000
	MSG_NOSIGNAL                      = 0x400
	MSG_OOB                           = 0x1
	MSG_PEEK                          = 0x2
	MSG_TRUNC                         = 0x10
	MSG_USERFLAGS                     = 0xffffff
	MSG_WAITALL                       = 0x40
	MS_ASYNC                          = 0x1
	MS_INVALIDATE                     = 0x2
	MS_SYNC                           = 0x4
	NAME_MAX                          = 0x1ff
	NET_RT_DUMP                       = 0x1
	NET_RT_FLAGS                      = 0x2
	NET_RT_IFLIST                     = 0x5
	NET_RT_MAXID                      = 0x6
	NET_RT_OIFLIST                    = 0x4
	NET_RT_OOIFLIST                   = 0x3
	NOFLSH                            = 0x80000000
	NOTE_ATTRIB                       = 0x8
	NOTE_CHILD                        = 0x4
	NOTE_DELETE                       = 0x1
	NOTE_EXEC                         = 0x20000000
	NOTE_EXIT                         = 0x80000000
	NOTE_EXTEND                       = 0x4
	NOTE_FORK                         = 0x40000000
	NOTE_LINK                         = 0x10
	NOTE_LOWAT                        = 0x1
	NOTE_PCTRLMASK                    = 0xf0000000
	NOTE_PDATAMASK                    = 0xfffff
	NOTE_RENAME                       = 0x20
	NOTE_REVOKE                       = 0x40
	NOTE_TRACK                        = 0x1
	NOTE_TRACKERR                     = 0x2
	NOTE_WRITE                        = 0x2
	OCRNL                             = 0x10
	OFIOGETBMAP                       = 0xc004667a
	ONLCR                             = 0x2
	ONLRET                            = 0x40
	ONOCR                             = 0x20
	ONOEOT                            = 0x8
	OPOST                             = 0x1
	O_ACCMODE                         = 0x3
	O_ALT_IO                          = 0x40000
	O_APPEND                          = 0x8
	O_ASYNC                           = 0x40
	O_CLOEXEC                         = 0x400000
	O_CREAT                           = 0x200
	O_DIRECT                          = 0x80000
	O_DIRECTORY                       = 0x200000
	O_DSYNC                           = 0x10000
	O_EXCL                            = 0x800
	O_EXLOCK                          = 0x20
	O_FSYNC                           = 0x80
	O_NDELAY                          = 0x4
	O_NOCTTY                          = 0x8000
	O_NOFOLLOW                        = 0x100
	O_NONBLOCK                        = 0x4
	O_NOSIGPIPE                       = 0x1000000
	O_RDONLY                          = 0x0
	O_RDWR                            = 0x2
	O_RSYNC                           = 0x20000
	O_SHLOCK                          = 0x10
	O_SYNC                            = 0x80
	O_TRUNC                           = 0x400
	O_WRONLY                          = 0x1
	PARENB                            = 0x1000
	PARMRK                            = 0x8
	PARODD                            = 0x2000
	PENDIN                            = 0x20000000
	PRIO_PGRP                         = 0x1
	PRIO_PROCESS                      = 0x0
	PRIO_USER                         = 0x2
	PRI_IOFLUSH                       = 0x7c
	PROT_EXEC                         = 0x4
	PROT_NONE                         = 0x0
	PROT_READ                         = 0x1
	PROT_WRITE                        = 0x2
	RLIMIT_AS                         = 0xa
	RLIMIT_CORE                       = 0x4
	RLIMIT_CPU                        = 0x0
	RLIMIT_DATA                       = 0x2
	RLIMIT_FSIZE                      = 0x1
	RLIMIT_MEMLOCK                    = 0x6
	RLIMIT_NOFILE                     = 0x8
	RLIMIT_NPROC                      = 0x7
	RLIMIT_RSS                        = 0x5
	RLIMIT_STACK                      = 0x3
	RLIM_INFINITY                     = 0x7fffffffffffffff
	RTAX_AUTHOR                       = 0x6
	RTAX_BRD                          = 0x7
	RTAX_DST                          = 0x0
	RTAX_GATEWAY                      = 0x1
	RTAX_GENMASK                      = 0x3
	RTAX_IFA                          = 0x5
	RTAX_IFP                          = 0x4
	RTAX_MAX                          = 0x9
	RTAX_NETMASK                      = 0x2
	RTAX_TAG                          = 0x8
	RTA_AUTHOR                        = 0x40
	RTA_BRD                           = 0x80
	RTA_DST                           = 0x1
	RTA_GATEWAY                       = 0x2
	RTA_GENMASK                       = 0x8
	RTA_IFA                           = 0x20
	RTA_IFP                           = 0x10
	RTA_NETMASK                       = 0x4
	RTA_TAG                           = 0x100
	RTF_ANNOUNCE                      = 0x20000
	RTF_BLACKHOLE                     = 0x1000
	RTF_CLONED                        = 0x2000
	RTF_CLONING                       = 0x100
	RTF_DONE                          = 0x40
	RTF_DYNAMIC                       = 0x10
	RTF_GATEWAY                       = 0x2
	RTF_HOST                          = 0x4
	RTF_LLINFO                        = 0x400
	RTF_MASK                          = 0x80
	RTF_MODIFIED                      = 0x20
	RTF_PROTO1                        = 0x8000
	RTF_PROTO2                        = 0x4000
	RTF_REJECT                        = 0x8
	RTF_SRC                           = 0x10000
	RTF_STATIC                        = 0x800
	RTF_UP                            = 0x1
	RTF_XRESOLVE                      = 0x200
	RTM_ADD                           = 0x1
	RTM_CHANGE                        = 0x3
	RTM_CHGADDR                       = 0x15
	RTM_DELADDR                       = 0xd
	RTM_DELETE                        = 0x2
	RTM_GET                           = 0x4
	RTM_IEEE80211                     = 0x11
	RTM_IFANNOUNCE                    = 0x10
	RTM_IFINFO                        = 0x14
	RTM_LLINFO_UPD                    = 0x13
	RTM_LOCK                          = 0x8
	RTM_LOSING                        = 0x5
	RTM_MISS                          = 0x7
	RTM_NEWADDR                       = 0xc
	RTM_OIFINFO                       = 0xf
	RTM_OLDADD                        = 0x9
	RTM_OLDDEL                        = 0xa
	RTM_OOIFINFO                      = 0xe
	RTM_REDIRECT                      = 0x6
	RTM_RESOLVE                       = 0xb
	RTM_RTTUNIT                       = 0xf4240
	RTM_SETGATE                       = 0x12
	RTM_VERSION                       = 0x4
	RTV_EXPIRE                        = 0x4
	RTV_HOPCOUNT                      = 0x2
	RTV_MTU                           = 0x1
	RTV_RPIPE                         = 0x8
	RTV_RTT                           = 0x40
	RTV_RTTVAR                        = 0x80
	RTV_SPIPE                         = 0x10
	RTV_SSTHRESH                      = 0x20
	RUSAGE_CHILDREN                   = -0x1
	RUSAGE_SELF                       = 0x0
	SCM_CREDS                         = 0x4
	SCM_RIGHTS                        = 0x1
	SCM_TIMESTAMP                     = 0x8
	SHUT_RD                           = 0x0
	SHUT_RDWR                         = 0x2
	SHUT_WR                           = 0x1
	SIOCADDMULTI                      = 0x80906931
	SIOCADDRT                         = 0x8038720a
	SIOCAIFADDR                       = 0x8040691a
	SIOCALIFADDR                      = 0x8118691c
	SIOCATMARK                        = 0x40047307
	SIOCDELMULTI                      = 0x80906932
	SIOCDELRT                         = 0x8038720b
	SIOCDIFADDR                       = 0x80906919
	SIOCDIFPHYADDR                    = 0x80906949
	SIOCDLIFADDR                      = 0x8118691e
	SIOCGDRVSPEC                      = 0xc028697b
	SIOCGETPFSYNC                     = 0xc09069f8
	SIOCGETSGCNT                      = 0xc0207534
	SIOCGETVIFCNT                     = 0xc0287533
	SIOCGHIWAT                        = 0x40047301
	SIOCGIFADDR                       = 0xc0906921
	SIOCGIFADDRPREF                   = 0xc0986920
	SIOCGIFALIAS                      = 0xc040691b
	SIOCGIFBRDADDR                    = 0xc0906923
	SIOCGIFCAP                        = 0xc0206976
	SIOCGIFCONF                       = 0xc0106926
	SIOCGIFDATA                       = 0xc0986985
	SIOCGIFDLT                        = 0xc0906977
	SIOCGIFDSTADDR                    = 0xc0906922
	SIOCGIFFLAGS                      = 0xc0906911
	SIOCGIFGENERIC                    = 0xc090693a
	SIOCGIFMEDIA                      = 0xc0306936
	SIOCGIFMETRIC                     = 0xc0906917
	SIOCGIFMTU                        = 0xc090697e
	SIOCGIFNETMASK                    = 0xc0906925
	SIOCGIFPDSTADDR                   = 0xc0906948
	SIOCGIFPSRCADDR                   = 0xc0906947
	SIOCGLIFADDR                      = 0xc118691d
	SIOCGLIFPHYADDR                   = 0xc118694b
	SIOCGLINKSTR                      = 0xc0286987
	SIOCGLOWAT                        = 0x40047303
	SIOCGPGRP                         = 0x40047309
	SIOCGVH                           = 0xc0906983
	SIOCIFCREATE                      = 0x8090697a
	SIOCIFDESTROY                     = 0x80906979
	SIOCIFGCLONERS                    = 0xc0106978
	SIOCINITIFADDR                    = 0xc0706984
	SIOCSDRVSPEC                      = 0x8028697b
	SIOCSETPFSYNC                     = 0x809069f7
	SIOCSHIWAT                        = 0x80047300
	SIOCSIFADDR                       = 0x8090690c
	SIOCSIFADDRPREF                   = 0x8098691f
	SIOCSIFBRDADDR                    = 0x80906913
	SIOCSIFCAP                        = 0x80206975
	SIOCSIFDSTADDR                    = 0x8090690e
	SIOCSIFFLAGS                      = 0x80906910
	SIOCSIFGENERIC                    = 0x80906939
	SIOCSIFMEDIA                      = 0xc0906935
	SIOCSIFMETRIC                     = 0x80906918
	SIOCSIFMTU                        = 0x8090697f
	SIOCSIFNETMASK                    = 0x80906916
	SIOCSIFPHYADDR                    = 0x80406946
	SIOCSLIFPHYADDR                   = 0x8118694a
	SIOCSLINKSTR                      = 0x80286988
	SIOCSLOWAT                        = 0x80047302
	SIOCSPGRP                         = 0x80047308
	SIOCSVH                           = 0xc0906982
	SIOCZIFDATA                       = 0xc0986986
	SOCK_CLOEXEC                      = 0x10000000
	SOCK_DGRAM                        = 0x2
	SOCK_FLAGS_MASK                   = 0xf0000000
	SOCK_NONBLOCK                     = 0x20000000
	SOCK_NOSIGPIPE                    = 0x40000000
	SOCK_RAW                          = 0x3
	SOCK_RDM                          = 0x4
	SOCK_SEQPACKET                    = 0x5
	SOCK_STREAM                       = 0x1
	SOL_SOCKET                        = 0xffff
	SOMAXCONN                         = 0x80
	SO_ACCEPTCONN                     = 0x2
	SO_ACCEPTFILTER                   = 0x1000
	SO_BROADCAST                      = 0x20
	SO_DEBUG                          = 0x1
	SO_DONTROUTE                      = 0x10
	SO_ERROR                          = 0x1007
	SO_KEEPALIVE                      = 0x8
	SO_LINGER                         = 0x80
	SO_NOHEADER                       = 0x100a
	SO_NOSIGPIPE                      = 0x800
	SO_OOBINLINE                      = 0x100
	SO_OVERFLOWED                     = 0x1009
	SO_RCVBUF                         = 0x1002
	SO_RCVLOWAT                       = 0x1004
	SO_RCVTIMEO                       = 0x100c
	SO_REUSEADDR                      = 0x4
	SO_REUSEPORT                      = 0x200
	SO_SNDBUF                         = 0x1001
	SO_SNDLOWAT                       = 0x1003
	SO_SNDTIMEO                       = 0x100b
	SO_TIMESTAMP                      = 0x2000
	SO_TYPE                           = 0x1008
	SO_USELOOPBACK                    = 0x40
	SYSCTL_VERSION                    = 0x1000000
	SYSCTL_VERS_0                     = 0x0
	SYSCTL_VERS_1                     = 0x1000000
	SYSCTL_VERS_MASK                  = 0xff000000
	S_ARCH1                           = 0x10000
	S_ARCH2                           = 0x20000
	S_BLKSIZE                         = 0x200
	S_IEXEC                           = 0x40
	S_IFBLK                           = 0x6000
	S_IFCHR                           = 0x2000
	S_IFDIR                           = 0x4000
	S_IFIFO                           = 0x1000
	S_IFLNK                           = 0xa000
	S_IFMT                            = 0xf000
	S_IFREG                           = 0x8000
	S_IFSOCK                          = 0xc000
	S_IFWHT                           = 0xe000
	S_IREAD                           = 0x100
	S_IRGRP                           = 0x20
	S_IROTH                           = 0x4
	S_IRUSR                           = 0x100
	S_IRWXG                           = 0x38
	S_IRWXO                           = 0x7
	S_IRWXU                           = 0x1c0
	S_ISGID                           = 0x400
	S_ISTXT                           = 0x200
	S_ISUID                           = 0x800
	S_ISVTX                           = 0x200
	S_IWGRP                           = 0x10
	S_IWOTH                           = 0x2
	S_IWRITE                          = 0x80
	S_IWUSR                           = 0x80
	S_IXGRP                           = 0x8
	S_IXOTH                           = 0x1
	S_IXUSR                           = 0x40
	S_LOGIN_SET                       = 0x1
	TCIFLUSH                          = 0x1
	TCIOFLUSH                         = 0x3
	TCOFLUSH                          = 0x2
	TCP_CONGCTL                       = 0x20
	TCP_KEEPCNT                       = 0x6
	TCP_KEEPIDLE                      = 0x3
	TCP_KEEPINIT                      = 0x7
	TCP_KEEPINTVL                     = 0x5
	TCP_MAXBURST                      = 0x4
	TCP_MAXSEG                        = 0x2
	TCP_MAXWIN                        = 0xffff
	TCP_MAX_WINSHIFT                  = 0xe
	TCP_MD5SIG                        = 0x10
	TCP_MINMSS                        = 0xd8
	TCP_MSS                           = 0x218
	TCP_NODELAY                       = 0x1
	TCSAFLUSH                         = 0x2
	TIOCCBRK                          = 0x2000747a
	TIOCCDTR                          = 0x20007478
	TIOCCONS                          = 0x80047462
	TIOCDCDTIMESTAMP                  = 0x40107458
	TIOCDRAIN                         = 0x2000745e
	TIOCEXCL                          = 0x2000740d
	TIOCEXT                           = 0x80047460
	TIOCFLAG_CDTRCTS                  = 0x10
	TIOCFLAG_CLOCAL                   = 0x2
	TIOCFLAG_CRTSCTS                  = 0x4
	TIOCFLAG_MDMBUF                   = 0x8
	TIOCFLAG_SOFTCAR                  = 0x1
	TIOCFLUSH                         = 0x80047410
	TIOCGETA                          = 0x402c7413
	TIOCGETD                          = 0x4004741a
	TIOCGFLAGS                        = 0x4004745d
	TIOCGLINED                        = 0x40207442
	TIOCGPGRP                         = 0x40047477
	TIOCGQSIZE                        = 0x40047481
	TIOCGRANTPT                       = 0x20007447
	TIOCGSID                          = 0x40047463
	TIOCGSIZE                         = 0x40087468
	TIOCGWINSZ                        = 0x40087468
	TIOCMBIC                          = 0x8004746b
	TIOCMBIS                          = 0x8004746c
	TIOCMGET                          = 0x4004746a
	TIOCMSET                          = 0x8004746d
	TIOCM_CAR                         = 0x40
	TIOCM_CD                          = 0x40
	TIOCM_CTS                         = 0x20
	TIOCM_DSR                         = 0x100
	TIOCM_DTR                         = 0x2
	TIOCM_LE                          = 0x1
	TIOCM_RI                          = 0x80
	TIOCM_RNG                         = 0x80
	TIOCM_RTS                         = 0x4
	TIOCM_SR                          = 0x10
	TIOCM_ST                          = 0x8
	TIOCNOTTY                         = 0x20007471
	TIOCNXCL                          = 0x2000740e
	TIOCOUTQ                          = 0x40047473
	TIOCPKT                           = 0x80047470
	TIOCPKT_DATA                      = 0x0
	TIOCPKT_DOSTOP                    = 0x20
	TIOCPKT_FLUSHREAD                 = 0x1
	TIOCPKT_FLUSHWRITE                = 0x2
	TIOCPKT_IOCTL                     = 0x40
	TIOCPKT_NOSTOP                    = 0x10
	TIOCPKT_START                     = 0x8
	TIOCPKT_STOP                      = 0x4
	TIOCPTMGET                        = 0x40287446
	TIOCPTSNAME                       = 0x40287448
	TIOCRCVFRAME                      = 0x80087445
	TIOCREMOTE                        = 0x80047469
	TIOCSBRK                          = 0x2000747b
	TIOCSCTTY                         = 0x20007461
	TIOCSDTR                          = 0x20007479
	TIOCSETA                          = 0x802c7414
	TIOCSETAF                         = 0x802c7416
	TIOCSETAW                         = 0x802c7415
	TIOCSETD                          = 0x8004741b
	TIOCSFLAGS                        = 0x8004745c
	TIOCSIG                           = 0x2000745f
	TIOCSLINED                        = 0x80207443
	TIOCSPGRP                         = 0x80047476
	TIOCSQSIZE                        = 0x80047480
	TIOCSSIZE                         = 0x80087467
	TIOCSTART                         = 0x2000746e
	TIOCSTAT                          = 0x80047465
	TIOCSTI                           = 0x80017472
	TIOCSTOP                          = 0x2000746f
	TIOCSWINSZ                        = 0x80087467
	TIOCUCNTL                         = 0x80047466
	TIOCXMTFRAME                      = 0x80087444
	TOSTOP                            = 0x400000
	VDISCARD                          = 0xf
	VDSUSP                            = 0xb
	VEOF                              = 0x0
	VEOL                              = 0x1
	VEOL2                             = 0x2
	VERASE                            = 0x3
	VINTR                             = 0x8
	VKILL                             = 0x5
	VLNEXT                            = 0xe
	VMIN                              = 0x10
	VQUIT                             = 0x9
	VREPRINT                          = 0x6
	VSTART                            = 0xc
	VSTATUS                           = 0x12
	VSTOP                             = 0xd
	VSUSP                             = 0xa
	VTIME                             = 0x11
	VWERASE                           = 0x4
	WALL                              = 0x8
	WALLSIG                           = 0x8
	WALTSIG                           = 0x4
	WCLONE                            = 0x4
	WCOREFLAG                         = 0x80
	WNOHANG                           = 0x1
	WNOWAIT                           = 0x10000
	WNOZOMBIE                         = 0x20000
	WOPTSCHECKED                      = 0x40000
	WSTOPPED                          = 0x7f
	WUNTRACED                         = 0x2
)

// Errors
const (
	E2BIG           = syscall.Errno(0x7)
	EACCES          = syscall.Errno(0xd)
	EADDRINUSE      = syscall.Errno(0x30)
	EADDRNOTAVAIL   = syscall.Errno(0x31)
	EAFNOSUPPORT    = syscall.Errno(0x2f)
	EAGAIN          = syscall.Errno(0x23)
	EALREADY        = syscall.Errno(0x25)
	EAUTH           = syscall.Errno(0x50)
	EBADF           = syscall.Errno(0x9)
	EBADMSG         = syscall.Errno(0x58)
	EBADRPC         = syscall.Errno(0x48)
	EBUSY           = syscall.Errno(0x10)
	ECANCELED       = syscall.Errno(0x57)
	ECHILD          = syscall.Errno(0xa)
	ECONNABORTED    = syscall.Errno(0x35)
	ECONNREFUSED    = syscall.Errno(0x3d)
	ECONNRESET      = syscall.Errno(0x36)
	EDEADLK         = syscall.Errno(0xb)
	EDESTADDRREQ    = syscall.Errno(0x27)
	EDOM            = syscall.Errno(0x21)
	EDQUOT          = syscall.Errno(0x45)
	EEXIST          = syscall.Errno(0x11)
	EFAULT          = syscall.Errno(0xe)
	EFBIG           = syscall.Errno(0x1b)
	EFTYPE          = syscall.Errno(0x4f)
	EHOSTDOWN       = syscall.Errno(0x40)
	EHOSTUNREACH    = syscall.Errno(0x41)
	EIDRM           = syscall.Errno(0x52)
	EILSEQ          = syscall.Errno(0x55)
	EINPROGRESS     = syscall.Errno(0x24)
	EINTR           = syscall.Errno(0x4)
	EINVAL          = syscall.Errno(0x16)
	EIO             = syscall.Errno(0x5)
	EISCONN         = syscall.Errno(0x38)
	EISDIR          = syscall.Errno(0x15)
	ELAST           = syscall.Errno(0x60)
	ELOOP           = syscall.Errno(0x3e)
	EMFILE          = syscall.Errno(0x18)
	EMLINK          = syscall.Errno(0x1f)
	EMSGSIZE        = syscall.Errno(0x28)
	EMULTIHOP       = syscall.Errno(0x5e)
	ENAMETOOLONG    = syscall.Errno(0x3f)
	ENEEDAUTH       = syscall.Errno(0x51)
	ENETDOWN        = syscall.Errno(0x32)
	ENETRESET       = syscall.Errno(0x34)
	ENETUNREACH     = syscall.Errno(0x33)
	ENFILE          = syscall.Errno(0x17)
	ENOATTR         = syscall.Errno(0x5d)
	ENOBUFS         = syscall.Errno(0x37)
	ENODATA         = syscall.Errno(0x59)
	ENODEV          = syscall.Errno(0x13)
	ENOENT          = syscall.Errno(0x2)
	ENOEXEC         = syscall.Errno(0x8)
	ENOLCK          = syscall.Errno(0x4d)
	ENOLINK         = syscall.Errno(0x5f)
	ENOMEM          = syscall.Errno(0xc)
	ENOMSG          = syscall.Errno(0x53)
	ENOPROTOOPT     = syscall.Errno(0x2a)
	ENOSPC          = syscall.Errno(0x1c)
	ENOSR           = syscall.Errno(0x5a)
	ENOSTR          = syscall.Errno(0x5b)
	ENOSYS          = syscall.Errno(0x4e)
	ENOTBLK         = syscall.Errno(0xf)
	ENOTCONN        = syscall.Errno(0x39)
	ENOTDIR         = syscall.Errno(0x14)
	ENOTEMPTY       = syscall.Errno(0x42)
	ENOTSOCK        = syscall.Errno(0x26)
	ENOTSUP         = syscall.Errno(0x56)
	ENOTTY          = syscall.Errno(0x19)
	ENXIO           = syscall.Errno(0x6)
	EOPNOTSUPP      = syscall.Errno(0x2d)
	EOVERFLOW       = syscall.Errno(0x54)
	EPERM           = syscall.Errno(0x1)
	EPFNOSUPPORT    = syscall.Errno(0x2e)
	EPIPE           = syscall.Errno(0x20)
	EPROCLIM        = syscall.Errno(0x43)
	EPROCUNAVAIL    = syscall.Errno(0x4c)
	EPROGMISMATCH   = syscall.Errno(0x4b)
	EPROGUNAVAIL    = syscall.Errno(0x4a)
	EPROTO          = syscall.Errno(0x60)
	EPROTONOSUPPORT = syscall.Errno(0x2b)
	EPROTOTYPE      = syscall.Errno(0x29)
	ERANGE          = syscall.Errno(0x22)
	EREMOTE         = syscall.Errno(0x47)
	EROFS           = syscall.Errno(0x1e)
	ERPCMISMATCH    = syscall.Errno(0x49)
	ESHUTDOWN       = syscall.Errno(0x3a)
	ESOCKTNOSUPPORT = syscall.Errno(0x2c)
	ESPIPE          = syscall.Errno(0x1d)
	ESRCH           = syscall.Errno(0x3)
	ESTALE          = syscall.Errno(0x46)
	ETIME           = syscall.Errno(0x5c)
	ETIMEDOUT       = syscall.Errno(0x3c)
	ETOOMANYREFS    = syscall.Errno(0x3b)
	ETXTBSY         = syscall.Errno(0x1a)
	EUSERS          = syscall.Errno(0x44)
	EWOULDBLOCK     = syscall.Errno(0x23)
	EXDEV           = syscall.Errno(0x12)
)

// Signals
const (
	SIGABRT   = syscall.Signal(0x6)
	SIGALRM   = syscall.Signal(0xe)
	SIGBUS    = syscall.Signal(0xa)
	SIGCHLD   = syscall.Signal(0x14)
	SIGCONT   = syscall.Signal(0x13)
	SIGEMT    = syscall.Signal(0x7)
	SIGFPE    = syscall.Signal(0x8)
	SIGHUP    = syscall.Signal(0x1)
	SIGILL    = syscall.Signal(0x4)
	SIGINFO   = syscall.Signal(0x1d)
	SIGINT    = syscall.Signal(0x2)
	SIGIO     = syscall.Signal(0x17)
	SIGIOT    = syscall.Signal(0x6)
	SIGKILL   = syscall.Signal(0x9)
	SIGPIPE   = syscall.Signal(0xd)
	SIGPROF   = syscall.Signal(0x1b)
	SIGPWR    = syscall.Signal(0x20)
	SIGQUIT   = syscall.Signal(0x3)
	SIGSEGV   = syscall.Signal(0xb)
	SIGSTOP   = syscall.Signal(0x11)
	SIGSYS    = syscall.Signal(0xc)
	SIGTERM   = syscall.Signal(0xf)
	SIGTRAP   = syscall.Signal(0x5)
	SIGTSTP   = syscall.Signal(0x12)
	SIGTTIN   = syscall.Signal(0x15)
	SIGTTOU   = syscall.Signal(0x16)
	SIGURG    = syscall.Signal(0x10)
	SIGUSR1   = syscall.Signal(0x1e)
	SIGUSR2   = syscall.Signal(0x1f)
	SIGVTALRM = syscall.Signal(0x1a)
	SIGWINCH  = syscall.Signal(0x1c)
	SIGXCPU   = syscall.Signal(0x18)
	SIGXFSZ   = syscall.Signal(0x19)
)

// Error table
var errorList = [...]struct {
	num  syscall.Errno
	name string
	desc string
}{
	{1, "EPERM", "operation not permitted"},
	{2, "ENOENT", "no such file or directory"},
	{3, "ESRCH", "no such process"},
	{4, "EINTR", "interrupted system call"},
	{5, "EIO", "input/output error"},
	{6, "ENXIO", "device not configured"},
	{7, "E2BIG", "argument list too long"},
	{8, "ENOEXEC", "exec format error"},
	{9, "EBADF", "bad file descriptor"},
	{10, "ECHILD", "no child processes"},
	{11, "EDEADLK", "resource deadlock avoided"},
	{12, "ENOMEM", "cannot allocate memory"},
	{13, "EACCES", "permission denied"},
	{14, "EFAULT", "bad address"},
	{15, "ENOTBLK", "block device required"},
	{16, "EBUSY", "device busy"},
	{17, "EEXIST", "file exists"},
	{18, "EXDEV", "cross-device link"},
	{19, "ENODEV", "operation not supported by device"},
	{20, "ENOTDIR", "not a directory"},
	{21, "EISDIR", "is a directory"},
	{22, "EINVAL", "invalid argument"},
	{23, "ENFILE", "too many open files in system"},
	{24, "EMFILE", "too many open files"},
	{25, "ENOTTY", "inappropriate ioctl for device"},
	{26, "ETXTBSY", "text file busy"},
	{27, "EFBIG", "file too large"},
	{28, "ENOSPC", "no space left on device"},
	{29, "ESPIPE", "illegal seek"},
	{30, "EROFS", "read-only file system"},
	{31, "EMLINK", "too many links"},
	{32, "EPIPE", "broken pipe"},
	{33, "EDOM", "numerical argument out of domain"},
	{34, "ERANGE", "result too large or too small"},
	{35, "EAGAIN", "resource temporarily unavailable"},
	{36, "EINPROGRESS", "operation now in progress"},
	{37, "EALREADY", "operation already in progress"},
	{38, "ENOTSOCK", "socket operation on non-socket"},
	{39, "EDESTADDRREQ", "destination address required"},
	{40, "EMSGSIZE", "message too long"},
	{41, "EPROTOTYPE", "protocol wrong type for socket"},
	{42, "ENOPROTOOPT", "protocol option not available"},
	{43, "EPROTONOSUPPORT", "protocol not supported"},
	{44, "ESOCKTNOSUPPORT", "socket type not supported"},
	{45, "EOPNOTSUPP", "operation not supported"},
	{46, "EPFNOSUPPORT", "protocol family not supported"},
	{47, "EAFNOSUPPORT", "address family not supported by protocol family"},
	{48, "EADDRINUSE", "address already in use"},
	{49, "EADDRNOTAVAIL", "can't assign requested address"},
	{50, "ENETDOWN", "network is down"},
	{51, "ENETUNREACH", "network is unreachable"},
	{52, "ENETRESET", "network dropped connection on reset"},
	{53, "ECONNABORTED", "software caused connection abort"},
	{54, "ECONNRESET", "connection reset by peer"},
	{55, "ENOBUFS", "no buffer space available"},
	{56, "EISCONN", "socket is already connected"},
	{57, "ENOTCONN", "socket is not connected"},
	{58, "ESHUTDOWN", "can't send after socket shutdown"},
	{59, "ETOOMANYREFS", "too many references: can't splice"},
	{60, "ETIMEDOUT", "connection timed out"},
	{61, "ECONNREFUSED", "connection refused"},
	{62, "ELOOP", "too many levels of symbolic links"},
	{63, "ENAMETOOLONG", "file name too long"},
	{64, "EHOSTDOWN", "host is down"},
	{65, "EHOSTUNREACH", "no route to host"},
	{66, "ENOTEMPTY", "directory not empty"},
	{67, "EPROCLIM", "too many processes"},
	{68, "EUSERS", "too many users"},
	{69, "EDQUOT", "disc quota exceeded"},
	{70, "ESTALE", "stale NFS file handle"},
	{71, "EREMOTE", "too many levels of remote in path"},
	{72, "EBADRPC", "RPC struct is bad"},
	{73, "ERPCMISMATCH", "RPC version wrong"},
	{74, "EPROGUNAVAIL", "RPC prog. not avail"},
	{75, "EPROGMISMATCH", "program version wrong"},
	{76, "EPROCUNAVAIL", "bad procedure for program"},
	{77, "ENOLCK", "no locks available"},
	{78, "ENOSYS", "function not implemented"},
	{79, "EFTYPE", "inappropriate file type or format"},
	{80, "EAUTH", "authentication error"},
	{81, "ENEEDAUTH", "need authenticator"},
	{82, "EIDRM", "identifier removed"},
	{83, "ENOMSG", "no message of desired type"},
	{84, "EOVERFLOW", "value too large to be stored in data type"},
	{85, "EILSEQ", "illegal byte sequence"},
	{86, "ENOTSUP", "not supported"},
	{87, "ECANCELED", "operation Canceled"},
	{88, "EBADMSG", "bad or Corrupt message"},
	{89, "ENODATA", "no message available"},
	{90, "ENOSR", "no STREAM resources"},
	{91, "ENOSTR", "not a STREAM"},
	{92, "ETIME", "STREAM ioctl timeout"},
	{93, "ENOATTR", "attribute not found"},
	{94, "EMULTIHOP", "multihop attempted"},
	{95, "ENOLINK", "link has been severed"},
	{96, "ELAST", "protocol error"},
}

// Signal table
var signalList = [...]struct {
	num  syscall.Signal
	name string
	desc string
}{
	{1, "SIGHUP", "hangup"},
	{2, "SIGINT", "interrupt"},
	{3, "SIGQUIT", "quit"},
	{4, "SIGILL", "illegal instruction"},
	{5, "SIGTRAP", "trace/BPT trap"},
	{6, "SIGIOT", "abort trap"},
	{7, "SIGEMT", "EMT trap"},
	{8, "SIGFPE", "floating point exception"},
	{9, "SIGKILL", "killed"},
	{10, "SIGBUS", "bus error"},
	{11, "SIGSEGV", "segmentation fault"},
	{12, "SIGSYS", "bad system call"},
	{13, "SIGPIPE", "broken pipe"},
	{14, "SIGALRM", "alarm clock"},
	{15, "SIGTERM", "terminated"},
	{16, "SIGURG", "urgent I/O condition"},
	{17, "SIGSTOP", "stopped (signal)"},
	{18, "SIGTSTP", "stopped"},
	{19, "SIGCONT", "continued"},
	{20, "SIGCHLD", "child exited"},
	{21, "SIGTTIN", "stopped (tty input)"},
	{22, "SIGTTOU", "stopped (tty output)"},
	{23, "SIGIO", "I/O possible"},
	{24, "SIGXCPU", "cputime limit exceeded"},
	{25, "SIGXFSZ", "filesize limit exceeded"},
	{26, "SIGVTALRM", "virtual timer expired"},
	{27, "SIGPROF", "profiling timer expired"},
	{28, "SIGWINCH", "window size changes"},
	{29, "SIGINFO", "information request"},
	{30, "SIGUSR1", "user defined signal 1"},
	{31, "SIGUSR2", "user defined signal 2"},
	{32, "SIGPWR", "power fail/restart"},
}

- f a628df91eb7512c5d4cabc2672e7dfa2ef1cc7c23d32169c985232c9a65616ad vendor/golang.org/x/sys/unix/zsyscall_aix_ppc64.go
+ f 84c726480b4dc639c1fa9435eef17e25b3df1c8e9eef037a63803b332c662b63 vendor/golang.org/x/sys/unix/zsyscall_aix_ppc64.go
dmppatch 4
@@ -1,87 +1,94 @@
-// mksyscall_aix_ppc64.pl -aix -tags aix,ppc64 syscall_aix.go syscall_aix_ppc64.go%0A
+// go run mksyscall_aix_ppc64.go -aix -tags aix,ppc64 syscall_aix.go syscall_aix_ppc64.go%0A
 // C
- f ace705968f728db157b7f54df226a2d17ddc0f41262a4ac5ce865403db8d0918 vendor/golang.org/x/sys/unix/zsyscall_aix_ppc64_gc.go
+ f 2d88c0d90599fea24fc77cb648486e34c95a576a29056cb1b996021a29c6f1b7 vendor/golang.org/x/sys/unix/zsyscall_aix_ppc64_gc.go
dmppatch 4
@@ -1,87 +1,94 @@
-// mksyscall_aix_ppc64.pl -aix -tags aix,ppc64 syscall_aix.go syscall_aix_ppc64.go%0A
+// go run mksyscall_aix_ppc64.go -aix -tags aix,ppc64 syscall_aix.go syscall_aix_ppc64.go%0A
 // C
- f b2f8d6c2541e300e80c893a5d1ac3ba2139ca98a664dfcd7eb6c575b453ad698 vendor/golang.org/x/sys/unix/zsyscall_aix_ppc64_gccgo.go
+ f 675c202c2d509d17d61c83e418d2be569156d2bdb8bae8ce46a41b1812d02f7a vendor/golang.org/x/sys/unix/zsyscall_aix_ppc64_gccgo.go
dmppatch 4
@@ -1,87 +1,94 @@
-// mksyscall_aix_ppc64.pl -aix -tags aix,ppc64 syscall_aix.go syscall_aix_ppc64.go%0A
+// go run mksyscall_aix_ppc64.go -aix -tags aix,ppc64 syscall_aix.go syscall_aix_ppc64.go%0A
 // C
- f 3eccb5a122f372479a573cb3557e882db3c980dffd2cf1581511e18d12f2c3eb vendor/golang.org/x/sys/unix/zsyscall_dragonfly_amd64.go
+ f 1bc8c50830a7210e22d5d757390a54afb2ddfd9cc0889d4075020cb9fe737028 vendor/golang.org/x/sys/unix/zsyscall_dragonfly_amd64.go
dmppatch 4
@@ -28662,24 +28662,505 @@
 O NOT EDIT%0A%0A
+func Renameat(fromfd int, from string, tofd int, to string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(from)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(to)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(fromfd), uintptr(unsafe.Pointer(_p0)), uintptr(tofd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0A
 func Revoke(
- f f15c27593602fef16d48e4a13533a7f9f64d479b71d950244294298cc75c2498 vendor/golang.org/x/sys/unix/zsyscall_linux_386.go
+ f c11a7ceea609293abf8844abaa959fbf574df8d530c4f2823f7dc894664d83e0 vendor/golang.org/x/sys/unix/zsyscall_linux_386.go
dmppatch 12
@@ -29564,517 +29564,8 @@
 IT%0A%0A
-func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0A
 func
@@ -33135,32 +33135,251 @@
 errnoErr(e1)%0A%09%7D%0A
+%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Signalfd(fd int, mask *Sigset_t, flags int) %7B%0A%09SyscallNoError(SYS_SIGNALFD4, uintptr(fd), uintptr(unsafe.Pointer(mask)), uintptr(flags))%0A
 %09return%0A%7D%0A%0A// TH
@@ -45726,32 +45726,541 @@
 0)%0A%09n = int(r0)%0A
+%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A
 %09if e1 != 0 %7B%0A%09%09
- f e38d19006ca53e694ce6cc4630f88b0c8d985a32220dc31a8a0e39c1834291e2 vendor/golang.org/x/sys/unix/zsyscall_linux_amd64.go
+ f b6c851a54eaf9e052bc865343345c53df216f019dd49789abfd38a2bfe964656 vendor/golang.org/x/sys/unix/zsyscall_linux_amd64.go
dmppatch 12
@@ -29535,517 +29535,8 @@
 IT%0A%0A
-func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0A
 func
@@ -33106,32 +33106,251 @@
 errnoErr(e1)%0A%09%7D%0A
+%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Signalfd(fd int, mask *Sigset_t, flags int) %7B%0A%09SyscallNoError(SYS_SIGNALFD4, uintptr(fd), uintptr(unsafe.Pointer(mask)), uintptr(flags))%0A
 %09return%0A%7D%0A%0A// TH
@@ -45659,32 +45659,541 @@
 0)%0A%09n = int(r0)%0A
+%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A
 %09if e1 != 0 %7B%0A%09%09
- f 3a95cebda0e6b2879b695c40a3f1f398e86070440ece171a53439728785c02de vendor/golang.org/x/sys/unix/zsyscall_linux_arm.go
+ f 765bcc9ac3b9e5cfb684d1e3e4c11e27c9cba1b06b908af4bffc5bfd9b2d2264 vendor/golang.org/x/sys/unix/zsyscall_linux_arm.go
dmppatch 12
@@ -29569,517 +29569,8 @@
 IT%0A%0A
-func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0A
 func
@@ -33140,32 +33140,251 @@
 errnoErr(e1)%0A%09%7D%0A
+%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Signalfd(fd int, mask *Sigset_t, flags int) %7B%0A%09SyscallNoError(SYS_SIGNALFD4, uintptr(fd), uintptr(unsafe.Pointer(mask)), uintptr(flags))%0A
 %09return%0A%7D%0A%0A// TH
@@ -49162,32 +49162,541 @@
 PAUSE, 0, 0, 0)%0A
+%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A
 %09if e1 != 0 %7B%0A%09%09
- f 7bdb70e31cd485de4bc90dc19ea2934a7f7bcd2cde072c185e7fbfa05601089a vendor/golang.org/x/sys/unix/zsyscall_linux_arm64.go
+ f cd72ebf92ea21cece43ede1df781a74ce77b7ef617e83109b328e079ff1ce72a vendor/golang.org/x/sys/unix/zsyscall_linux_arm64.go
dmppatch 12
@@ -29535,517 +29535,8 @@
 IT%0A%0A
-func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0A
 func
@@ -33106,32 +33106,251 @@
 errnoErr(e1)%0A%09%7D%0A
+%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Signalfd(fd int, mask *Sigset_t, flags int) %7B%0A%09SyscallNoError(SYS_SIGNALFD4, uintptr(fd), uintptr(unsafe.Pointer(mask)), uintptr(flags))%0A
 %09return%0A%7D%0A%0A// TH
@@ -43988,32 +43988,541 @@
 0)%0A%09n = int(r0)%0A
+%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A
 %09if e1 != 0 %7B%0A%09%09
- f 200b4ea89d8128cfb5bfe3c335a6f7a1eb5520899323238beb0052bccec88f5c vendor/golang.org/x/sys/unix/zsyscall_linux_mips.go
+ f 63492a64573b7ca9c80fc7e8040182e85c26735c400b8fb8e239912c36537700 vendor/golang.org/x/sys/unix/zsyscall_linux_mips.go
dmppatch 12
@@ -29573,517 +29573,8 @@
 IT%0A%0A
-func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0A
 func
@@ -33144,32 +33144,251 @@
 errnoErr(e1)%0A%09%7D%0A
+%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Signalfd(fd int, mask *Sigset_t, flags int) %7B%0A%09SyscallNoError(SYS_SIGNALFD4, uintptr(fd), uintptr(unsafe.Pointer(mask)), uintptr(flags))%0A
 %09return%0A%7D%0A%0A// TH
@@ -43823,32 +43823,541 @@
 ))%0A%09n = int(r0)%0A
+%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A
 %09if e1 != 0 %7B%0A%09%09
- f 8b4f3a8895a8e34fb7ce5b01ed8d834ea5a38a2406f45d5b6e20323d404e85b0 vendor/golang.org/x/sys/unix/zsyscall_linux_mips64.go
+ f d1ac29cdd1a0899dbee5e93e5190b377d7ccf2269cbb9c56914bed8889a68a39 vendor/golang.org/x/sys/unix/zsyscall_linux_mips64.go
dmppatch 12
@@ -29539,517 +29539,8 @@
 IT%0A%0A
-func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0A
 func
@@ -33110,32 +33110,251 @@
 errnoErr(e1)%0A%09%7D%0A
+%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Signalfd(fd int, mask *Sigset_t, flags int) %7B%0A%09SyscallNoError(SYS_SIGNALFD4, uintptr(fd), uintptr(unsafe.Pointer(mask)), uintptr(flags))%0A
 %09return%0A%7D%0A%0A// TH
@@ -44346,32 +44346,541 @@
 0)%0A%09n = int(r0)%0A
+%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A
 %09if e1 != 0 %7B%0A%09%09
- f e4447eff95dd98863ad3de92ca6661876ae6c95bc225731a4057c25ba26db447 vendor/golang.org/x/sys/unix/zsyscall_linux_mips64le.go
+ f 012ce8eafe8c7b39a09a5706237dc32b552f6f748d00f3856df68bbef56f82ce vendor/golang.org/x/sys/unix/zsyscall_linux_mips64le.go
dmppatch 12
@@ -29543,517 +29543,8 @@
 IT%0A%0A
-func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0A
 func
@@ -33114,32 +33114,251 @@
 errnoErr(e1)%0A%09%7D%0A
+%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Signalfd(fd int, mask *Sigset_t, flags int) %7B%0A%09SyscallNoError(SYS_SIGNALFD4, uintptr(fd), uintptr(unsafe.Pointer(mask)), uintptr(flags))%0A
 %09return%0A%7D%0A%0A// TH
@@ -44350,32 +44350,541 @@
 0)%0A%09n = int(r0)%0A
+%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A
 %09if e1 != 0 %7B%0A%09%09
- f 005e4a7dcafb65c29eb4e5d34361519108927bba315213cb6b5fcf66e4f5507b vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go
+ f 0ed7e684781ec47fac9564e360086ef29e2284ef26bad0af1223c9edc333c126 vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go
dmppatch 12
@@ -29577,517 +29577,8 @@
 IT%0A%0A
-func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0A
 func
@@ -33148,32 +33148,251 @@
 errnoErr(e1)%0A%09%7D%0A
+%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Signalfd(fd int, mask *Sigset_t, flags int) %7B%0A%09SyscallNoError(SYS_SIGNALFD4, uintptr(fd), uintptr(unsafe.Pointer(mask)), uintptr(flags))%0A
 %09return%0A%7D%0A%0A// TH
@@ -43827,32 +43827,541 @@
 ))%0A%09n = int(r0)%0A
+%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A
 %09if e1 != 0 %7B%0A%09%09
- f 2edd97c386339260f06856fbfd5d1f41853423e362d7cee9833c96b08713b921 vendor/golang.org/x/sys/unix/zsyscall_linux_ppc64.go
+ f a7bbf7a71eaeadf59ddc068be314276a18de579b54b5ea75b680e6a6f7b7f9c4 vendor/golang.org/x/sys/unix/zsyscall_linux_ppc64.go
dmppatch 12
@@ -29536,517 +29536,8 @@
 IT%0A%0A
-func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0A
 func
@@ -33107,32 +33107,251 @@
 errnoErr(e1)%0A%09%7D%0A
+%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Signalfd(fd int, mask *Sigset_t, flags int) %7B%0A%09SyscallNoError(SYS_SIGNALFD4, uintptr(fd), uintptr(unsafe.Pointer(mask)), uintptr(flags))%0A
 %09return%0A%7D%0A%0A// TH
@@ -46004,32 +46004,541 @@
 0)%0A%09n = int(r0)%0A
+%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A
 %09if e1 != 0 %7B%0A%09%09
- f 3dd07a5099a23c4b9b077e663582bcfc67cdb24f36edccc4142bad57210617fe vendor/golang.org/x/sys/unix/zsyscall_linux_ppc64le.go
+ f ad9418981e5168834f9ebc2d1ed797bae7fc29219609bc9331a1bdc627bd435a vendor/golang.org/x/sys/unix/zsyscall_linux_ppc64le.go
dmppatch 12
@@ -29540,517 +29540,8 @@
 IT%0A%0A
-func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0A
 func
@@ -33111,32 +33111,251 @@
 errnoErr(e1)%0A%09%7D%0A
+%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Signalfd(fd int, mask *Sigset_t, flags int) %7B%0A%09SyscallNoError(SYS_SIGNALFD4, uintptr(fd), uintptr(unsafe.Pointer(mask)), uintptr(flags))%0A
 %09return%0A%7D%0A%0A// TH
@@ -46008,32 +46008,541 @@
 0)%0A%09n = int(r0)%0A
+%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A
 %09if e1 != 0 %7B%0A%09%09
- f ecae1feb8b18e54c8c486d6adbd76af8e9848d164d219f7354ee62ceb23fb3e6 vendor/golang.org/x/sys/unix/zsyscall_linux_riscv64.go
+ f 4588ad7e3f9848e669f4bdaf25c5b104549e09788352887a59b940645e13516f vendor/golang.org/x/sys/unix/zsyscall_linux_riscv64.go
dmppatch 8
@@ -29541,517 +29541,8 @@
 IT%0A%0A
-func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0A
 func
@@ -33112,32 +33112,251 @@
 errnoErr(e1)%0A%09%7D%0A
+%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Signalfd(fd int, mask *Sigset_t, flags int) %7B%0A%09SyscallNoError(SYS_SIGNALFD4, uintptr(fd), uintptr(unsafe.Pointer(mask)), uintptr(flags))%0A
 %09return%0A%7D%0A%0A// TH
- f 2e2f237e642af3903ad53ca5305027126974d2f9ddc98f4f284f9f57c62ba708 vendor/golang.org/x/sys/unix/zsyscall_linux_s390x.go
+ f faae2b7a04b7613552caff6d042093a1c6a3a7b137f32c1ac6cf9cb6362c1496 vendor/golang.org/x/sys/unix/zsyscall_linux_s390x.go
dmppatch 12
@@ -29535,517 +29535,8 @@
 IT%0A%0A
-func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0A
 func
@@ -33106,32 +33106,251 @@
 errnoErr(e1)%0A%09%7D%0A
+%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Signalfd(fd int, mask *Sigset_t, flags int) %7B%0A%09SyscallNoError(SYS_SIGNALFD4, uintptr(fd), uintptr(unsafe.Pointer(mask)), uintptr(flags))%0A
 %09return%0A%7D%0A%0A// TH
@@ -45341,32 +45341,541 @@
 0)%0A%09n = int(r0)%0A
+%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A
 %09if e1 != 0 %7B%0A%09%09
- f c538af95de67ef0605fb52ea661cf5d6668cb7933e0c003f983c3150ae7faff6 vendor/golang.org/x/sys/unix/zsyscall_linux_sparc64.go
+ f 716776c6f52edf65234968b9127f432ece3d5d7044ce3026abd033145d83da35 vendor/golang.org/x/sys/unix/zsyscall_linux_sparc64.go
dmppatch 12
@@ -29541,517 +29541,8 @@
 IT%0A%0A
-func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0A
 func
@@ -33112,32 +33112,251 @@
 errnoErr(e1)%0A%09%7D%0A
+%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Signalfd(fd int, mask *Sigset_t, flags int) %7B%0A%09SyscallNoError(SYS_SIGNALFD4, uintptr(fd), uintptr(unsafe.Pointer(mask)), uintptr(flags))%0A
 %09return%0A%7D%0A%0A// TH
@@ -45319,32 +45319,541 @@
 0)%0A%09n = int(r0)%0A
+%09if e1 != 0 %7B%0A%09%09err = errnoErr(e1)%0A%09%7D%0A%09return%0A%7D%0A%0A// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT%0A%0Afunc Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) %7B%0A%09var _p0 *byte%0A%09_p0, err = BytePtrFromString(oldpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09var _p1 *byte%0A%09_p1, err = BytePtrFromString(newpath)%0A%09if err != nil %7B%0A%09%09return%0A%09%7D%0A%09_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)%0A
 %09if e1 != 0 %7B%0A%09%09
+ f a8b4b556d44a6a1f8405b50d445edf2be4567fa53671a850b0f095e31c77245e vendor/golang.org/x/sys/unix/zsyscall_netbsd_arm64.go
utf8file 1827
// go run mksyscall.go -netbsd -tags netbsd,arm64 syscall_bsd.go syscall_netbsd.go syscall_netbsd_arm64.go
// Code generated by the command above; see README.md. DO NOT EDIT.

// +build netbsd,arm64

package unix

import (
	"syscall"
	"unsafe"
)

var _ syscall.Errno

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getgroups(ngid int, gid *_Gid_t) (n int, err error) {
	r0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(ngid), uintptr(unsafe.Pointer(gid)), 0)
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setgroups(ngid int, gid *_Gid_t) (err error) {
	_, _, e1 := RawSyscall(SYS_SETGROUPS, uintptr(ngid), uintptr(unsafe.Pointer(gid)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func wait4(pid int, wstatus *_C_int, options int, rusage *Rusage) (wpid int, err error) {
	r0, _, e1 := Syscall6(SYS_WAIT4, uintptr(pid), uintptr(unsafe.Pointer(wstatus)), uintptr(options), uintptr(unsafe.Pointer(rusage)), 0, 0)
	wpid = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func accept(s int, rsa *RawSockaddrAny, addrlen *_Socklen) (fd int, err error) {
	r0, _, e1 := Syscall(SYS_ACCEPT, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))
	fd = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func bind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {
	_, _, e1 := Syscall(SYS_BIND, uintptr(s), uintptr(addr), uintptr(addrlen))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {
	_, _, e1 := Syscall(SYS_CONNECT, uintptr(s), uintptr(addr), uintptr(addrlen))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func socket(domain int, typ int, proto int) (fd int, err error) {
	r0, _, e1 := RawSyscall(SYS_SOCKET, uintptr(domain), uintptr(typ), uintptr(proto))
	fd = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error) {
	_, _, e1 := Syscall6(SYS_GETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error) {
	_, _, e1 := Syscall6(SYS_SETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(vallen), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getpeername(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error) {
	_, _, e1 := RawSyscall(SYS_GETPEERNAME, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getsockname(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error) {
	_, _, e1 := RawSyscall(SYS_GETSOCKNAME, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Shutdown(s int, how int) (err error) {
	_, _, e1 := Syscall(SYS_SHUTDOWN, uintptr(s), uintptr(how), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func socketpair(domain int, typ int, proto int, fd *[2]int32) (err error) {
	_, _, e1 := RawSyscall6(SYS_SOCKETPAIR, uintptr(domain), uintptr(typ), uintptr(proto), uintptr(unsafe.Pointer(fd)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func recvfrom(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_SENDTO, uintptr(s), uintptr(_p0), uintptr(len(buf)), uintptr(flags), uintptr(to), uintptr(addrlen))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func recvmsg(s int, msg *Msghdr, flags int) (n int, err error) {
	r0, _, e1 := Syscall(SYS_RECVMSG, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sendmsg(s int, msg *Msghdr, flags int) (n int, err error) {
	r0, _, e1 := Syscall(SYS_SENDMSG, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func kevent(kq int, change unsafe.Pointer, nchange int, event unsafe.Pointer, nevent int, timeout *Timespec) (n int, err error) {
	r0, _, e1 := Syscall6(SYS_KEVENT, uintptr(kq), uintptr(change), uintptr(nchange), uintptr(event), uintptr(nevent), uintptr(unsafe.Pointer(timeout)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sysctl(mib []_C_int, old *byte, oldlen *uintptr, new *byte, newlen uintptr) (err error) {
	var _p0 unsafe.Pointer
	if len(mib) > 0 {
		_p0 = unsafe.Pointer(&mib[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS___SYSCTL, uintptr(_p0), uintptr(len(mib)), uintptr(unsafe.Pointer(old)), uintptr(unsafe.Pointer(oldlen)), uintptr(unsafe.Pointer(new)), uintptr(newlen))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func utimes(path string, timeval *[2]Timeval) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_UTIMES, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(timeval)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func futimes(fd int, timeval *[2]Timeval) (err error) {
	_, _, e1 := Syscall(SYS_FUTIMES, uintptr(fd), uintptr(unsafe.Pointer(timeval)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fcntl(fd int, cmd int, arg int) (val int, err error) {
	r0, _, e1 := Syscall(SYS_FCNTL, uintptr(fd), uintptr(cmd), uintptr(arg))
	val = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func poll(fds *PollFd, nfds int, timeout int) (n int, err error) {
	r0, _, e1 := Syscall(SYS_POLL, uintptr(unsafe.Pointer(fds)), uintptr(nfds), uintptr(timeout))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Madvise(b []byte, behav int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MADVISE, uintptr(_p0), uintptr(len(b)), uintptr(behav))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mlock(b []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MLOCK, uintptr(_p0), uintptr(len(b)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mlockall(flags int) (err error) {
	_, _, e1 := Syscall(SYS_MLOCKALL, uintptr(flags), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mprotect(b []byte, prot int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MPROTECT, uintptr(_p0), uintptr(len(b)), uintptr(prot))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Msync(b []byte, flags int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MSYNC, uintptr(_p0), uintptr(len(b)), uintptr(flags))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Munlock(b []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MUNLOCK, uintptr(_p0), uintptr(len(b)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Munlockall() (err error) {
	_, _, e1 := Syscall(SYS_MUNLOCKALL, 0, 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pipe() (fd1 int, fd2 int, err error) {
	r0, r1, e1 := RawSyscall(SYS_PIPE, 0, 0, 0)
	fd1 = int(r0)
	fd2 = int(r1)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getdents(fd int, buf []byte) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_GETDENTS, uintptr(fd), uintptr(_p0), uintptr(len(buf)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getcwd(buf []byte) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS___GETCWD, uintptr(_p0), uintptr(len(buf)), 0)
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ioctl(fd int, req uint, arg uintptr) (err error) {
	_, _, e1 := Syscall(SYS_IOCTL, uintptr(fd), uintptr(req), uintptr(arg))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Access(path string, mode uint32) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_ACCESS, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Adjtime(delta *Timeval, olddelta *Timeval) (err error) {
	_, _, e1 := Syscall(SYS_ADJTIME, uintptr(unsafe.Pointer(delta)), uintptr(unsafe.Pointer(olddelta)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Chdir(path string) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_CHDIR, uintptr(unsafe.Pointer(_p0)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Chflags(path string, flags int) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_CHFLAGS, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Chmod(path string, mode uint32) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_CHMOD, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Chown(path string, uid int, gid int) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_CHOWN, uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Chroot(path string) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_CHROOT, uintptr(unsafe.Pointer(_p0)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Close(fd int) (err error) {
	_, _, e1 := Syscall(SYS_CLOSE, uintptr(fd), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Dup(fd int) (nfd int, err error) {
	r0, _, e1 := Syscall(SYS_DUP, uintptr(fd), 0, 0)
	nfd = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Dup2(from int, to int) (err error) {
	_, _, e1 := Syscall(SYS_DUP2, uintptr(from), uintptr(to), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Exit(code int) {
	Syscall(SYS_EXIT, uintptr(code), 0, 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ExtattrGetFd(fd int, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(attrname)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall6(SYS_EXTATTR_GET_FD, uintptr(fd), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p0)), uintptr(data), uintptr(nbytes), 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ExtattrSetFd(fd int, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(attrname)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall6(SYS_EXTATTR_SET_FD, uintptr(fd), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p0)), uintptr(data), uintptr(nbytes), 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ExtattrDeleteFd(fd int, attrnamespace int, attrname string) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(attrname)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_EXTATTR_DELETE_FD, uintptr(fd), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p0)))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ExtattrListFd(fd int, attrnamespace int, data uintptr, nbytes int) (ret int, err error) {
	r0, _, e1 := Syscall6(SYS_EXTATTR_LIST_FD, uintptr(fd), uintptr(attrnamespace), uintptr(data), uintptr(nbytes), 0, 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ExtattrGetFile(file string, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(file)
	if err != nil {
		return
	}
	var _p1 *byte
	_p1, err = BytePtrFromString(attrname)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall6(SYS_EXTATTR_GET_FILE, uintptr(unsafe.Pointer(_p0)), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p1)), uintptr(data), uintptr(nbytes), 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ExtattrSetFile(file string, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(file)
	if err != nil {
		return
	}
	var _p1 *byte
	_p1, err = BytePtrFromString(attrname)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall6(SYS_EXTATTR_SET_FILE, uintptr(unsafe.Pointer(_p0)), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p1)), uintptr(data), uintptr(nbytes), 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ExtattrDeleteFile(file string, attrnamespace int, attrname string) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(file)
	if err != nil {
		return
	}
	var _p1 *byte
	_p1, err = BytePtrFromString(attrname)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_EXTATTR_DELETE_FILE, uintptr(unsafe.Pointer(_p0)), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p1)))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ExtattrListFile(file string, attrnamespace int, data uintptr, nbytes int) (ret int, err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(file)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall6(SYS_EXTATTR_LIST_FILE, uintptr(unsafe.Pointer(_p0)), uintptr(attrnamespace), uintptr(data), uintptr(nbytes), 0, 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ExtattrGetLink(link string, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(link)
	if err != nil {
		return
	}
	var _p1 *byte
	_p1, err = BytePtrFromString(attrname)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall6(SYS_EXTATTR_GET_LINK, uintptr(unsafe.Pointer(_p0)), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p1)), uintptr(data), uintptr(nbytes), 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ExtattrSetLink(link string, attrnamespace int, attrname string, data uintptr, nbytes int) (ret int, err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(link)
	if err != nil {
		return
	}
	var _p1 *byte
	_p1, err = BytePtrFromString(attrname)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall6(SYS_EXTATTR_SET_LINK, uintptr(unsafe.Pointer(_p0)), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p1)), uintptr(data), uintptr(nbytes), 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ExtattrDeleteLink(link string, attrnamespace int, attrname string) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(link)
	if err != nil {
		return
	}
	var _p1 *byte
	_p1, err = BytePtrFromString(attrname)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_EXTATTR_DELETE_LINK, uintptr(unsafe.Pointer(_p0)), uintptr(attrnamespace), uintptr(unsafe.Pointer(_p1)))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ExtattrListLink(link string, attrnamespace int, data uintptr, nbytes int) (ret int, err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(link)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall6(SYS_EXTATTR_LIST_LINK, uintptr(unsafe.Pointer(_p0)), uintptr(attrnamespace), uintptr(data), uintptr(nbytes), 0, 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Faccessat(dirfd int, path string, mode uint32, flags int) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall6(SYS_FACCESSAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(flags), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fadvise(fd int, offset int64, length int64, advice int) (err error) {
	_, _, e1 := Syscall6(SYS_POSIX_FADVISE, uintptr(fd), 0, uintptr(offset), 0, uintptr(length), uintptr(advice))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchdir(fd int) (err error) {
	_, _, e1 := Syscall(SYS_FCHDIR, uintptr(fd), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchflags(fd int, flags int) (err error) {
	_, _, e1 := Syscall(SYS_FCHFLAGS, uintptr(fd), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchmod(fd int, mode uint32) (err error) {
	_, _, e1 := Syscall(SYS_FCHMOD, uintptr(fd), uintptr(mode), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchmodat(dirfd int, path string, mode uint32, flags int) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall6(SYS_FCHMODAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(flags), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchown(fd int, uid int, gid int) (err error) {
	_, _, e1 := Syscall(SYS_FCHOWN, uintptr(fd), uintptr(uid), uintptr(gid))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fchownat(dirfd int, path string, uid int, gid int, flags int) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall6(SYS_FCHOWNAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Flock(fd int, how int) (err error) {
	_, _, e1 := Syscall(SYS_FLOCK, uintptr(fd), uintptr(how), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fpathconf(fd int, name int) (val int, err error) {
	r0, _, e1 := Syscall(SYS_FPATHCONF, uintptr(fd), uintptr(name), 0)
	val = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fstat(fd int, stat *Stat_t) (err error) {
	_, _, e1 := Syscall(SYS_FSTAT, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fstatat(fd int, path string, stat *Stat_t, flags int) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall6(SYS_FSTATAT, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), uintptr(flags), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fsync(fd int) (err error) {
	_, _, e1 := Syscall(SYS_FSYNC, uintptr(fd), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Ftruncate(fd int, length int64) (err error) {
	_, _, e1 := Syscall(SYS_FTRUNCATE, uintptr(fd), 0, uintptr(length))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getegid() (egid int) {
	r0, _, _ := RawSyscall(SYS_GETEGID, 0, 0, 0)
	egid = int(r0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Geteuid() (uid int) {
	r0, _, _ := RawSyscall(SYS_GETEUID, 0, 0, 0)
	uid = int(r0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getgid() (gid int) {
	r0, _, _ := RawSyscall(SYS_GETGID, 0, 0, 0)
	gid = int(r0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getpgid(pid int) (pgid int, err error) {
	r0, _, e1 := RawSyscall(SYS_GETPGID, uintptr(pid), 0, 0)
	pgid = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getpgrp() (pgrp int) {
	r0, _, _ := RawSyscall(SYS_GETPGRP, 0, 0, 0)
	pgrp = int(r0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getpid() (pid int) {
	r0, _, _ := RawSyscall(SYS_GETPID, 0, 0, 0)
	pid = int(r0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getppid() (ppid int) {
	r0, _, _ := RawSyscall(SYS_GETPPID, 0, 0, 0)
	ppid = int(r0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getpriority(which int, who int) (prio int, err error) {
	r0, _, e1 := Syscall(SYS_GETPRIORITY, uintptr(which), uintptr(who), 0)
	prio = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getrlimit(which int, lim *Rlimit) (err error) {
	_, _, e1 := RawSyscall(SYS_GETRLIMIT, uintptr(which), uintptr(unsafe.Pointer(lim)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getrusage(who int, rusage *Rusage) (err error) {
	_, _, e1 := RawSyscall(SYS_GETRUSAGE, uintptr(who), uintptr(unsafe.Pointer(rusage)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getsid(pid int) (sid int, err error) {
	r0, _, e1 := RawSyscall(SYS_GETSID, uintptr(pid), 0, 0)
	sid = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Gettimeofday(tv *Timeval) (err error) {
	_, _, e1 := RawSyscall(SYS_GETTIMEOFDAY, uintptr(unsafe.Pointer(tv)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getuid() (uid int) {
	r0, _, _ := RawSyscall(SYS_GETUID, 0, 0, 0)
	uid = int(r0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Issetugid() (tainted bool) {
	r0, _, _ := Syscall(SYS_ISSETUGID, 0, 0, 0)
	tainted = bool(r0 != 0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Kill(pid int, signum syscall.Signal) (err error) {
	_, _, e1 := Syscall(SYS_KILL, uintptr(pid), uintptr(signum), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Kqueue() (fd int, err error) {
	r0, _, e1 := Syscall(SYS_KQUEUE, 0, 0, 0)
	fd = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Lchown(path string, uid int, gid int) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_LCHOWN, uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Link(path string, link string) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	var _p1 *byte
	_p1, err = BytePtrFromString(link)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_LINK, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Linkat(pathfd int, path string, linkfd int, link string, flags int) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	var _p1 *byte
	_p1, err = BytePtrFromString(link)
	if err != nil {
		return
	}
	_, _, e1 := Syscall6(SYS_LINKAT, uintptr(pathfd), uintptr(unsafe.Pointer(_p0)), uintptr(linkfd), uintptr(unsafe.Pointer(_p1)), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Listen(s int, backlog int) (err error) {
	_, _, e1 := Syscall(SYS_LISTEN, uintptr(s), uintptr(backlog), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Lstat(path string, stat *Stat_t) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_LSTAT, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mkdir(path string, mode uint32) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_MKDIR, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mkdirat(dirfd int, path string, mode uint32) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_MKDIRAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mkfifo(path string, mode uint32) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_MKFIFO, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mkfifoat(dirfd int, path string, mode uint32) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_MKFIFOAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mknod(path string, mode uint32, dev int) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_MKNOD, uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(dev))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mknodat(dirfd int, path string, mode uint32, dev int) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall6(SYS_MKNODAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(dev), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Nanosleep(time *Timespec, leftover *Timespec) (err error) {
	_, _, e1 := Syscall(SYS_NANOSLEEP, uintptr(unsafe.Pointer(time)), uintptr(unsafe.Pointer(leftover)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Open(path string, mode int, perm uint32) (fd int, err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall(SYS_OPEN, uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(perm))
	fd = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Openat(dirfd int, path string, mode int, perm uint32) (fd int, err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(perm), 0, 0)
	fd = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pathconf(path string, name int) (val int, err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall(SYS_PATHCONF, uintptr(unsafe.Pointer(_p0)), uintptr(name), 0)
	val = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pread(fd int, p []byte, offset int64) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PREAD, uintptr(fd), uintptr(_p0), uintptr(len(p)), 0, uintptr(offset), 0)
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pwrite(fd int, p []byte, offset int64) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PWRITE, uintptr(fd), uintptr(_p0), uintptr(len(p)), 0, uintptr(offset), 0)
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func read(fd int, p []byte) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(_p0), uintptr(len(p)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Readlink(path string, buf []byte) (n int, err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	var _p1 unsafe.Pointer
	if len(buf) > 0 {
		_p1 = unsafe.Pointer(&buf[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_READLINK, uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(buf)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Readlinkat(dirfd int, path string, buf []byte) (n int, err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	var _p1 unsafe.Pointer
	if len(buf) > 0 {
		_p1 = unsafe.Pointer(&buf[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_READLINKAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(buf)), 0, 0)
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Rename(from string, to string) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(from)
	if err != nil {
		return
	}
	var _p1 *byte
	_p1, err = BytePtrFromString(to)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_RENAME, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Renameat(fromfd int, from string, tofd int, to string) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(from)
	if err != nil {
		return
	}
	var _p1 *byte
	_p1, err = BytePtrFromString(to)
	if err != nil {
		return
	}
	_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(fromfd), uintptr(unsafe.Pointer(_p0)), uintptr(tofd), uintptr(unsafe.Pointer(_p1)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Revoke(path string) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_REVOKE, uintptr(unsafe.Pointer(_p0)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Rmdir(path string) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_RMDIR, uintptr(unsafe.Pointer(_p0)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Seek(fd int, offset int64, whence int) (newoffset int64, err error) {
	r0, _, e1 := Syscall6(SYS_LSEEK, uintptr(fd), 0, uintptr(offset), uintptr(whence), 0, 0)
	newoffset = int64(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Select(n int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (err error) {
	_, _, e1 := Syscall6(SYS_SELECT, uintptr(n), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setegid(egid int) (err error) {
	_, _, e1 := RawSyscall(SYS_SETEGID, uintptr(egid), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Seteuid(euid int) (err error) {
	_, _, e1 := RawSyscall(SYS_SETEUID, uintptr(euid), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setgid(gid int) (err error) {
	_, _, e1 := RawSyscall(SYS_SETGID, uintptr(gid), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setpgid(pid int, pgid int) (err error) {
	_, _, e1 := RawSyscall(SYS_SETPGID, uintptr(pid), uintptr(pgid), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setpriority(which int, who int, prio int) (err error) {
	_, _, e1 := Syscall(SYS_SETPRIORITY, uintptr(which), uintptr(who), uintptr(prio))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setregid(rgid int, egid int) (err error) {
	_, _, e1 := RawSyscall(SYS_SETREGID, uintptr(rgid), uintptr(egid), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setreuid(ruid int, euid int) (err error) {
	_, _, e1 := RawSyscall(SYS_SETREUID, uintptr(ruid), uintptr(euid), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setrlimit(which int, lim *Rlimit) (err error) {
	_, _, e1 := RawSyscall(SYS_SETRLIMIT, uintptr(which), uintptr(unsafe.Pointer(lim)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setsid() (pid int, err error) {
	r0, _, e1 := RawSyscall(SYS_SETSID, 0, 0, 0)
	pid = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Settimeofday(tp *Timeval) (err error) {
	_, _, e1 := RawSyscall(SYS_SETTIMEOFDAY, uintptr(unsafe.Pointer(tp)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setuid(uid int) (err error) {
	_, _, e1 := RawSyscall(SYS_SETUID, uintptr(uid), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Stat(path string, stat *Stat_t) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_STAT, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Symlink(path string, link string) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	var _p1 *byte
	_p1, err = BytePtrFromString(link)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_SYMLINK, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Symlinkat(oldpath string, newdirfd int, newpath string) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(oldpath)
	if err != nil {
		return
	}
	var _p1 *byte
	_p1, err = BytePtrFromString(newpath)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_SYMLINKAT, uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Sync() (err error) {
	_, _, e1 := Syscall(SYS_SYNC, 0, 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Truncate(path string, length int64) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(_p0)), 0, uintptr(length))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Umask(newmask int) (oldmask int) {
	r0, _, _ := Syscall(SYS_UMASK, uintptr(newmask), 0, 0)
	oldmask = int(r0)
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Unlink(path string) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_UNLINK, uintptr(unsafe.Pointer(_p0)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Unlinkat(dirfd int, path string, flags int) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_UNLINKAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Unmount(path string, flags int) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_UNMOUNT, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func write(fd int, p []byte) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_WRITE, uintptr(fd), uintptr(_p0), uintptr(len(p)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func mmap(addr uintptr, length uintptr, prot int, flag int, fd int, pos int64) (ret uintptr, err error) {
	r0, _, e1 := Syscall9(SYS_MMAP, uintptr(addr), uintptr(length), uintptr(prot), uintptr(flag), uintptr(fd), 0, uintptr(pos), 0, 0)
	ret = uintptr(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func munmap(addr uintptr, length uintptr) (err error) {
	_, _, e1 := Syscall(SYS_MUNMAP, uintptr(addr), uintptr(length), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func readlen(fd int, buf *byte, nbuf int) (n int, err error) {
	r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(unsafe.Pointer(buf)), uintptr(nbuf))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func writelen(fd int, buf *byte, nbuf int) (n int, err error) {
	r0, _, e1 := Syscall(SYS_WRITE, uintptr(fd), uintptr(unsafe.Pointer(buf)), uintptr(nbuf))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func utimensat(dirfd int, path string, times *[2]Timespec, flags int) (err error) {
	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall6(SYS_UTIMENSAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)), uintptr(flags), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}

+ f e1e86727100b55a6ad80521685543f1c017e94b2a7971f5ddf83f8f035449b52 vendor/golang.org/x/sys/unix/zsysnum_netbsd_arm64.go
utf8file 275
// mksysnum_netbsd.pl
// Code generated by the command above; DO NOT EDIT.

// +build arm64,netbsd

package unix

const (
	SYS_EXIT                 = 1   // { void|sys||exit(int rval); }
	SYS_FORK                 = 2   // { int|sys||fork(void); }
	SYS_READ                 = 3   // { ssize_t|sys||read(int fd, void *buf, size_t nbyte); }
	SYS_WRITE                = 4   // { ssize_t|sys||write(int fd, const void *buf, size_t nbyte); }
	SYS_OPEN                 = 5   // { int|sys||open(const char *path, int flags, ... mode_t mode); }
	SYS_CLOSE                = 6   // { int|sys||close(int fd); }
	SYS_LINK                 = 9   // { int|sys||link(const char *path, const char *link); }
	SYS_UNLINK               = 10  // { int|sys||unlink(const char *path); }
	SYS_CHDIR                = 12  // { int|sys||chdir(const char *path); }
	SYS_FCHDIR               = 13  // { int|sys||fchdir(int fd); }
	SYS_CHMOD                = 15  // { int|sys||chmod(const char *path, mode_t mode); }
	SYS_CHOWN                = 16  // { int|sys||chown(const char *path, uid_t uid, gid_t gid); }
	SYS_BREAK                = 17  // { int|sys||obreak(char *nsize); }
	SYS_GETPID               = 20  // { pid_t|sys||getpid_with_ppid(void); }
	SYS_UNMOUNT              = 22  // { int|sys||unmount(const char *path, int flags); }
	SYS_SETUID               = 23  // { int|sys||setuid(uid_t uid); }
	SYS_GETUID               = 24  // { uid_t|sys||getuid_with_euid(void); }
	SYS_GETEUID              = 25  // { uid_t|sys||geteuid(void); }
	SYS_PTRACE               = 26  // { int|sys||ptrace(int req, pid_t pid, void *addr, int data); }
	SYS_RECVMSG              = 27  // { ssize_t|sys||recvmsg(int s, struct msghdr *msg, int flags); }
	SYS_SENDMSG              = 28  // { ssize_t|sys||sendmsg(int s, const struct msghdr *msg, int flags); }
	SYS_RECVFROM             = 29  // { ssize_t|sys||recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlenaddr); }
	SYS_ACCEPT               = 30  // { int|sys||accept(int s, struct sockaddr *name, socklen_t *anamelen); }
	SYS_GETPEERNAME          = 31  // { int|sys||getpeername(int fdes, struct sockaddr *asa, socklen_t *alen); }
	SYS_GETSOCKNAME          = 32  // { int|sys||getsockname(int fdes, struct sockaddr *asa, socklen_t *alen); }
	SYS_ACCESS               = 33  // { int|sys||access(const char *path, int flags); }
	SYS_CHFLAGS              = 34  // { int|sys||chflags(const char *path, u_long flags); }
	SYS_FCHFLAGS             = 35  // { int|sys||fchflags(int fd, u_long flags); }
	SYS_SYNC                 = 36  // { void|sys||sync(void); }
	SYS_KILL                 = 37  // { int|sys||kill(pid_t pid, int signum); }
	SYS_GETPPID              = 39  // { pid_t|sys||getppid(void); }
	SYS_DUP                  = 41  // { int|sys||dup(int fd); }
	SYS_PIPE                 = 42  // { int|sys||pipe(void); }
	SYS_GETEGID              = 43  // { gid_t|sys||getegid(void); }
	SYS_PROFIL               = 44  // { int|sys||profil(char *samples, size_t size, u_long offset, u_int scale); }
	SYS_KTRACE               = 45  // { int|sys||ktrace(const char *fname, int ops, int facs, pid_t pid); }
	SYS_GETGID               = 47  // { gid_t|sys||getgid_with_egid(void); }
	SYS___GETLOGIN           = 49  // { int|sys||__getlogin(char *namebuf, size_t namelen); }
	SYS___SETLOGIN           = 50  // { int|sys||__setlogin(const char *namebuf); }
	SYS_ACCT                 = 51  // { int|sys||acct(const char *path); }
	SYS_IOCTL                = 54  // { int|sys||ioctl(int fd, u_long com, ... void *data); }
	SYS_REVOKE               = 56  // { int|sys||revoke(const char *path); }
	SYS_SYMLINK              = 57  // { int|sys||symlink(const char *path, const char *link); }
	SYS_READLINK             = 58  // { ssize_t|sys||readlink(const char *path, char *buf, size_t count); }
	SYS_EXECVE               = 59  // { int|sys||execve(const char *path, char * const *argp, char * const *envp); }
	SYS_UMASK                = 60  // { mode_t|sys||umask(mode_t newmask); }
	SYS_CHROOT               = 61  // { int|sys||chroot(const char *path); }
	SYS_VFORK                = 66  // { int|sys||vfork(void); }
	SYS_SBRK                 = 69  // { int|sys||sbrk(intptr_t incr); }
	SYS_SSTK                 = 70  // { int|sys||sstk(int incr); }
	SYS_VADVISE              = 72  // { int|sys||ovadvise(int anom); }
	SYS_MUNMAP               = 73  // { int|sys||munmap(void *addr, size_t len); }
	SYS_MPROTECT             = 74  // { int|sys||mprotect(void *addr, size_t len, int prot); }
	SYS_MADVISE              = 75  // { int|sys||madvise(void *addr, size_t len, int behav); }
	SYS_MINCORE              = 78  // { int|sys||mincore(void *addr, size_t len, char *vec); }
	SYS_GETGROUPS            = 79  // { int|sys||getgroups(int gidsetsize, gid_t *gidset); }
	SYS_SETGROUPS            = 80  // { int|sys||setgroups(int gidsetsize, const gid_t *gidset); }
	SYS_GETPGRP              = 81  // { int|sys||getpgrp(void); }
	SYS_SETPGID              = 82  // { int|sys||setpgid(pid_t pid, pid_t pgid); }
	SYS_DUP2                 = 90  // { int|sys||dup2(int from, int to); }
	SYS_FCNTL                = 92  // { int|sys||fcntl(int fd, int cmd, ... void *arg); }
	SYS_FSYNC                = 95  // { int|sys||fsync(int fd); }
	SYS_SETPRIORITY          = 96  // { int|sys||setpriority(int which, id_t who, int prio); }
	SYS_CONNECT              = 98  // { int|sys||connect(int s, const struct sockaddr *name, socklen_t namelen); }
	SYS_GETPRIORITY          = 100 // { int|sys||getpriority(int which, id_t who); }
	SYS_BIND                 = 104 // { int|sys||bind(int s, const struct sockaddr *name, socklen_t namelen); }
	SYS_SETSOCKOPT           = 105 // { int|sys||setsockopt(int s, int level, int name, const void *val, socklen_t valsize); }
	SYS_LISTEN               = 106 // { int|sys||listen(int s, int backlog); }
	SYS_GETSOCKOPT           = 118 // { int|sys||getsockopt(int s, int level, int name, void *val, socklen_t *avalsize); }
	SYS_READV                = 120 // { ssize_t|sys||readv(int fd, const struct iovec *iovp, int iovcnt); }
	SYS_WRITEV               = 121 // { ssize_t|sys||writev(int fd, const struct iovec *iovp, int iovcnt); }
	SYS_FCHOWN               = 123 // { int|sys||fchown(int fd, uid_t uid, gid_t gid); }
	SYS_FCHMOD               = 124 // { int|sys||fchmod(int fd, mode_t mode); }
	SYS_SETREUID             = 126 // { int|sys||setreuid(uid_t ruid, uid_t euid); }
	SYS_SETREGID             = 127 // { int|sys||setregid(gid_t rgid, gid_t egid); }
	SYS_RENAME               = 128 // { int|sys||rename(const char *from, const char *to); }
	SYS_FLOCK                = 131 // { int|sys||flock(int fd, int how); }
	SYS_MKFIFO               = 132 // { int|sys||mkfifo(const char *path, mode_t mode); }
	SYS_SENDTO               = 133 // { ssize_t|sys||sendto(int s, const void *buf, size_t len, int flags, const struct sockaddr *to, socklen_t tolen); }
	SYS_SHUTDOWN             = 134 // { int|sys||shutdown(int s, int how); }
	SYS_SOCKETPAIR           = 135 // { int|sys||socketpair(int domain, int type, int protocol, int *rsv); }
	SYS_MKDIR                = 136 // { int|sys||mkdir(const char *path, mode_t mode); }
	SYS_RMDIR                = 137 // { int|sys||rmdir(const char *path); }
	SYS_SETSID               = 147 // { int|sys||setsid(void); }
	SYS_SYSARCH              = 165 // { int|sys||sysarch(int op, void *parms); }
	SYS_PREAD                = 173 // { ssize_t|sys||pread(int fd, void *buf, size_t nbyte, int PAD, off_t offset); }
	SYS_PWRITE               = 174 // { ssize_t|sys||pwrite(int fd, const void *buf, size_t nbyte, int PAD, off_t offset); }
	SYS_NTP_ADJTIME          = 176 // { int|sys||ntp_adjtime(struct timex *tp); }
	SYS_SETGID               = 181 // { int|sys||setgid(gid_t gid); }
	SYS_SETEGID              = 182 // { int|sys||setegid(gid_t egid); }
	SYS_SETEUID              = 183 // { int|sys||seteuid(uid_t euid); }
	SYS_PATHCONF             = 191 // { long|sys||pathconf(const char *path, int name); }
	SYS_FPATHCONF            = 192 // { long|sys||fpathconf(int fd, int name); }
	SYS_GETRLIMIT            = 194 // { int|sys||getrlimit(int which, struct rlimit *rlp); }
	SYS_SETRLIMIT            = 195 // { int|sys||setrlimit(int which, const struct rlimit *rlp); }
	SYS_MMAP                 = 197 // { void *|sys||mmap(void *addr, size_t len, int prot, int flags, int fd, long PAD, off_t pos); }
	SYS_LSEEK                = 199 // { off_t|sys||lseek(int fd, int PAD, off_t offset, int whence); }
	SYS_TRUNCATE             = 200 // { int|sys||truncate(const char *path, int PAD, off_t length); }
	SYS_FTRUNCATE            = 201 // { int|sys||ftruncate(int fd, int PAD, off_t length); }
	SYS___SYSCTL             = 202 // { int|sys||__sysctl(const int *name, u_int namelen, void *old, size_t *oldlenp, const void *new, size_t newlen); }
	SYS_MLOCK                = 203 // { int|sys||mlock(const void *addr, size_t len); }
	SYS_MUNLOCK              = 204 // { int|sys||munlock(const void *addr, size_t len); }
	SYS_UNDELETE             = 205 // { int|sys||undelete(const char *path); }
	SYS_GETPGID              = 207 // { pid_t|sys||getpgid(pid_t pid); }
	SYS_REBOOT               = 208 // { int|sys||reboot(int opt, char *bootstr); }
	SYS_POLL                 = 209 // { int|sys||poll(struct pollfd *fds, u_int nfds, int timeout); }
	SYS_SEMGET               = 221 // { int|sys||semget(key_t key, int nsems, int semflg); }
	SYS_SEMOP                = 222 // { int|sys||semop(int semid, struct sembuf *sops, size_t nsops); }
	SYS_SEMCONFIG            = 223 // { int|sys||semconfig(int flag); }
	SYS_MSGGET               = 225 // { int|sys||msgget(key_t key, int msgflg); }
	SYS_MSGSND               = 226 // { int|sys||msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }
	SYS_MSGRCV               = 227 // { ssize_t|sys||msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
	SYS_SHMAT                = 228 // { void *|sys||shmat(int shmid, const void *shmaddr, int shmflg); }
	SYS_SHMDT                = 230 // { int|sys||shmdt(const void *shmaddr); }
	SYS_SHMGET               = 231 // { int|sys||shmget(key_t key, size_t size, int shmflg); }
	SYS_TIMER_CREATE         = 235 // { int|sys||timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid); }
	SYS_TIMER_DELETE         = 236 // { int|sys||timer_delete(timer_t timerid); }
	SYS_TIMER_GETOVERRUN     = 239 // { int|sys||timer_getoverrun(timer_t timerid); }
	SYS_FDATASYNC            = 241 // { int|sys||fdatasync(int fd); }
	SYS_MLOCKALL             = 242 // { int|sys||mlockall(int flags); }
	SYS_MUNLOCKALL           = 243 // { int|sys||munlockall(void); }
	SYS_SIGQUEUEINFO         = 245 // { int|sys||sigqueueinfo(pid_t pid, const siginfo_t *info); }
	SYS_MODCTL               = 246 // { int|sys||modctl(int cmd, void *arg); }
	SYS___POSIX_RENAME       = 270 // { int|sys||__posix_rename(const char *from, const char *to); }
	SYS_SWAPCTL              = 271 // { int|sys||swapctl(int cmd, void *arg, int misc); }
	SYS_MINHERIT             = 273 // { int|sys||minherit(void *addr, size_t len, int inherit); }
	SYS_LCHMOD               = 274 // { int|sys||lchmod(const char *path, mode_t mode); }
	SYS_LCHOWN               = 275 // { int|sys||lchown(const char *path, uid_t uid, gid_t gid); }
	SYS_MSYNC                = 277 // { int|sys|13|msync(void *addr, size_t len, int flags); }
	SYS___POSIX_CHOWN        = 283 // { int|sys||__posix_chown(const char *path, uid_t uid, gid_t gid); }
	SYS___POSIX_FCHOWN       = 284 // { int|sys||__posix_fchown(int fd, uid_t uid, gid_t gid); }
	SYS___POSIX_LCHOWN       = 285 // { int|sys||__posix_lchown(const char *path, uid_t uid, gid_t gid); }
	SYS_GETSID               = 286 // { pid_t|sys||getsid(pid_t pid); }
	SYS___CLONE              = 287 // { pid_t|sys||__clone(int flags, void *stack); }
	SYS_FKTRACE              = 288 // { int|sys||fktrace(int fd, int ops, int facs, pid_t pid); }
	SYS_PREADV               = 289 // { ssize_t|sys||preadv(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }
	SYS_PWRITEV              = 290 // { ssize_t|sys||pwritev(int fd, const struct iovec *iovp, int iovcnt, int PAD, off_t offset); }
	SYS___GETCWD             = 296 // { int|sys||__getcwd(char *bufp, size_t length); }
	SYS_FCHROOT              = 297 // { int|sys||fchroot(int fd); }
	SYS_LCHFLAGS             = 304 // { int|sys||lchflags(const char *path, u_long flags); }
	SYS_ISSETUGID            = 305 // { int|sys||issetugid(void); }
	SYS_UTRACE               = 306 // { int|sys||utrace(const char *label, void *addr, size_t len); }
	SYS_GETCONTEXT           = 307 // { int|sys||getcontext(struct __ucontext *ucp); }
	SYS_SETCONTEXT           = 308 // { int|sys||setcontext(const struct __ucontext *ucp); }
	SYS__LWP_CREATE          = 309 // { int|sys||_lwp_create(const struct __ucontext *ucp, u_long flags, lwpid_t *new_lwp); }
	SYS__LWP_EXIT            = 310 // { int|sys||_lwp_exit(void); }
	SYS__LWP_SELF            = 311 // { lwpid_t|sys||_lwp_self(void); }
	SYS__LWP_WAIT            = 312 // { int|sys||_lwp_wait(lwpid_t wait_for, lwpid_t *departed); }
	SYS__LWP_SUSPEND         = 313 // { int|sys||_lwp_suspend(lwpid_t target); }
	SYS__LWP_CONTINUE        = 314 // { int|sys||_lwp_continue(lwpid_t target); }
	SYS__LWP_WAKEUP          = 315 // { int|sys||_lwp_wakeup(lwpid_t target); }
	SYS__LWP_GETPRIVATE      = 316 // { void *|sys||_lwp_getprivate(void); }
	SYS__LWP_SETPRIVATE      = 317 // { void|sys||_lwp_setprivate(void *ptr); }
	SYS__LWP_KILL            = 318 // { int|sys||_lwp_kill(lwpid_t target, int signo); }
	SYS__LWP_DETACH          = 319 // { int|sys||_lwp_detach(lwpid_t target); }
	SYS__LWP_UNPARK          = 321 // { int|sys||_lwp_unpark(lwpid_t target, const void *hint); }
	SYS__LWP_UNPARK_ALL      = 322 // { ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, size_t ntargets, const void *hint); }
	SYS__LWP_SETNAME         = 323 // { int|sys||_lwp_setname(lwpid_t target, const char *name); }
	SYS__LWP_GETNAME         = 324 // { int|sys||_lwp_getname(lwpid_t target, char *name, size_t len); }
	SYS__LWP_CTL             = 325 // { int|sys||_lwp_ctl(int features, struct lwpctl **address); }
	SYS___SIGACTION_SIGTRAMP = 340 // { int|sys||__sigaction_sigtramp(int signum, const struct sigaction *nsa, struct sigaction *osa, const void *tramp, int vers); }
	SYS_PMC_GET_INFO         = 341 // { int|sys||pmc_get_info(int ctr, int op, void *args); }
	SYS_PMC_CONTROL          = 342 // { int|sys||pmc_control(int ctr, int op, void *args); }
	SYS_RASCTL               = 343 // { int|sys||rasctl(void *addr, size_t len, int op); }
	SYS_KQUEUE               = 344 // { int|sys||kqueue(void); }
	SYS__SCHED_SETPARAM      = 346 // { int|sys||_sched_setparam(pid_t pid, lwpid_t lid, int policy, const struct sched_param *params); }
	SYS__SCHED_GETPARAM      = 347 // { int|sys||_sched_getparam(pid_t pid, lwpid_t lid, int *policy, struct sched_param *params); }
	SYS__SCHED_SETAFFINITY   = 348 // { int|sys||_sched_setaffinity(pid_t pid, lwpid_t lid, size_t size, const cpuset_t *cpuset); }
	SYS__SCHED_GETAFFINITY   = 349 // { int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, size_t size, cpuset_t *cpuset); }
	SYS_SCHED_YIELD          = 350 // { int|sys||sched_yield(void); }
	SYS_FSYNC_RANGE          = 354 // { int|sys||fsync_range(int fd, int flags, off_t start, off_t length); }
	SYS_UUIDGEN              = 355 // { int|sys||uuidgen(struct uuid *store, int count); }
	SYS_GETVFSSTAT           = 356 // { int|sys||getvfsstat(struct statvfs *buf, size_t bufsize, int flags); }
	SYS_STATVFS1             = 357 // { int|sys||statvfs1(const char *path, struct statvfs *buf, int flags); }
	SYS_FSTATVFS1            = 358 // { int|sys||fstatvfs1(int fd, struct statvfs *buf, int flags); }
	SYS_EXTATTRCTL           = 360 // { int|sys||extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); }
	SYS_EXTATTR_SET_FILE     = 361 // { int|sys||extattr_set_file(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }
	SYS_EXTATTR_GET_FILE     = 362 // { ssize_t|sys||extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	SYS_EXTATTR_DELETE_FILE  = 363 // { int|sys||extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }
	SYS_EXTATTR_SET_FD       = 364 // { int|sys||extattr_set_fd(int fd, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }
	SYS_EXTATTR_GET_FD       = 365 // { ssize_t|sys||extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	SYS_EXTATTR_DELETE_FD    = 366 // { int|sys||extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }
	SYS_EXTATTR_SET_LINK     = 367 // { int|sys||extattr_set_link(const char *path, int attrnamespace, const char *attrname, const void *data, size_t nbytes); }
	SYS_EXTATTR_GET_LINK     = 368 // { ssize_t|sys||extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
	SYS_EXTATTR_DELETE_LINK  = 369 // { int|sys||extattr_delete_link(const char *path, int attrnamespace, const char *attrname); }
	SYS_EXTATTR_LIST_FD      = 370 // { ssize_t|sys||extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }
	SYS_EXTATTR_LIST_FILE    = 371 // { ssize_t|sys||extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes); }
	SYS_EXTATTR_LIST_LINK    = 372 // { ssize_t|sys||extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes); }
	SYS_SETXATTR             = 375 // { int|sys||setxattr(const char *path, const char *name, const void *value, size_t size, int flags); }
	SYS_LSETXATTR            = 376 // { int|sys||lsetxattr(const char *path, const char *name, const void *value, size_t size, int flags); }
	SYS_FSETXATTR            = 377 // { int|sys||fsetxattr(int fd, const char *name, const void *value, size_t size, int flags); }
	SYS_GETXATTR             = 378 // { int|sys||getxattr(const char *path, const char *name, void *value, size_t size); }
	SYS_LGETXATTR            = 379 // { int|sys||lgetxattr(const char *path, const char *name, void *value, size_t size); }
	SYS_FGETXATTR            = 380 // { int|sys||fgetxattr(int fd, const char *name, void *value, size_t size); }
	SYS_LISTXATTR            = 381 // { int|sys||listxattr(const char *path, char *list, size_t size); }
	SYS_LLISTXATTR           = 382 // { int|sys||llistxattr(const char *path, char *list, size_t size); }
	SYS_FLISTXATTR           = 383 // { int|sys||flistxattr(int fd, char *list, size_t size); }
	SYS_REMOVEXATTR          = 384 // { int|sys||removexattr(const char *path, const char *name); }
	SYS_LREMOVEXATTR         = 385 // { int|sys||lremovexattr(const char *path, const char *name); }
	SYS_FREMOVEXATTR         = 386 // { int|sys||fremovexattr(int fd, const char *name); }
	SYS_GETDENTS             = 390 // { int|sys|30|getdents(int fd, char *buf, size_t count); }
	SYS_SOCKET               = 394 // { int|sys|30|socket(int domain, int type, int protocol); }
	SYS_GETFH                = 395 // { int|sys|30|getfh(const char *fname, void *fhp, size_t *fh_size); }
	SYS_MOUNT                = 410 // { int|sys|50|mount(const char *type, const char *path, int flags, void *data, size_t data_len); }
	SYS_MREMAP               = 411 // { void *|sys||mremap(void *old_address, size_t old_size, void *new_address, size_t new_size, int flags); }
	SYS_PSET_CREATE          = 412 // { int|sys||pset_create(psetid_t *psid); }
	SYS_PSET_DESTROY         = 413 // { int|sys||pset_destroy(psetid_t psid); }
	SYS_PSET_ASSIGN          = 414 // { int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, psetid_t *opsid); }
	SYS__PSET_BIND           = 415 // { int|sys||_pset_bind(idtype_t idtype, id_t first_id, id_t second_id, psetid_t psid, psetid_t *opsid); }
	SYS_POSIX_FADVISE        = 416 // { int|sys|50|posix_fadvise(int fd, int PAD, off_t offset, off_t len, int advice); }
	SYS_SELECT               = 417 // { int|sys|50|select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }
	SYS_GETTIMEOFDAY         = 418 // { int|sys|50|gettimeofday(struct timeval *tp, void *tzp); }
	SYS_SETTIMEOFDAY         = 419 // { int|sys|50|settimeofday(const struct timeval *tv, const void *tzp); }
	SYS_UTIMES               = 420 // { int|sys|50|utimes(const char *path, const struct timeval *tptr); }
	SYS_ADJTIME              = 421 // { int|sys|50|adjtime(const struct timeval *delta, struct timeval *olddelta); }
	SYS_FUTIMES              = 423 // { int|sys|50|futimes(int fd, const struct timeval *tptr); }
	SYS_LUTIMES              = 424 // { int|sys|50|lutimes(const char *path, const struct timeval *tptr); }
	SYS_SETITIMER            = 425 // { int|sys|50|setitimer(int which, const struct itimerval *itv, struct itimerval *oitv); }
	SYS_GETITIMER            = 426 // { int|sys|50|getitimer(int which, struct itimerval *itv); }
	SYS_CLOCK_GETTIME        = 427 // { int|sys|50|clock_gettime(clockid_t clock_id, struct timespec *tp); }
	SYS_CLOCK_SETTIME        = 428 // { int|sys|50|clock_settime(clockid_t clock_id, const struct timespec *tp); }
	SYS_CLOCK_GETRES         = 429 // { int|sys|50|clock_getres(clockid_t clock_id, struct timespec *tp); }
	SYS_NANOSLEEP            = 430 // { int|sys|50|nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }
	SYS___SIGTIMEDWAIT       = 431 // { int|sys|50|__sigtimedwait(const sigset_t *set, siginfo_t *info, struct timespec *timeout); }
	SYS__LWP_PARK            = 434 // { int|sys|50|_lwp_park(const struct timespec *ts, lwpid_t unpark, const void *hint, const void *unparkhint); }
	SYS_KEVENT               = 435 // { int|sys|50|kevent(int fd, const struct kevent *changelist, size_t nchanges, struct kevent *eventlist, size_t nevents, const struct timespec *timeout); }
	SYS_PSELECT              = 436 // { int|sys|50|pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *mask); }
	SYS_POLLTS               = 437 // { int|sys|50|pollts(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *mask); }
	SYS_STAT                 = 439 // { int|sys|50|stat(const char *path, struct stat *ub); }
	SYS_FSTAT                = 440 // { int|sys|50|fstat(int fd, struct stat *sb); }
	SYS_LSTAT                = 441 // { int|sys|50|lstat(const char *path, struct stat *ub); }
	SYS___SEMCTL             = 442 // { int|sys|50|__semctl(int semid, int semnum, int cmd, ... union __semun *arg); }
	SYS_SHMCTL               = 443 // { int|sys|50|shmctl(int shmid, int cmd, struct shmid_ds *buf); }
	SYS_MSGCTL               = 444 // { int|sys|50|msgctl(int msqid, int cmd, struct msqid_ds *buf); }
	SYS_GETRUSAGE            = 445 // { int|sys|50|getrusage(int who, struct rusage *rusage); }
	SYS_TIMER_SETTIME        = 446 // { int|sys|50|timer_settime(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue); }
	SYS_TIMER_GETTIME        = 447 // { int|sys|50|timer_gettime(timer_t timerid, struct itimerspec *value); }
	SYS_NTP_GETTIME          = 448 // { int|sys|50|ntp_gettime(struct ntptimeval *ntvp); }
	SYS_WAIT4                = 449 // { int|sys|50|wait4(pid_t pid, int *status, int options, struct rusage *rusage); }
	SYS_MKNOD                = 450 // { int|sys|50|mknod(const char *path, mode_t mode, dev_t dev); }
	SYS_FHSTAT               = 451 // { int|sys|50|fhstat(const void *fhp, size_t fh_size, struct stat *sb); }
	SYS_PIPE2                = 453 // { int|sys||pipe2(int *fildes, int flags); }
	SYS_DUP3                 = 454 // { int|sys||dup3(int from, int to, int flags); }
	SYS_KQUEUE1              = 455 // { int|sys||kqueue1(int flags); }
	SYS_PACCEPT              = 456 // { int|sys||paccept(int s, struct sockaddr *name, socklen_t *anamelen, const sigset_t *mask, int flags); }
	SYS_LINKAT               = 457 // { int|sys||linkat(int fd1, const char *name1, int fd2, const char *name2, int flags); }
	SYS_RENAMEAT             = 458 // { int|sys||renameat(int fromfd, const char *from, int tofd, const char *to); }
	SYS_MKFIFOAT             = 459 // { int|sys||mkfifoat(int fd, const char *path, mode_t mode); }
	SYS_MKNODAT              = 460 // { int|sys||mknodat(int fd, const char *path, mode_t mode, uint32_t dev); }
	SYS_MKDIRAT              = 461 // { int|sys||mkdirat(int fd, const char *path, mode_t mode); }
	SYS_FACCESSAT            = 462 // { int|sys||faccessat(int fd, const char *path, int amode, int flag); }
	SYS_FCHMODAT             = 463 // { int|sys||fchmodat(int fd, const char *path, mode_t mode, int flag); }
	SYS_FCHOWNAT             = 464 // { int|sys||fchownat(int fd, const char *path, uid_t owner, gid_t group, int flag); }
	SYS_FEXECVE              = 465 // { int|sys||fexecve(int fd, char * const *argp, char * const *envp); }
	SYS_FSTATAT              = 466 // { int|sys||fstatat(int fd, const char *path, struct stat *buf, int flag); }
	SYS_UTIMENSAT            = 467 // { int|sys||utimensat(int fd, const char *path, const struct timespec *tptr, int flag); }
	SYS_OPENAT               = 468 // { int|sys||openat(int fd, const char *path, int oflags, ... mode_t mode); }
	SYS_READLINKAT           = 469 // { int|sys||readlinkat(int fd, const char *path, char *buf, size_t bufsize); }
	SYS_SYMLINKAT            = 470 // { int|sys||symlinkat(const char *path1, int fd, const char *path2); }
	SYS_UNLINKAT             = 471 // { int|sys||unlinkat(int fd, const char *path, int flag); }
	SYS_FUTIMENS             = 472 // { int|sys||futimens(int fd, const struct timespec *tptr); }
	SYS___QUOTACTL           = 473 // { int|sys||__quotactl(const char *path, struct quotactl_args *args); }
	SYS_POSIX_SPAWN          = 474 // { int|sys||posix_spawn(pid_t *pid, const char *path, const struct posix_spawn_file_actions *file_actions, const struct posix_spawnattr *attrp, char *const *argv, char *const *envp); }
	SYS_RECVMMSG             = 475 // { int|sys||recvmmsg(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags, struct timespec *timeout); }
	SYS_SENDMMSG             = 476 // { int|sys||sendmmsg(int s, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags); }
)

- f 64de7a37ee027d9e84623e8a584b4e74033b748f6ce40db149948a9247cc1263 vendor/golang.org/x/sys/unix/ztypes_linux_386.go
+ f 31b2bacafe3e1fa58d4a6102b3817add666cb815851d5bb3b398dc0e2e379108 vendor/golang.org/x/sys/unix/ztypes_linux_386.go
dmppatch 13
@@ -13599,24 +13599,327 @@
 2%5Duint32%0A%7D%0A%0A
+type SignalfdSiginfo struct %7B%0A%09Signo   uint32%0A%09Errno   int32%0A%09Code    int32%0A%09Pid     uint32%0A%09Uid     uint32%0A%09Fd      int32%0A%09Tid     uint32%0A%09Band    uint32%0A%09Overrun uint32%0A%09Trapno  uint32%0A%09Status  int32%0A%09Int     int32%0A%09Ptr     uint64%0A%09Utime   uint64%0A%09Stime   uint64%0A%09Addr    uint64%0A%09_       %5B48%5Duint8%0A%7D%0A%0A
 const RNDGET
@@ -49987,24 +49987,73 @@
    = 0xa%0A)%0A%0A
+type ScmTimestamping struct %7B%0A%09Ts %5B3%5DTimespec%0A%7D%0A%0A
 const (%0A%09SOF
@@ -50689,10 +50689,217 @@
  0x7fff%0A
+%0A%09SCM_TSTAMP_SND   = 0x0%0A%09SCM_TSTAMP_SCHED = 0x1%0A%09SCM_TSTAMP_ACK   = 0x2%0A
 )%0A
+%0Atype SockExtendedErr struct %7B%0A%09Errno  uint32%0A%09Origin uint8%0A%09Type   uint8%0A%09Code   uint8%0A%09Pad    uint8%0A%09Info   uint32%0A%09Data   uint32%0A%7D%0A
- f 2315ede1b83b83c96d31d5b0c7c6754506bcf717441c2ac7bb0e05d1b6ff2bce vendor/golang.org/x/sys/unix/ztypes_linux_amd64.go
+ f d4d2987cadd89c6ae7afc27503c00848da8e13555ae044a3669507e56bfdd082 vendor/golang.org/x/sys/unix/ztypes_linux_amd64.go
dmppatch 13
@@ -13847,24 +13847,327 @@
 6%5Duint64%0A%7D%0A%0A
+type SignalfdSiginfo struct %7B%0A%09Signo   uint32%0A%09Errno   int32%0A%09Code    int32%0A%09Pid     uint32%0A%09Uid     uint32%0A%09Fd      int32%0A%09Tid     uint32%0A%09Band    uint32%0A%09Overrun uint32%0A%09Trapno  uint32%0A%09Status  int32%0A%09Int     int32%0A%09Ptr     uint64%0A%09Utime   uint64%0A%09Stime   uint64%0A%09Addr    uint64%0A%09_       %5B48%5Duint8%0A%7D%0A%0A
 const RNDGET
@@ -50199,24 +50199,73 @@
    = 0xa%0A)%0A%0A
+type ScmTimestamping struct %7B%0A%09Ts %5B3%5DTimespec%0A%7D%0A%0A
 const (%0A%09SOF
@@ -50901,10 +50901,217 @@
  0x7fff%0A
+%0A%09SCM_TSTAMP_SND   = 0x0%0A%09SCM_TSTAMP_SCHED = 0x1%0A%09SCM_TSTAMP_ACK   = 0x2%0A
 )%0A
+%0Atype SockExtendedErr struct %7B%0A%09Errno  uint32%0A%09Origin uint8%0A%09Type   uint8%0A%09Code   uint8%0A%09Pad    uint8%0A%09Info   uint32%0A%09Data   uint32%0A%7D%0A
- f d98981a7125285fe11a17c398c59f079520bcbc0b107ea8738613656464083d8 vendor/golang.org/x/sys/unix/ztypes_linux_arm.go
+ f 061443b239d83f1477ab94b3ee49653200591a0a46d85e893d07745d62783b00 vendor/golang.org/x/sys/unix/ztypes_linux_arm.go
dmppatch 13
@@ -13426,24 +13426,327 @@
 2%5Duint32%0A%7D%0A%0A
+type SignalfdSiginfo struct %7B%0A%09Signo   uint32%0A%09Errno   int32%0A%09Code    int32%0A%09Pid     uint32%0A%09Uid     uint32%0A%09Fd      int32%0A%09Tid     uint32%0A%09Band    uint32%0A%09Overrun uint32%0A%09Trapno  uint32%0A%09Status  int32%0A%09Int     int32%0A%09Ptr     uint64%0A%09Utime   uint64%0A%09Stime   uint64%0A%09Addr    uint64%0A%09_       %5B48%5Duint8%0A%7D%0A%0A
 const RNDGET
@@ -49850,24 +49850,73 @@
    = 0xa%0A)%0A%0A
+type ScmTimestamping struct %7B%0A%09Ts %5B3%5DTimespec%0A%7D%0A%0A
 const (%0A%09SOF
@@ -50552,10 +50552,217 @@
  0x7fff%0A
+%0A%09SCM_TSTAMP_SND   = 0x0%0A%09SCM_TSTAMP_SCHED = 0x1%0A%09SCM_TSTAMP_ACK   = 0x2%0A
 )%0A
+%0Atype SockExtendedErr struct %7B%0A%09Errno  uint32%0A%09Origin uint8%0A%09Type   uint8%0A%09Code   uint8%0A%09Pad    uint8%0A%09Info   uint32%0A%09Data   uint32%0A%7D%0A
- f e08cbdc145f21dceada218957335508971d5f458d30d0a3f2d989a9e77dbbdd6 vendor/golang.org/x/sys/unix/ztypes_linux_arm64.go
+ f d7669210c86749e0755d8e5c76801e29a3af3547e84aab70d398485c69efef57 vendor/golang.org/x/sys/unix/ztypes_linux_arm64.go
dmppatch 13
@@ -13491,24 +13491,327 @@
 6%5Duint64%0A%7D%0A%0A
+type SignalfdSiginfo struct %7B%0A%09Signo   uint32%0A%09Errno   int32%0A%09Code    int32%0A%09Pid     uint32%0A%09Uid     uint32%0A%09Fd      int32%0A%09Tid     uint32%0A%09Band    uint32%0A%09Overrun uint32%0A%09Trapno  uint32%0A%09Status  int32%0A%09Int     int32%0A%09Ptr     uint64%0A%09Utime   uint64%0A%09Stime   uint64%0A%09Addr    uint64%0A%09_       %5B48%5Duint8%0A%7D%0A%0A
 const RNDGET
@@ -49843,24 +49843,73 @@
    = 0xa%0A)%0A%0A
+type ScmTimestamping struct %7B%0A%09Ts %5B3%5DTimespec%0A%7D%0A%0A
 const (%0A%09SOF
@@ -50545,10 +50545,217 @@
  0x7fff%0A
+%0A%09SCM_TSTAMP_SND   = 0x0%0A%09SCM_TSTAMP_SCHED = 0x1%0A%09SCM_TSTAMP_ACK   = 0x2%0A
 )%0A
+%0Atype SockExtendedErr struct %7B%0A%09Errno  uint32%0A%09Origin uint8%0A%09Type   uint8%0A%09Code   uint8%0A%09Pad    uint8%0A%09Info   uint32%0A%09Data   uint32%0A%7D%0A
- f 2d614963a9c53697ecf7d140eb4c0f95b7e69ccf719e93e98ca8c2d3680a4e03 vendor/golang.org/x/sys/unix/ztypes_linux_mips.go
+ f 9dd13a05b8f472e21291d9e1356ba06c4fc4d13f5133b90ffe0d2b7b1484cecd vendor/golang.org/x/sys/unix/ztypes_linux_mips.go
dmppatch 13
@@ -13514,24 +13514,327 @@
 2%5Duint32%0A%7D%0A%0A
+type SignalfdSiginfo struct %7B%0A%09Signo   uint32%0A%09Errno   int32%0A%09Code    int32%0A%09Pid     uint32%0A%09Uid     uint32%0A%09Fd      int32%0A%09Tid     uint32%0A%09Band    uint32%0A%09Overrun uint32%0A%09Trapno  uint32%0A%09Status  int32%0A%09Int     int32%0A%09Ptr     uint64%0A%09Utime   uint64%0A%09Stime   uint64%0A%09Addr    uint64%0A%09_       %5B48%5Duint8%0A%7D%0A%0A
 const RNDGET
@@ -49957,24 +49957,73 @@
    = 0xa%0A)%0A%0A
+type ScmTimestamping struct %7B%0A%09Ts %5B3%5DTimespec%0A%7D%0A%0A
 const (%0A%09SOF
@@ -50659,10 +50659,217 @@
  0x7fff%0A
+%0A%09SCM_TSTAMP_SND   = 0x0%0A%09SCM_TSTAMP_SCHED = 0x1%0A%09SCM_TSTAMP_ACK   = 0x2%0A
 )%0A
+%0Atype SockExtendedErr struct %7B%0A%09Errno  uint32%0A%09Origin uint8%0A%09Type   uint8%0A%09Code   uint8%0A%09Pad    uint8%0A%09Info   uint32%0A%09Data   uint32%0A%7D%0A
- f 1759d7b153400a21ea5d7788963f59b000d6aff21bddce8f9ef62ab32b744522 vendor/golang.org/x/sys/unix/ztypes_linux_mips64.go
+ f 5451cc7ed4b9cccacc144918af2ad32fddb568d38507b4be3535ae86c2b2ee44 vendor/golang.org/x/sys/unix/ztypes_linux_mips64.go
dmppatch 13
@@ -13529,24 +13529,327 @@
 6%5Duint64%0A%7D%0A%0A
+type SignalfdSiginfo struct %7B%0A%09Signo   uint32%0A%09Errno   int32%0A%09Code    int32%0A%09Pid     uint32%0A%09Uid     uint32%0A%09Fd      int32%0A%09Tid     uint32%0A%09Band    uint32%0A%09Overrun uint32%0A%09Trapno  uint32%0A%09Status  int32%0A%09Int     int32%0A%09Ptr     uint64%0A%09Utime   uint64%0A%09Stime   uint64%0A%09Addr    uint64%0A%09_       %5B48%5Duint8%0A%7D%0A%0A
 const RNDGET
@@ -49885,24 +49885,73 @@
    = 0xa%0A)%0A%0A
+type ScmTimestamping struct %7B%0A%09Ts %5B3%5DTimespec%0A%7D%0A%0A
 const (%0A%09SOF
@@ -50587,10 +50587,217 @@
  0x7fff%0A
+%0A%09SCM_TSTAMP_SND   = 0x0%0A%09SCM_TSTAMP_SCHED = 0x1%0A%09SCM_TSTAMP_ACK   = 0x2%0A
 )%0A
+%0Atype SockExtendedErr struct %7B%0A%09Errno  uint32%0A%09Origin uint8%0A%09Type   uint8%0A%09Code   uint8%0A%09Pad    uint8%0A%09Info   uint32%0A%09Data   uint32%0A%7D%0A
- f 5a75e3af7ac707074f0a965d64447f461e77e35f67a9aa1ea82b0c65c8b5f65a vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go
+ f 5b9c48a021a07e0cf85ebd334c8e32111ab4d27ca94c8d440c8dfdcc3eb66eb4 vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go
dmppatch 13
@@ -13531,24 +13531,327 @@
 6%5Duint64%0A%7D%0A%0A
+type SignalfdSiginfo struct %7B%0A%09Signo   uint32%0A%09Errno   int32%0A%09Code    int32%0A%09Pid     uint32%0A%09Uid     uint32%0A%09Fd      int32%0A%09Tid     uint32%0A%09Band    uint32%0A%09Overrun uint32%0A%09Trapno  uint32%0A%09Status  int32%0A%09Int     int32%0A%09Ptr     uint64%0A%09Utime   uint64%0A%09Stime   uint64%0A%09Addr    uint64%0A%09_       %5B48%5Duint8%0A%7D%0A%0A
 const RNDGET
@@ -49887,24 +49887,73 @@
    = 0xa%0A)%0A%0A
+type ScmTimestamping struct %7B%0A%09Ts %5B3%5DTimespec%0A%7D%0A%0A
 const (%0A%09SOF
@@ -50589,10 +50589,217 @@
  0x7fff%0A
+%0A%09SCM_TSTAMP_SND   = 0x0%0A%09SCM_TSTAMP_SCHED = 0x1%0A%09SCM_TSTAMP_ACK   = 0x2%0A
 )%0A
+%0Atype SockExtendedErr struct %7B%0A%09Errno  uint32%0A%09Origin uint8%0A%09Type   uint8%0A%09Code   uint8%0A%09Pad    uint8%0A%09Info   uint32%0A%09Data   uint32%0A%7D%0A
- f 5bac5ce7ac55cd43bdb640995bff01cdf863d5255b6338db544ca0f78f904442 vendor/golang.org/x/sys/unix/ztypes_linux_mipsle.go
+ f 03d81e1a1b2133e51f734fc74dd41a5a789c43c93a822a479ae22d18f28eb33f vendor/golang.org/x/sys/unix/ztypes_linux_mipsle.go
dmppatch 13
@@ -13516,24 +13516,327 @@
 2%5Duint32%0A%7D%0A%0A
+type SignalfdSiginfo struct %7B%0A%09Signo   uint32%0A%09Errno   int32%0A%09Code    int32%0A%09Pid     uint32%0A%09Uid     uint32%0A%09Fd      int32%0A%09Tid     uint32%0A%09Band    uint32%0A%09Overrun uint32%0A%09Trapno  uint32%0A%09Status  int32%0A%09Int     int32%0A%09Ptr     uint64%0A%09Utime   uint64%0A%09Stime   uint64%0A%09Addr    uint64%0A%09_       %5B48%5Duint8%0A%7D%0A%0A
 const RNDGET
@@ -49959,24 +49959,73 @@
    = 0xa%0A)%0A%0A
+type ScmTimestamping struct %7B%0A%09Ts %5B3%5DTimespec%0A%7D%0A%0A
 const (%0A%09SOF
@@ -50661,10 +50661,217 @@
  0x7fff%0A
+%0A%09SCM_TSTAMP_SND   = 0x0%0A%09SCM_TSTAMP_SCHED = 0x1%0A%09SCM_TSTAMP_ACK   = 0x2%0A
 )%0A
+%0Atype SockExtendedErr struct %7B%0A%09Errno  uint32%0A%09Origin uint8%0A%09Type   uint8%0A%09Code   uint8%0A%09Pad    uint8%0A%09Info   uint32%0A%09Data   uint32%0A%7D%0A
- f 7956d8e17c09bd4d092608db377cd08410ec03638dd7e19dcb53ca7c6884366d vendor/golang.org/x/sys/unix/ztypes_linux_ppc64.go
+ f d08154553772fc7d3cd8cbf25737cec9a0564b26726b99c803df02ce3ebfe092 vendor/golang.org/x/sys/unix/ztypes_linux_ppc64.go
dmppatch 13
@@ -13671,24 +13671,327 @@
 6%5Duint64%0A%7D%0A%0A
+type SignalfdSiginfo struct %7B%0A%09Signo   uint32%0A%09Errno   int32%0A%09Code    int32%0A%09Pid     uint32%0A%09Uid     uint32%0A%09Fd      int32%0A%09Tid     uint32%0A%09Band    uint32%0A%09Overrun uint32%0A%09Trapno  uint32%0A%09Status  int32%0A%09Int     int32%0A%09Ptr     uint64%0A%09Utime   uint64%0A%09Stime   uint64%0A%09Addr    uint64%0A%09_       %5B48%5Duint8%0A%7D%0A%0A
 const RNDGET
@@ -50029,24 +50029,73 @@
    = 0xa%0A)%0A%0A
+type ScmTimestamping struct %7B%0A%09Ts %5B3%5DTimespec%0A%7D%0A%0A
 const (%0A%09SOF
@@ -50731,10 +50731,217 @@
  0x7fff%0A
+%0A%09SCM_TSTAMP_SND   = 0x0%0A%09SCM_TSTAMP_SCHED = 0x1%0A%09SCM_TSTAMP_ACK   = 0x2%0A
 )%0A
+%0Atype SockExtendedErr struct %7B%0A%09Errno  uint32%0A%09Origin uint8%0A%09Type   uint8%0A%09Code   uint8%0A%09Pad    uint8%0A%09Info   uint32%0A%09Data   uint32%0A%7D%0A
- f 41a1c4801f57e22a8fb363a153e4b9e35a54efeb13ea17a42eff651b6612931e vendor/golang.org/x/sys/unix/ztypes_linux_ppc64le.go
+ f 8275e5b2bb913dfc0fd1fad3fe5d4391c09dc25cec2eb12cb30cf39a8232d32b vendor/golang.org/x/sys/unix/ztypes_linux_ppc64le.go
dmppatch 13
@@ -13673,24 +13673,327 @@
 6%5Duint64%0A%7D%0A%0A
+type SignalfdSiginfo struct %7B%0A%09Signo   uint32%0A%09Errno   int32%0A%09Code    int32%0A%09Pid     uint32%0A%09Uid     uint32%0A%09Fd      int32%0A%09Tid     uint32%0A%09Band    uint32%0A%09Overrun uint32%0A%09Trapno  uint32%0A%09Status  int32%0A%09Int     int32%0A%09Ptr     uint64%0A%09Utime   uint64%0A%09Stime   uint64%0A%09Addr    uint64%0A%09_       %5B48%5Duint8%0A%7D%0A%0A
 const RNDGET
@@ -50031,24 +50031,73 @@
    = 0xa%0A)%0A%0A
+type ScmTimestamping struct %7B%0A%09Ts %5B3%5DTimespec%0A%7D%0A%0A
 const (%0A%09SOF
@@ -50733,10 +50733,217 @@
  0x7fff%0A
+%0A%09SCM_TSTAMP_SND   = 0x0%0A%09SCM_TSTAMP_SCHED = 0x1%0A%09SCM_TSTAMP_ACK   = 0x2%0A
 )%0A
+%0Atype SockExtendedErr struct %7B%0A%09Errno  uint32%0A%09Origin uint8%0A%09Type   uint8%0A%09Code   uint8%0A%09Pad    uint8%0A%09Info   uint32%0A%09Data   uint32%0A%7D%0A
- f 7ad83a1b3ac4dc455acaaed37bfe108673519721ee04a9c8f8f10ab6a2a9da0b vendor/golang.org/x/sys/unix/ztypes_linux_riscv64.go
+ f 595470c64ad038beb2a5e2cef666e9b74ffb8ce6d0d2919394ee836f1fd71cdf vendor/golang.org/x/sys/unix/ztypes_linux_riscv64.go
dmppatch 18
@@ -3390,27 +3390,26 @@
 t16%0A
-%09Path   %5B108%5Duint8%0A
+%09Path   %5B108%5Dint8%0A
 %7D%0A%0At
@@ -13788,24 +13788,327 @@
  %5B16%5Duint64%0A
+%7D%0A%0Atype SignalfdSiginfo struct %7B%0A%09Signo   uint32%0A%09Errno   int32%0A%09Code    int32%0A%09Pid     uint32%0A%09Uid     uint32%0A%09Fd      int32%0A%09Tid     uint32%0A%09Band    uint32%0A%09Overrun uint32%0A%09Trapno  uint32%0A%09Status  int32%0A%09Int     int32%0A%09Ptr     uint64%0A%09Utime   uint64%0A%09Stime   uint64%0A%09Addr    uint64%0A%09_       %5B48%5Duint8%0A
 %7D%0A%0Aconst RND
@@ -50145,24 +50145,73 @@
    = 0xa%0A)%0A%0A
+type ScmTimestamping struct %7B%0A%09Ts %5B3%5DTimespec%0A%7D%0A%0A
 const (%0A%09SOF
@@ -50847,10 +50847,217 @@
  0x7fff%0A
+%0A%09SCM_TSTAMP_SND   = 0x0%0A%09SCM_TSTAMP_SCHED = 0x1%0A%09SCM_TSTAMP_ACK   = 0x2%0A
 )%0A
+%0Atype SockExtendedErr struct %7B%0A%09Errno  uint32%0A%09Origin uint8%0A%09Type   uint8%0A%09Code   uint8%0A%09Pad    uint8%0A%09Info   uint32%0A%09Data   uint32%0A%7D%0A
- f cbfd3e0f2b538eb3404162798f3fc6e26c18d3a258292c3fa38855134404b6fb vendor/golang.org/x/sys/unix/ztypes_linux_s390x.go
+ f 76f93217f73faa71aa0e68b887d86252ed24bf4d22f5fea25d4ce57192ccef72 vendor/golang.org/x/sys/unix/ztypes_linux_s390x.go
dmppatch 13
@@ -13984,24 +13984,327 @@
 6%5Duint64%0A%7D%0A%0A
+type SignalfdSiginfo struct %7B%0A%09Signo   uint32%0A%09Errno   int32%0A%09Code    int32%0A%09Pid     uint32%0A%09Uid     uint32%0A%09Fd      int32%0A%09Tid     uint32%0A%09Band    uint32%0A%09Overrun uint32%0A%09Trapno  uint32%0A%09Status  int32%0A%09Int     int32%0A%09Ptr     uint64%0A%09Utime   uint64%0A%09Stime   uint64%0A%09Addr    uint64%0A%09_       %5B48%5Duint8%0A%7D%0A%0A
 const RNDGET
@@ -50359,24 +50359,73 @@
    = 0xa%0A)%0A%0A
+type ScmTimestamping struct %7B%0A%09Ts %5B3%5DTimespec%0A%7D%0A%0A
 const (%0A%09SOF
@@ -51061,10 +51061,217 @@
  0x7fff%0A
+%0A%09SCM_TSTAMP_SND   = 0x0%0A%09SCM_TSTAMP_SCHED = 0x1%0A%09SCM_TSTAMP_ACK   = 0x2%0A
 )%0A
+%0Atype SockExtendedErr struct %7B%0A%09Errno  uint32%0A%09Origin uint8%0A%09Type   uint8%0A%09Code   uint8%0A%09Pad    uint8%0A%09Info   uint32%0A%09Data   uint32%0A%7D%0A
- f d0ea8a571c5d969b9b25f244fed621c220c4ad5aab603732dbcba9663a2692e0 vendor/golang.org/x/sys/unix/ztypes_linux_sparc64.go
+ f 796f00e5dc9b998373c71fbcc9a13204c3258e007f4949e2bd21957d321268e5 vendor/golang.org/x/sys/unix/ztypes_linux_sparc64.go
dmppatch 13
@@ -13551,24 +13551,327 @@
 6%5Duint64%0A%7D%0A%0A
+type SignalfdSiginfo struct %7B%0A%09Signo   uint32%0A%09Errno   int32%0A%09Code    int32%0A%09Pid     uint32%0A%09Uid     uint32%0A%09Fd      int32%0A%09Tid     uint32%0A%09Band    uint32%0A%09Overrun uint32%0A%09Trapno  uint32%0A%09Status  int32%0A%09Int     int32%0A%09Ptr     uint64%0A%09Utime   uint64%0A%09Stime   uint64%0A%09Addr    uint64%0A%09_       %5B48%5Duint8%0A%7D%0A%0A
 const RNDGET
@@ -49907,24 +49907,73 @@
    = 0xa%0A)%0A%0A
+type ScmTimestamping struct %7B%0A%09Ts %5B3%5DTimespec%0A%7D%0A%0A
 const (%0A%09SOF
@@ -50609,10 +50609,217 @@
  0x7fff%0A
+%0A%09SCM_TSTAMP_SND   = 0x0%0A%09SCM_TSTAMP_SCHED = 0x1%0A%09SCM_TSTAMP_ACK   = 0x2%0A
 )%0A
+%0Atype SockExtendedErr struct %7B%0A%09Errno  uint32%0A%09Origin uint8%0A%09Type   uint8%0A%09Code   uint8%0A%09Pad    uint8%0A%09Info   uint32%0A%09Data   uint32%0A%7D%0A
+ f da2e3dc78718d98d07b597519745f1ba9e45f81b09559bcbc4e9142ca5472fba vendor/golang.org/x/sys/unix/ztypes_netbsd_arm64.go
utf8file 473
// cgo -godefs types_netbsd.go | go run mkpost.go
// Code generated by the command above; see README.md. DO NOT EDIT.

// +build arm64,netbsd

package unix

const (
	SizeofPtr      = 0x8
	SizeofShort    = 0x2
	SizeofInt      = 0x4
	SizeofLong     = 0x8
	SizeofLongLong = 0x8
)

type (
	_C_short     int16
	_C_int       int32
	_C_long      int64
	_C_long_long int64
)

type Timespec struct {
	Sec  int64
	Nsec int64
}

type Timeval struct {
	Sec       int64
	Usec      int32
	Pad_cgo_0 [4]byte
}

type Rusage struct {
	Utime    Timeval
	Stime    Timeval
	Maxrss   int64
	Ixrss    int64
	Idrss    int64
	Isrss    int64
	Minflt   int64
	Majflt   int64
	Nswap    int64
	Inblock  int64
	Oublock  int64
	Msgsnd   int64
	Msgrcv   int64
	Nsignals int64
	Nvcsw    int64
	Nivcsw   int64
}

type Rlimit struct {
	Cur uint64
	Max uint64
}

type _Gid_t uint32

type Stat_t struct {
	Dev           uint64
	Mode          uint32
	Pad_cgo_0     [4]byte
	Ino           uint64
	Nlink         uint32
	Uid           uint32
	Gid           uint32
	Pad_cgo_1     [4]byte
	Rdev          uint64
	Atimespec     Timespec
	Mtimespec     Timespec
	Ctimespec     Timespec
	Birthtimespec Timespec
	Size          int64
	Blocks        int64
	Blksize       uint32
	Flags         uint32
	Gen           uint32
	Spare         [2]uint32
	Pad_cgo_2     [4]byte
}

type Statfs_t [0]byte

type Flock_t struct {
	Start  int64
	Len    int64
	Pid    int32
	Type   int16
	Whence int16
}

type Dirent struct {
	Fileno    uint64
	Reclen    uint16
	Namlen    uint16
	Type      uint8
	Name      [512]int8
	Pad_cgo_0 [3]byte
}

type Fsid struct {
	X__fsid_val [2]int32
}

const (
	PathMax = 0x400
)

const (
	FADV_NORMAL     = 0x0
	FADV_RANDOM     = 0x1
	FADV_SEQUENTIAL = 0x2
	FADV_WILLNEED   = 0x3
	FADV_DONTNEED   = 0x4
	FADV_NOREUSE    = 0x5
)

type RawSockaddrInet4 struct {
	Len    uint8
	Family uint8
	Port   uint16
	Addr   [4]byte /* in_addr */
	Zero   [8]int8
}

type RawSockaddrInet6 struct {
	Len      uint8
	Family   uint8
	Port     uint16
	Flowinfo uint32
	Addr     [16]byte /* in6_addr */
	Scope_id uint32
}

type RawSockaddrUnix struct {
	Len    uint8
	Family uint8
	Path   [104]int8
}

type RawSockaddrDatalink struct {
	Len    uint8
	Family uint8
	Index  uint16
	Type   uint8
	Nlen   uint8
	Alen   uint8
	Slen   uint8
	Data   [12]int8
}

type RawSockaddr struct {
	Len    uint8
	Family uint8
	Data   [14]int8
}

type RawSockaddrAny struct {
	Addr RawSockaddr
	Pad  [92]int8
}

type _Socklen uint32

type Linger struct {
	Onoff  int32
	Linger int32
}

type Iovec struct {
	Base *byte
	Len  uint64
}

type IPMreq struct {
	Multiaddr [4]byte /* in_addr */
	Interface [4]byte /* in_addr */
}

type IPv6Mreq struct {
	Multiaddr [16]byte /* in6_addr */
	Interface uint32
}

type Msghdr struct {
	Name       *byte
	Namelen    uint32
	Pad_cgo_0  [4]byte
	Iov        *Iovec
	Iovlen     int32
	Pad_cgo_1  [4]byte
	Control    *byte
	Controllen uint32
	Flags      int32
}

type Cmsghdr struct {
	Len   uint32
	Level int32
	Type  int32
}

type Inet6Pktinfo struct {
	Addr    [16]byte /* in6_addr */
	Ifindex uint32
}

type IPv6MTUInfo struct {
	Addr RawSockaddrInet6
	Mtu  uint32
}

type ICMPv6Filter struct {
	Filt [8]uint32
}

const (
	SizeofSockaddrInet4    = 0x10
	SizeofSockaddrInet6    = 0x1c
	SizeofSockaddrAny      = 0x6c
	SizeofSockaddrUnix     = 0x6a
	SizeofSockaddrDatalink = 0x14
	SizeofLinger           = 0x8
	SizeofIPMreq           = 0x8
	SizeofIPv6Mreq         = 0x14
	SizeofMsghdr           = 0x30
	SizeofCmsghdr          = 0xc
	SizeofInet6Pktinfo     = 0x14
	SizeofIPv6MTUInfo      = 0x20
	SizeofICMPv6Filter     = 0x20
)

const (
	PTRACE_TRACEME = 0x0
	PTRACE_CONT    = 0x7
	PTRACE_KILL    = 0x8
)

type Kevent_t struct {
	Ident     uint64
	Filter    uint32
	Flags     uint32
	Fflags    uint32
	Pad_cgo_0 [4]byte
	Data      int64
	Udata     int64
}

type FdSet struct {
	Bits [8]uint32
}

const (
	SizeofIfMsghdr         = 0x98
	SizeofIfData           = 0x88
	SizeofIfaMsghdr        = 0x18
	SizeofIfAnnounceMsghdr = 0x18
	SizeofRtMsghdr         = 0x78
	SizeofRtMetrics        = 0x50
)

type IfMsghdr struct {
	Msglen    uint16
	Version   uint8
	Type      uint8
	Addrs     int32
	Flags     int32
	Index     uint16
	Pad_cgo_0 [2]byte
	Data      IfData
}

type IfData struct {
	Type       uint8
	Addrlen    uint8
	Hdrlen     uint8
	Pad_cgo_0  [1]byte
	Link_state int32
	Mtu        uint64
	Metric     uint64
	Baudrate   uint64
	Ipackets   uint64
	Ierrors    uint64
	Opackets   uint64
	Oerrors    uint64
	Collisions uint64
	Ibytes     uint64
	Obytes     uint64
	Imcasts    uint64
	Omcasts    uint64
	Iqdrops    uint64
	Noproto    uint64
	Lastchange Timespec
}

type IfaMsghdr struct {
	Msglen    uint16
	Version   uint8
	Type      uint8
	Addrs     int32
	Flags     int32
	Metric    int32
	Index     uint16
	Pad_cgo_0 [6]byte
}

type IfAnnounceMsghdr struct {
	Msglen  uint16
	Version uint8
	Type    uint8
	Index   uint16
	Name    [16]int8
	What    uint16
}

type RtMsghdr struct {
	Msglen    uint16
	Version   uint8
	Type      uint8
	Index     uint16
	Pad_cgo_0 [2]byte
	Flags     int32
	Addrs     int32
	Pid       int32
	Seq       int32
	Errno     int32
	Use       int32
	Inits     int32
	Pad_cgo_1 [4]byte
	Rmx       RtMetrics
}

type RtMetrics struct {
	Locks    uint64
	Mtu      uint64
	Hopcount uint64
	Recvpipe uint64
	Sendpipe uint64
	Ssthresh uint64
	Rtt      uint64
	Rttvar   uint64
	Expire   int64
	Pksent   int64
}

type Mclpool [0]byte

const (
	SizeofBpfVersion = 0x4
	SizeofBpfStat    = 0x80
	SizeofBpfProgram = 0x10
	SizeofBpfInsn    = 0x8
	SizeofBpfHdr     = 0x20
)

type BpfVersion struct {
	Major uint16
	Minor uint16
}

type BpfStat struct {
	Recv    uint64
	Drop    uint64
	Capt    uint64
	Padding [13]uint64
}

type BpfProgram struct {
	Len       uint32
	Pad_cgo_0 [4]byte
	Insns     *BpfInsn
}

type BpfInsn struct {
	Code uint16
	Jt   uint8
	Jf   uint8
	K    uint32
}

type BpfHdr struct {
	Tstamp    BpfTimeval
	Caplen    uint32
	Datalen   uint32
	Hdrlen    uint16
	Pad_cgo_0 [6]byte
}

type BpfTimeval struct {
	Sec  int64
	Usec int64
}

type Termios struct {
	Iflag  uint32
	Oflag  uint32
	Cflag  uint32
	Lflag  uint32
	Cc     [20]uint8
	Ispeed int32
	Ospeed int32
}

type Winsize struct {
	Row    uint16
	Col    uint16
	Xpixel uint16
	Ypixel uint16
}

type Ptmget struct {
	Cfd int32
	Sfd int32
	Cn  [1024]byte
	Sn  [1024]byte
}

const (
	AT_FDCWD            = -0x64
	AT_SYMLINK_NOFOLLOW = 0x200
)

type PollFd struct {
	Fd      int32
	Events  int16
	Revents int16
}

const (
	POLLERR    = 0x8
	POLLHUP    = 0x10
	POLLIN     = 0x1
	POLLNVAL   = 0x20
	POLLOUT    = 0x4
	POLLPRI    = 0x2
	POLLRDBAND = 0x80
	POLLRDNORM = 0x40
	POLLWRBAND = 0x100
	POLLWRNORM = 0x4
)

type Sysctlnode struct {
	Flags           uint32
	Num             int32
	Name            [32]int8
	Ver             uint32
	X__rsvd         uint32
	Un              [16]byte
	X_sysctl_size   [8]byte
	X_sysctl_func   [8]byte
	X_sysctl_parent [8]byte
	X_sysctl_desc   [8]byte
}

type Utsname struct {
	Sysname  [256]byte
	Nodename [256]byte
	Release  [256]byte
	Version  [256]byte
	Machine  [256]byte
}

const SizeofClockinfo = 0x14

type Clockinfo struct {
	Hz      int32
	Tick    int32
	Tickadj int32
	Stathz  int32
	Profhz  int32
}

- f 9e48d3e363fbc1ac8db546c1882bb0ba173aa5d5ae8bf6ab086cb98d0d600f4d vendor/modules.txt
+ f 636626847eb8b623c7f1fe0b0036c7850642fd7d6a592c26c437b0b99475aac7 vendor/modules.txt
dmppatch 10
@@ -367,65 +367,65 @@
 zer%0A
-# golang.org/x/crypto v0.0.0-20190103213133-ff983b9c42bc%0A
+# golang.org/x/crypto v0.0.0-20190123085648-057139ce5d2b%0A
 gola
@@ -724,62 +724,62 @@
 lsa%0A
-# golang.org/x/sys v0.0.0-20190114130336-2be517255631%0A
+# golang.org/x/sys v0.0.0-20190124100055-b90733256f2e%0A
 gola
treehash 98e5a41649a5ddaf422bee7dd00c179aa95c14aa7f7da58403f9d520876bad19
